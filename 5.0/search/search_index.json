{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intel\u00ae Security Libraries for Datacenter Current Release INTEL\u00ae SECL - DC 5.0.0 GA RELEASE (NEW!) WHAT IS INTEL\u00ae SECL - DC? Hardware-based cloud security solutions provide a higher level of protection as compared to software-only security measures. There are many Intel platform security technologies, which can be used to secure customers' data. Customers have found adopting and deploying these technologies at a broad scale challenging, due to the lack of solution integration and deployment tools. Intel\u00ae Security Libraries for Data Centers (Intel\u00ae SecL - DC) was built to aid our customers in adopting and deploying Intel Security features, rooted in silicon, at scale. Intel\u00ae SecL-DC is an open-source remote attestation implementation comprising of a set of building blocks that utilize Intel Security features to discover, attest, and enable critical foundation security and confidential computing use-cases. It applies the remote attestation fundamentals and standard specifications to maintain a platform data collection service and an efficient verification engine to perform comprehensive trust evaluations. These trust evaluations can be used to govern different trust and security policies applied to any given workload. This Intel\u00ae SecL-DC middleware provides Building blocks (Libraries and components) that discover, attest, and utilize Intel security features to enable critical cloud security & confidential computing use-cases. Use different TEEs (TPM, Intel(R) Software Guard Extensions(SGX)) for Application Data Protection & Key Management. Consistent set of APIs for easy integration with cloud management software and security monitoring and enforcement tools for visibility and control. Micro services-based model to expose and use Intel security features. Built for cloud scale with the ability to deploy as containerized components. Extensible to include any future security use-cases and technologies. Supports RHEL , Ubuntu , and VMWare* ESXi Supports plugins for orchestrators including Kubernetes* Automation of deployment and provisioning Intel\u00ae SecL-DC is provided as reference code and is also extensible to include any future security use cases and technologies. The below diagram depicts the high level architecture of the Intel(R)SecL-DC middleware, enabling the use cases for: Hardware and platform attestation Discovery and attestation Data sovereignty Workload (container) Integrity & Confidentiality Platform integrity assurance Workload integrity and confidentiality assurance Data Protection & Confidential Computing Data confidentiality, workload cryptographic isolation TEEs for Data Protection & Key Management (Intel(R) SGX) The bottom part of the architecture diagram indicates the various technologies that would be used to support the different capabilities mentioned. The system supports REST interfaces for internal/external communication including integration with external orchestrators and compliance tools. The topmost layer lists out the various use cases that could be implemented in a data center using the capabilities that the system supports. The system provides integration plug-ins to cloud orchestrator solutions like K8S* supporting the CRIO runtime. INTEL\u00ae'S ROLE IN INTEL\u00ae SECL-DC Intel is the leading contributor and maintainer of Intel\u00ae SecL-DC, which leverages Intel\u00ae processors with different security technologies including Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT), Boot Guard (BtG), Intel\u00ae Software Guard Extensions (Intel\u00ae SGX) and other upcoming technologies in its platform to provide the next generation attestation solution that can be used in private and public clouds.","title":"Intel\u00ae Security Libraries for Datacenter"},{"location":"#intel-security-libraries-for-datacenter","text":"","title":"Intel\u00ae Security Libraries for Datacenter"},{"location":"#current-release","text":"INTEL\u00ae SECL - DC 5.0.0 GA RELEASE (NEW!)","title":"Current Release"},{"location":"#what-is-intel-secl-dc","text":"Hardware-based cloud security solutions provide a higher level of protection as compared to software-only security measures. There are many Intel platform security technologies, which can be used to secure customers' data. Customers have found adopting and deploying these technologies at a broad scale challenging, due to the lack of solution integration and deployment tools. Intel\u00ae Security Libraries for Data Centers (Intel\u00ae SecL - DC) was built to aid our customers in adopting and deploying Intel Security features, rooted in silicon, at scale. Intel\u00ae SecL-DC is an open-source remote attestation implementation comprising of a set of building blocks that utilize Intel Security features to discover, attest, and enable critical foundation security and confidential computing use-cases. It applies the remote attestation fundamentals and standard specifications to maintain a platform data collection service and an efficient verification engine to perform comprehensive trust evaluations. These trust evaluations can be used to govern different trust and security policies applied to any given workload. This Intel\u00ae SecL-DC middleware provides Building blocks (Libraries and components) that discover, attest, and utilize Intel security features to enable critical cloud security & confidential computing use-cases. Use different TEEs (TPM, Intel(R) Software Guard Extensions(SGX)) for Application Data Protection & Key Management. Consistent set of APIs for easy integration with cloud management software and security monitoring and enforcement tools for visibility and control. Micro services-based model to expose and use Intel security features. Built for cloud scale with the ability to deploy as containerized components. Extensible to include any future security use-cases and technologies. Supports RHEL , Ubuntu , and VMWare* ESXi Supports plugins for orchestrators including Kubernetes* Automation of deployment and provisioning Intel\u00ae SecL-DC is provided as reference code and is also extensible to include any future security use cases and technologies. The below diagram depicts the high level architecture of the Intel(R)SecL-DC middleware, enabling the use cases for: Hardware and platform attestation Discovery and attestation Data sovereignty Workload (container) Integrity & Confidentiality Platform integrity assurance Workload integrity and confidentiality assurance Data Protection & Confidential Computing Data confidentiality, workload cryptographic isolation TEEs for Data Protection & Key Management (Intel(R) SGX) The bottom part of the architecture diagram indicates the various technologies that would be used to support the different capabilities mentioned. The system supports REST interfaces for internal/external communication including integration with external orchestrators and compliance tools. The topmost layer lists out the various use cases that could be implemented in a data center using the capabilities that the system supports. The system provides integration plug-ins to cloud orchestrator solutions like K8S* supporting the CRIO runtime.","title":"WHAT IS INTEL\u00ae SECL - DC?"},{"location":"#intels-role-in-intel-secl-dc","text":"Intel is the leading contributor and maintainer of Intel\u00ae SecL-DC, which leverages Intel\u00ae processors with different security technologies including Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT), Boot Guard (BtG), Intel\u00ae Software Guard Extensions (Intel\u00ae SGX) and other upcoming technologies in its platform to provide the next generation attestation solution that can be used in private and public clouds.","title":"INTEL\u00ae'S ROLE IN INTEL\u00ae SECL-DC"},{"location":"Intel%20Disclaimer/","text":"Disclaimer Notice: This document contains information on products in the design phase of development. The information here is subject to change without notice. Do not finalize a design with this information. Intel technologies\u2019 features and benefits depend on system configuration and may require enabled hardware, software, or service activation. Learn more at intel.com, or from the OEM or retailer. No computer system can be absolutely secure. Intel does not assume any liability for lost or stolen data or systems or any damages resulting from such losses. You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Intel products described herein. You agree to grant Intel a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications. Current characterized errata are available on request. This document contains information on products, services and/or processes in development. All information provided here is subject to change without notice. Contact your Intel representative to obtain the latest Intel product specifications and roadmaps. Intel disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. Warning: Altering PC clock or memory frequency and/or voltage may (i) reduce system stability and use life of the system, memory and processor; (ii) cause the processor and other system components to fail; (iii) cause reductions in system performance; (iv) cause additional heat or other damage; and (v) affect system data integrity. Intel assumes no responsibility that the memory, included if used with altered clock frequencies and/or voltages, will be fit for any particular purpose. Check with memory manufacturer for warranty and additional details. Tests document performance of components on a particular test, in specific systems. Differences in hardware, software, or configuration will affect actual performance. Consult other sources of information to evaluate performance as you consider your purchase. For more complete information about performance and benchmark results, visit https://www.intel.com/performance . Cost reduction scenarios described are intended as examples of how a given Intel- based product, in the specified circumstances and configurations, may affect future costs and provide cost savings. Circumstances will vary. Intel does not guarantee any costs or cost reduction. Results have been estimated or simulated using internal Intel analysis or architecture simulation or modeling, and provided to you for informational purposes. Any differences in your system hardware, software or configuration may affect your actual performance. Intel does not control or audit third-party benchmark data or the web sites referenced in this document. You should visit the referenced web site and confirm whether referenced data are accurate. Intel is a sponsor and member of the Benchmark XPRT Development Community, and was the major developer of the XPRT family of benchmarks. Principled Technologies is the publisher of the XPRT family of benchmarks. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases. Copies of documents which have an order number and are referenced in this document may be obtained by calling 1-800-548-4725 or by visiting www.intel.com/design/literature.htm. Intel, the Intel logo, Intel TXT, and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries. *Other names and brands may be claimed as the property of others. Copyright \u00a9 2020, Intel Corporation. All Rights Reserved.","title":"Disclaimer"},{"location":"Intel%20Disclaimer/#disclaimer","text":"Notice: This document contains information on products in the design phase of development. The information here is subject to change without notice. Do not finalize a design with this information. Intel technologies\u2019 features and benefits depend on system configuration and may require enabled hardware, software, or service activation. Learn more at intel.com, or from the OEM or retailer. No computer system can be absolutely secure. Intel does not assume any liability for lost or stolen data or systems or any damages resulting from such losses. You may not use or facilitate the use of this document in connection with any infringement or other legal analysis concerning Intel products described herein. You agree to grant Intel a non-exclusive, royalty-free license to any patent claim thereafter drafted which includes subject matter disclosed herein. No license (express or implied, by estoppel or otherwise) to any intellectual property rights is granted by this document. The products described may contain design defects or errors known as errata which may cause the product to deviate from published specifications. Current characterized errata are available on request. This document contains information on products, services and/or processes in development. All information provided here is subject to change without notice. Contact your Intel representative to obtain the latest Intel product specifications and roadmaps. Intel disclaims all express and implied warranties, including without limitation, the implied warranties of merchantability, fitness for a particular purpose, and non-infringement, as well as any warranty arising from course of performance, course of dealing, or usage in trade. Warning: Altering PC clock or memory frequency and/or voltage may (i) reduce system stability and use life of the system, memory and processor; (ii) cause the processor and other system components to fail; (iii) cause reductions in system performance; (iv) cause additional heat or other damage; and (v) affect system data integrity. Intel assumes no responsibility that the memory, included if used with altered clock frequencies and/or voltages, will be fit for any particular purpose. Check with memory manufacturer for warranty and additional details. Tests document performance of components on a particular test, in specific systems. Differences in hardware, software, or configuration will affect actual performance. Consult other sources of information to evaluate performance as you consider your purchase. For more complete information about performance and benchmark results, visit https://www.intel.com/performance . Cost reduction scenarios described are intended as examples of how a given Intel- based product, in the specified circumstances and configurations, may affect future costs and provide cost savings. Circumstances will vary. Intel does not guarantee any costs or cost reduction. Results have been estimated or simulated using internal Intel analysis or architecture simulation or modeling, and provided to you for informational purposes. Any differences in your system hardware, software or configuration may affect your actual performance. Intel does not control or audit third-party benchmark data or the web sites referenced in this document. You should visit the referenced web site and confirm whether referenced data are accurate. Intel is a sponsor and member of the Benchmark XPRT Development Community, and was the major developer of the XPRT family of benchmarks. Principled Technologies is the publisher of the XPRT family of benchmarks. You should consult other information and performance tests to assist you in fully evaluating your contemplated purchases. Copies of documents which have an order number and are referenced in this document may be obtained by calling 1-800-548-4725 or by visiting www.intel.com/design/literature.htm. Intel, the Intel logo, Intel TXT, and Xeon are trademarks of Intel Corporation in the U.S. and/or other countries. *Other names and brands may be claimed as the property of others. Copyright \u00a9 2020, Intel Corporation. All Rights Reserved.","title":"Disclaimer"},{"location":"ReleaseNotes/ReleaseNotes/","text":"Intel Security Libraries for Data Center Intel(R) SecL-DC version 5.0 BETA Foundational Security/Workload Security Use Cases: All bare-metal binary installation deployments have been deprecated. The Workload Confidentiality use case is now supported again for container workloads only Intel SecL now supports IMA for boot-time and run-time integrity attestation of system files and folders Intel SecL now supports Endorsement Certificate (EC) Pre-Registration. This feature allows a hardware owner to pre-register TPM ECs for any devices that will later be registered to the HVS for attestation. This feature is intended for Edge and IoT devices that may be provisioned centrally and then installed in remote locations, and is intended to prevent unauthorized devices from being registered. Upgrades are supported only from v4.2-Beta usecase charts. Workload Confidentiality use case is not supported for upgrade. Usecases Current Version Version Upgradable Host-Attestation v4.2.0 v5.0.0 Trusted-Workload-Placement v4.2.0 v5.0.0 Trusted-Workload-Placement-Cloud-Service-Provider v4.2.0 v5.0.0 Trusted-Workload-Placement-Control-Plane v4.2.0 v5.0.0 SKC/SGX Attestation Use Cases: All SGX/SKC use cases are unsupported. Intel(R) SecL-DC version 4.2 BETA Foundational Security/Workload Security Use Cases: Intel SecL-DC no longer supports bare-metal binary installation. All deployment of Intel SecL components will now require Kubernetes and use Helm charts for deployment. Because bare-metal deployments are no longer supported, the following use cases no longer apply and will be deprecated for all future releases: Application Integrity Virtual Machine Confidentiality The following use cases are unsupported for this BETA release only. These will not be deprecated going forward, but are unsupported for the 4.2 BETA release Workload Confidentiality SKC/ SGX Attestation Use Cases: Helm deployments are not currently supported for SKC / SGX use cases. No changes have been made for this Beta release. Intel(R) SecL-DC version 4.1 GA Foundational/WL Use Cases: New attestation reports will now be triggered whenever a Trust Agent starts, including as a result of a host reboot. Note that this does not affect VMWare hosts. As part of this feature, the HVS /reports API now has an additional option for asynchronous report generation - see the Swagger API documentation for details. Existing calls to /reports will work with no needed changes. A new long-lived token is required to give the Trust Agent permissions to generate new asynchronous reports on startup. To support this feature in an environment upgraded from an earlier release, use the 4.1 version of the populate-users script. Use the new resulting installation token to run the \"tagent setup download-api-token\" setup task on each Trust Agent host at the end of the upgrade process. The new long-lived token expires after one year. To regenerate the token, generate a new installation bearer token using the populate-users script, and use that token to run the \"tagent setup download-api-token\" setup task on each Trust Agent host. New options for tainting Kubernetes worker nodes have been added to the Intel SecL Kubernetes controller. These new options are in addition to the previously-supported ability to taint workers on an untrusted attestation. These new options provide an admission-control capability to help ensure that security-sensitive pods are not scheduled on workers that have not yet proved integrity. Worker nodes can now be automatically tainted on reboot, clearing the taint based only on a trusted attestation Worker nodes can now be automatically tainted when attached to the Kubernetes cluster, clearing the taint based only on a trusted attestation. As with all Kubernetes worker node tainting, pods can be configured with \"tolerations\" to be scheduled even on tainted workers. Intel(R) SecL-DC version 4.0 GA Foundational/WL Use Cases: Support for Client Intel\u00ae PTT (fTPM) has been added. ISecL has always supported the server implementation of PTT. However, the client implementation has a difference in the endorsement certificate hierarchies that would cause the TPM authenticity verification to fail during Trust Agent provisioning. This alternative implementation is now supported. Support for TPM SHA384 PCR banks has been added. Newer TPMs support SHA384, and ISecL has added support for this algorithm. The addition of another PCR bank algorithm has also forced changes in the way the HVS will behave when it encounters multiple available PCR banks. By default, the most secure PCR bank will be preferred when importing flavors or performing attestations. If a host only has one bank enabled, that bank will be used. If a host has multiple banks enabled, the HVS will choose the \u201cbest\u201d available algorithm and disregard the others. In most cases this will not be noticeable. In the specific case where the same flavor will be used on hosts with different PCR banks enabled however, this may result in \u201cuntrusted\u201d results: Importing a flavor from a host with SHA256 and SHA384 enabled will generate a flavor using SHA384. If host is attested that only has a SHA256 bank enabled and does not have SHA384, the host will appear untrusted because no flavors can match the SHA256 hashes available, even if the servers are otherwise identical. This specific scenario requires separate flavors for the SHA256 systems. A datacenter may require a RHEL 8.4 SHA384 flavor, and also a RHEL 8.4 SHA256 flavor. The OS can be identical, but the measurements used at attestation time need to match the measurements in the flavors. Platform-info gathering from the Trust Agent has been changed to now pull platform details directly from UEFI and ACPI tables, instead of working through intermediary applications like dmidecode. Previous Trust Agent dependencies like dmidecode have been removed Additional PCR event logs are now available that were previously invisible. This allows far more visibility and granularity in remote attestations and flavor definitions. Intel SecL now exposes Flavor templates. Previously the definitions for which PCRs and events would belong in each flavor part were hard-coded. Given specific host conditions (which security technologies are enabled, etc) and the specific flavor part (PLATFORM, OS, etc), the HVS would use specific PCRs and events. These definitions were previously not changeable by the end user. This new feature adds the capability to create new templates that cumulatively apply definitions to flavor parts based on what\u2019s detected on the host. This allows an administrator to define which PCRs and events should be used for each flavor part, and to control those definitions based on conditions present on the host. The Key Broker now requires that the KMIP client certificate include Subject Alternative Names with the KMIP servers ???NOTE: This requirement may mean that older KMIP client certificates will no longer be valid after an upgrade to version 4.0, if the previously generated certificates did not contain the needed SAN. Support for the filesystem key manager in the Key Broker Service has been removed. This feature was provided as a POC-level function to help customers get started using the Key Broker and was not intended for production use. This functionality has been removed. The Key Broker now requires a 3 rd -party KMIP key manager. The Trust Agent and HVS now support communication in NATS mode. This does not replace the default HTTP communication but is provided as an alternative. By default, the Trust Agent exposes REST API endpoints through an open port, and communication is initiated by the HVS to make API requests to the Trust Agent. NATS mode provides an option for an alternative messaging system. In NATS mode the Trust Agent does not expose any API endpoints. Instead, the Agent will establish a connection to a NATS server that acts as a messaging system. The HVS will also route Trust Agent communication via the NATS server, allowing the same functionality provided in HTTP mode. NATS is a third-party application; additional documentation can be found at https://nats.io . Sample configuration information for a NATS Server are provided in the Intel\u00ae Security Libraries Product Guide. The Trust Agent has changed how it utilizes TPM ownership. Previously the Agent would assert TPM ownership at service startup. This is no longer required. Instead, TPM ownership is not only required at the time of TPM provisioning, when the AIK is generated and endorsed by the HVS. This makes the Trust Agent much easier to use for administrators who also need to use their TPMs for purposes outside of Intel\u00ae Security Libraries. The ownership secret is also no longer stored in the config.yml file. As part of this change, the Trust Agent now supports and defaults to a NULL TPM ownership secret. If the TPM_OWNERSHIP_SECRET variable is provided in trustagent.env, the installer will use the specified secret. If no secret is specified, or if the value of the variable is empty, the Agent will use a NULL TPM ownership secret by default. This change is intended to allow administrators to control and manage the platform TPM and how ownership is used. Defaulting to a NULL secret also means that the Trust Agent will no longer require clearing the TPM ownership in any but the rarest of cases. The Trust Agent will also now support TPM ownership secrets other than the previous 20 byte hex secret. Any ASCII string can now be utilized. To force a string to be treated as hex, prefix the secret with \"hex:\". Again this allows significantly greater control over the secret for the platform administrator. ???NOTE: This change will require upgrades to version 4.0 to re-provision the Trust Agent. This means that for upgrades to version 4.0, the installation bearer token must be provided. In addition, if the TPM owner secret is already set, the secret must be provided at provisioning time as well (which will typically be when the upgrade is executed). This can also be an opportunity to clear the TPM ownership and use the NULL secret or one of the other new options. Support for the Docker container runtime interface has been deprecated for the container confidentiality feature. Intel\u00ae SecL now supports only the CRI-O container runtime interface for container confidentiality. Known Issues: ??? Important Note:** SGX Attestation fails when SGX is enabled on a host booted using tboot Root Cause: tboot requires the \"noefi\" kernel parameter to be passed during boot, in order to not use an unmeasured EFI runtime services. As a result, the kernel does not expose EFI variables to user-space. SGX Attestation requires these EFI variables to fetch Platform Manifest data. Workaround: The EFI variables required by SGX are only needed during the SGX provisioning/registration phase. Once this step is completed successfully, access to the EFI variables is no longer required. This means this issue can be worked around by installing the SGX agent without booting to tboot, then rebooting the system to tboot. SGX attestation will then work as expected while booted to tboot. 1. Enable SGX and TXT in the platform BIOS 2. Perform SGX Factory Reset and boot into the \u201cplain\u201d distribution kernel (without tboot or TCB) 3. Install tboot and ISecL components (SGX Agent, Trust Agent and Workload Agent) 4. The SGX Agent installation fetches the SGX Platform Manifest data and caches it 5. Reboot the system into the tboot kernel mode. 6. Verify that TXT measured launch was successful: txt-stat |grep \"TXT measured launch\" 7. The SGX and Platform Integrity Attestation use cases should now work as normal. Intel(R) SecL-DC Version 3.6 GA Foundational/WL Use Cases: Containerization Deployment of Foundational and Workload Security Use Cases supported and validated with RHEL and Ubuntu OS Added support for pyKMIP integration with Workload Security Use Cases Additional performance and scalability improvements Common Integration Hub to support both Foundational/WL Use Cases and SKC/SGX Attestation Use Cases SKC/ SGX Attestation Use Cases: Additional performance and scalability improvements SGX Sample Application with quote verification signature added Known Issues: - While upgrading components normally requires no installation answer files, the Integration Hub when upgrading from version 3.5 to 3.6 will require an answer file containing \u201cHVS_BASE_URL= https://hvs.server.com:8443/hvs/v1 \" variable. This is required because the variable and its corresponding configuration setting for the Hub changed between these release versions. No other variables or env files are otherwise required for upgrades. Intel(R) SecL-DC Version 3.5 GA Foundational/WL Use Cases: - Additional performance and scalability improvements Added new filter criteria to the /v2/hosts API. Hosts can now be searched by trust status, and the response data when retrieving host details can now optionally also include the host-status and Trusted state. See the HVS Swaggerdoc for details. Host searches will now return data in a consistent order (based on the timestamp when the host was registered), and can be sorted by ascending or descending order. See the HVS Swaggerdoc for details. The CLI command \"setup server\" has been replaced by \"setup update-service-config\" across all Foundational Security services. See the Product Guide for details. SKC/ SGX Attestation USe Cases: Containerization Deployment of SKC and SGX Attestation Use Cases supported Added support for pyKMIP integration with SKC Use Case; See Quick Start Guide for deployment details Additional performance and scalability improvements Added new filter criteria to the /v2/hosts API. See the HVS Swagger docs for details. SGX Sample Application and Verifier Enhancements Known Issues: - Sometimes the SGX Compute node may becomes inaccessible after the secure key transfer. See guidance in Product Guide. - Running SHVS Setup Task after changing a config value fails. See guidance in Product Guide.","title":"Intel Security Libraries for Data Center"},{"location":"ReleaseNotes/ReleaseNotes/#intel-security-libraries-for-data-center","text":"","title":"Intel Security Libraries for Data Center"},{"location":"ReleaseNotes/ReleaseNotes/#intelr-secl-dc-version-50-beta","text":"Foundational Security/Workload Security Use Cases: All bare-metal binary installation deployments have been deprecated. The Workload Confidentiality use case is now supported again for container workloads only Intel SecL now supports IMA for boot-time and run-time integrity attestation of system files and folders Intel SecL now supports Endorsement Certificate (EC) Pre-Registration. This feature allows a hardware owner to pre-register TPM ECs for any devices that will later be registered to the HVS for attestation. This feature is intended for Edge and IoT devices that may be provisioned centrally and then installed in remote locations, and is intended to prevent unauthorized devices from being registered. Upgrades are supported only from v4.2-Beta usecase charts. Workload Confidentiality use case is not supported for upgrade. Usecases Current Version Version Upgradable Host-Attestation v4.2.0 v5.0.0 Trusted-Workload-Placement v4.2.0 v5.0.0 Trusted-Workload-Placement-Cloud-Service-Provider v4.2.0 v5.0.0 Trusted-Workload-Placement-Control-Plane v4.2.0 v5.0.0 SKC/SGX Attestation Use Cases: All SGX/SKC use cases are unsupported.","title":"Intel(R) SecL-DC version 5.0 BETA"},{"location":"ReleaseNotes/ReleaseNotes/#intelr-secl-dc-version-42-beta","text":"Foundational Security/Workload Security Use Cases: Intel SecL-DC no longer supports bare-metal binary installation. All deployment of Intel SecL components will now require Kubernetes and use Helm charts for deployment. Because bare-metal deployments are no longer supported, the following use cases no longer apply and will be deprecated for all future releases: Application Integrity Virtual Machine Confidentiality The following use cases are unsupported for this BETA release only. These will not be deprecated going forward, but are unsupported for the 4.2 BETA release Workload Confidentiality SKC/ SGX Attestation Use Cases: Helm deployments are not currently supported for SKC / SGX use cases. No changes have been made for this Beta release.","title":"Intel(R) SecL-DC version 4.2 BETA"},{"location":"ReleaseNotes/ReleaseNotes/#intelr-secl-dc-version-41-ga","text":"Foundational/WL Use Cases: New attestation reports will now be triggered whenever a Trust Agent starts, including as a result of a host reboot. Note that this does not affect VMWare hosts. As part of this feature, the HVS /reports API now has an additional option for asynchronous report generation - see the Swagger API documentation for details. Existing calls to /reports will work with no needed changes. A new long-lived token is required to give the Trust Agent permissions to generate new asynchronous reports on startup. To support this feature in an environment upgraded from an earlier release, use the 4.1 version of the populate-users script. Use the new resulting installation token to run the \"tagent setup download-api-token\" setup task on each Trust Agent host at the end of the upgrade process. The new long-lived token expires after one year. To regenerate the token, generate a new installation bearer token using the populate-users script, and use that token to run the \"tagent setup download-api-token\" setup task on each Trust Agent host. New options for tainting Kubernetes worker nodes have been added to the Intel SecL Kubernetes controller. These new options are in addition to the previously-supported ability to taint workers on an untrusted attestation. These new options provide an admission-control capability to help ensure that security-sensitive pods are not scheduled on workers that have not yet proved integrity. Worker nodes can now be automatically tainted on reboot, clearing the taint based only on a trusted attestation Worker nodes can now be automatically tainted when attached to the Kubernetes cluster, clearing the taint based only on a trusted attestation. As with all Kubernetes worker node tainting, pods can be configured with \"tolerations\" to be scheduled even on tainted workers.","title":"Intel(R) SecL-DC version 4.1 GA"},{"location":"ReleaseNotes/ReleaseNotes/#intelr-secl-dc-version-40-ga","text":"Foundational/WL Use Cases: Support for Client Intel\u00ae PTT (fTPM) has been added. ISecL has always supported the server implementation of PTT. However, the client implementation has a difference in the endorsement certificate hierarchies that would cause the TPM authenticity verification to fail during Trust Agent provisioning. This alternative implementation is now supported. Support for TPM SHA384 PCR banks has been added. Newer TPMs support SHA384, and ISecL has added support for this algorithm. The addition of another PCR bank algorithm has also forced changes in the way the HVS will behave when it encounters multiple available PCR banks. By default, the most secure PCR bank will be preferred when importing flavors or performing attestations. If a host only has one bank enabled, that bank will be used. If a host has multiple banks enabled, the HVS will choose the \u201cbest\u201d available algorithm and disregard the others. In most cases this will not be noticeable. In the specific case where the same flavor will be used on hosts with different PCR banks enabled however, this may result in \u201cuntrusted\u201d results: Importing a flavor from a host with SHA256 and SHA384 enabled will generate a flavor using SHA384. If host is attested that only has a SHA256 bank enabled and does not have SHA384, the host will appear untrusted because no flavors can match the SHA256 hashes available, even if the servers are otherwise identical. This specific scenario requires separate flavors for the SHA256 systems. A datacenter may require a RHEL 8.4 SHA384 flavor, and also a RHEL 8.4 SHA256 flavor. The OS can be identical, but the measurements used at attestation time need to match the measurements in the flavors. Platform-info gathering from the Trust Agent has been changed to now pull platform details directly from UEFI and ACPI tables, instead of working through intermediary applications like dmidecode. Previous Trust Agent dependencies like dmidecode have been removed Additional PCR event logs are now available that were previously invisible. This allows far more visibility and granularity in remote attestations and flavor definitions. Intel SecL now exposes Flavor templates. Previously the definitions for which PCRs and events would belong in each flavor part were hard-coded. Given specific host conditions (which security technologies are enabled, etc) and the specific flavor part (PLATFORM, OS, etc), the HVS would use specific PCRs and events. These definitions were previously not changeable by the end user. This new feature adds the capability to create new templates that cumulatively apply definitions to flavor parts based on what\u2019s detected on the host. This allows an administrator to define which PCRs and events should be used for each flavor part, and to control those definitions based on conditions present on the host. The Key Broker now requires that the KMIP client certificate include Subject Alternative Names with the KMIP servers ???NOTE: This requirement may mean that older KMIP client certificates will no longer be valid after an upgrade to version 4.0, if the previously generated certificates did not contain the needed SAN. Support for the filesystem key manager in the Key Broker Service has been removed. This feature was provided as a POC-level function to help customers get started using the Key Broker and was not intended for production use. This functionality has been removed. The Key Broker now requires a 3 rd -party KMIP key manager. The Trust Agent and HVS now support communication in NATS mode. This does not replace the default HTTP communication but is provided as an alternative. By default, the Trust Agent exposes REST API endpoints through an open port, and communication is initiated by the HVS to make API requests to the Trust Agent. NATS mode provides an option for an alternative messaging system. In NATS mode the Trust Agent does not expose any API endpoints. Instead, the Agent will establish a connection to a NATS server that acts as a messaging system. The HVS will also route Trust Agent communication via the NATS server, allowing the same functionality provided in HTTP mode. NATS is a third-party application; additional documentation can be found at https://nats.io . Sample configuration information for a NATS Server are provided in the Intel\u00ae Security Libraries Product Guide. The Trust Agent has changed how it utilizes TPM ownership. Previously the Agent would assert TPM ownership at service startup. This is no longer required. Instead, TPM ownership is not only required at the time of TPM provisioning, when the AIK is generated and endorsed by the HVS. This makes the Trust Agent much easier to use for administrators who also need to use their TPMs for purposes outside of Intel\u00ae Security Libraries. The ownership secret is also no longer stored in the config.yml file. As part of this change, the Trust Agent now supports and defaults to a NULL TPM ownership secret. If the TPM_OWNERSHIP_SECRET variable is provided in trustagent.env, the installer will use the specified secret. If no secret is specified, or if the value of the variable is empty, the Agent will use a NULL TPM ownership secret by default. This change is intended to allow administrators to control and manage the platform TPM and how ownership is used. Defaulting to a NULL secret also means that the Trust Agent will no longer require clearing the TPM ownership in any but the rarest of cases. The Trust Agent will also now support TPM ownership secrets other than the previous 20 byte hex secret. Any ASCII string can now be utilized. To force a string to be treated as hex, prefix the secret with \"hex:\". Again this allows significantly greater control over the secret for the platform administrator. ???NOTE: This change will require upgrades to version 4.0 to re-provision the Trust Agent. This means that for upgrades to version 4.0, the installation bearer token must be provided. In addition, if the TPM owner secret is already set, the secret must be provided at provisioning time as well (which will typically be when the upgrade is executed). This can also be an opportunity to clear the TPM ownership and use the NULL secret or one of the other new options. Support for the Docker container runtime interface has been deprecated for the container confidentiality feature. Intel\u00ae SecL now supports only the CRI-O container runtime interface for container confidentiality. Known Issues: ??? Important Note:** SGX Attestation fails when SGX is enabled on a host booted using tboot Root Cause: tboot requires the \"noefi\" kernel parameter to be passed during boot, in order to not use an unmeasured EFI runtime services. As a result, the kernel does not expose EFI variables to user-space. SGX Attestation requires these EFI variables to fetch Platform Manifest data. Workaround: The EFI variables required by SGX are only needed during the SGX provisioning/registration phase. Once this step is completed successfully, access to the EFI variables is no longer required. This means this issue can be worked around by installing the SGX agent without booting to tboot, then rebooting the system to tboot. SGX attestation will then work as expected while booted to tboot. 1. Enable SGX and TXT in the platform BIOS 2. Perform SGX Factory Reset and boot into the \u201cplain\u201d distribution kernel (without tboot or TCB) 3. Install tboot and ISecL components (SGX Agent, Trust Agent and Workload Agent) 4. The SGX Agent installation fetches the SGX Platform Manifest data and caches it 5. Reboot the system into the tboot kernel mode. 6. Verify that TXT measured launch was successful: txt-stat |grep \"TXT measured launch\" 7. The SGX and Platform Integrity Attestation use cases should now work as normal.","title":"Intel(R) SecL-DC version 4.0 GA"},{"location":"ReleaseNotes/ReleaseNotes/#intelr-secl-dc-version-36-ga","text":"Foundational/WL Use Cases: Containerization Deployment of Foundational and Workload Security Use Cases supported and validated with RHEL and Ubuntu OS Added support for pyKMIP integration with Workload Security Use Cases Additional performance and scalability improvements Common Integration Hub to support both Foundational/WL Use Cases and SKC/SGX Attestation Use Cases SKC/ SGX Attestation Use Cases: Additional performance and scalability improvements SGX Sample Application with quote verification signature added Known Issues: - While upgrading components normally requires no installation answer files, the Integration Hub when upgrading from version 3.5 to 3.6 will require an answer file containing \u201cHVS_BASE_URL= https://hvs.server.com:8443/hvs/v1 \" variable. This is required because the variable and its corresponding configuration setting for the Hub changed between these release versions. No other variables or env files are otherwise required for upgrades.","title":"Intel(R) SecL-DC Version 3.6 GA"},{"location":"ReleaseNotes/ReleaseNotes/#intelr-secl-dc-version-35-ga","text":"Foundational/WL Use Cases: - Additional performance and scalability improvements Added new filter criteria to the /v2/hosts API. Hosts can now be searched by trust status, and the response data when retrieving host details can now optionally also include the host-status and Trusted state. See the HVS Swaggerdoc for details. Host searches will now return data in a consistent order (based on the timestamp when the host was registered), and can be sorted by ascending or descending order. See the HVS Swaggerdoc for details. The CLI command \"setup server\" has been replaced by \"setup update-service-config\" across all Foundational Security services. See the Product Guide for details. SKC/ SGX Attestation USe Cases: Containerization Deployment of SKC and SGX Attestation Use Cases supported Added support for pyKMIP integration with SKC Use Case; See Quick Start Guide for deployment details Additional performance and scalability improvements Added new filter criteria to the /v2/hosts API. See the HVS Swagger docs for details. SGX Sample Application and Verifier Enhancements Known Issues: - Sometimes the SGX Compute node may becomes inaccessible after the secure key transfer. See guidance in Product Guide. - Running SHVS Setup Task after changing a config value fails. See guidance in Product Guide.","title":"Intel(R) SecL-DC Version 3.5 GA"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/","text":"Introduction Overview Intel Security Libraries for Datacenter is a collection of software applications and development libraries intended to help turn Intel platform security features into real-world security use cases. Trusted Computing Trusted Computing consists of a set of industry standards defined by the Trusted Computing Group to harden systems and data against attack. These standards include verifying platform integrity, establishing identity, protection of keys and secrets, and more. One of the functions of Intel Security Libraries is to provide a \u201cTrusted Platform,\u201d using Intel security technologies to add visibility, auditability, and control to server platforms. The Chain of Trust In a Trusted Computing environment, a key concept is verification of the integrity of the underlying platform. Verifying platform integrity typically means cryptographic measurement and/or verification of firmware and software components. The process by which this measurement and verification takes place affects the overall strength of the assertion that the measured and verified components have not been altered. Intel refers to this process as the \u201c Chain of Trust ,\u201d whereby at boot time, a sequence of cryptographic measurements and signature verification events happen in a defined order, such that measurement/verification happens before execution, and each entity responsible for performing a measurement or verification is measured by another step earlier in the process. Any break in this chain leads to an opportunity for an attacker to modify code and evade detection. Hardware Root of Trust The Root of Trust, the first link in the chain, can be one of several different options. Anything that happens in the boot process before the Root of Trust must be considered to be within the \u201ctrust boundary,\u201d signifying components whose trustworthiness cannot be assessed. For this reason, it\u2019s best to use a Root of Trust that starts as early in the system boot process as possible, so that the Chain of Trust during the boot process can cover as much as possible. Multiple Root of Trust options exist, ranging from firmware to hardware. In general, a hardware Root of Trust will have a smaller \u201ctrust boundary\u201d than a firmware Root of Trust. A hardware Root of Trust will also have the benefit of immutability \u2013 where firmware can easily be flashed and modified, hardware is much more difficult to tamper with. Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT) Intel\u00ae Trusted Execution Technology is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Grantley generation. Intel\u00ae TXT is enabled in the system BIOS (typically under the Processor > Advanced tab), and requires Intel\u00ae VT-d and Intel VT-x features to be enabled as prerequisites (otherwise the option will be grayed out). Intel\u00ae TXT will ship \u201cdisabled\u201d by default. Intel\u00ae BootGuard (Intel\u00ae BtG) Intel\u00ae BootGuard is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Purley-Refresh generation. Unlike Intel\u00ae TXT, Intel\u00ae BtG is configured in platform fuses, not in the system BIOS. Intel\u00ae BtG is fused into several \u201cprofiles\u201d that determine the behavior of the feature. Intel\u00ae BtG supports both \u201cverify\u201d and \u201cmeasure\u201d profiles; in \u201cverify\u201d profiles, Intel\u00ae BtG will verify the signature of the platform Initial Boot Block (IBB). In \u201cmeasure\u201dprofiles, Intel\u00ae BtG will hash the IBB and extend that measurement to a TPM PCR. It is recommended that Intel\u00ae BtG be fused into the \u201cmeasure and verify\u201d profile for maximum protection and auditability. Because the Intel\u00ae BtG profile is configured using fuses, the server OEM/ODM will determine the profile used at manufacturing time. Please contact your server vendor to determine what Intel\u00ae BtG profiles are available in their product line. Because Intel\u00ae BtG only measures/verifies the integrity of the IBB, it\u2019s important to have an additional technology handle measurements later in the boot process. Intel\u00ae TXT can provide this function using tboot to invoke SINIT, and UEFI SecureBoot can alternatively provide similar functionality (note that Linux users should properly configure Shim and use a signed kernel for UEFI SecureBoot). Supported Trusted Boot Options Intel\u00ae SecL-DC supports several options for Trusted Computing, depending on the features available on the platform. Remote Attestation Trusted computing consists primarily of two activities \u2013 measurement, and attestation. Measurement is the act of obtaining cryptographic representations for the system state. Attestation is the act of comparing those cryptographic measurements against expected values to determine whether the system booted into an acceptable state. Attestation can be performed either locally, on the same host that is to be attested, or remotely, by an external authority. The trusted boot process can optionally include a local attestation involving the evaluation of a TPM-stored Launch Control Policy (LCP). In this case, the host\u2019s TPM will compare the measurements that have been taken so far to a set of expected PCR values stored in the LCP; if there is a mismatch, the boot process is halted entirely. Intel\u00ae SecL utilizes remote attestation, providing a remote Verification Service that maintains a database of expected measurements (or \u201cflavors\u201d), and compares the actual boot-time measurements from any number of hosts against its database to provide an assertion that the host booted into a \u201ctrusted\u201d or \u201cuntrusted\u201d state. Remote attestation is typically easier to centrally manage (as opposed to creating an LCP for each host and entering the policy into the host\u2019s TPM), does not halt the boot process allowing for easier remediation, and separates the attack surface into separate components that must both be compromised to bypass security controls. Both local and remote attestation can be used concurrently. However, Intel\u00ae SecL, and this document, will focus only on remote attestation. For more information on TPM Launch Control Policies, consult the Intel Trusted Execution Technology (Intel TXT) Software Development Guide ( https://www.intel.com/content/dam/www/public/us/en/documents/guides/intel-txt-software-development-guide.pdf ). Intel\u00ae Security Libraries for Datacenter Features Platform Integrity Platform Integrity is the use case enabled by the specific implementation of the Chain of Trust and Remote Attestation concepts. This involves the use of a Root of Trust to begin an unbroken chain of platform measurements at server boot time, with measurements extended to the Trusted Platform Module and compared against expected values to verify the integrity of measured components. This use case is foundational for other Intel\u00ae SecL use cases. Data Sovereignty / Trusted Workload Placement Data Sovereignty builds on the Platform Integrity use case to allow physical TPMs to be written with Asset Tags containing any number of key/value pairs. This use case is typically used to identify the geographic location of the physical server, but can also be used to identify other attributes. For example, the Asset Tags provided by the Data Sovereignty use case could be used to identify hosts that meet specific compliance requirements and can run controlled workloads. Application Integrity Added in the Intel\u00ae SecL-DC 1.5 release, Application Integrity allows any files and folders on a Linux host system to be included in the Chain of Trust integrity measurements. These measurements are attested by the Verification Service along with the other platform measurements, and are included in determining the host\u2019s overall Trust status. The measurements are performed by a measurement agent called tbootXM, which is built into initrd during Trust Agent installation. Because initrd is included in other Trusted Computing measurements, this allows Intel\u00ae SecL-DC to carry the Chain of Trust all the way to the Linux filesystem. This feature is deprecated as of the 4.2 Beta release. Workload Confidentiality for Containers Added in the Intel\u00ae SecL-DC 1.6 release, Workload Confidentiality allows virtual machine and container images to be encrypted at rest, with key access tied to platform integrity attestation. Because security attributes contained in the platform integrity attestation report are used to control access to the decryption keys, this feature provides both protection for at-rest data, IP, code, etc in container images, and also enforcement of image-owner-controlled placement policies. When decryption keys are released, they are sealed to the physical TPM of the host that was attested, meaning that only a server that has successfully met the policy requirements for the image can actually gain access. Workload Confidentiality builds upon Platform Attestation to protect data in container images. At its core, this feature is about allowing an image owner to set policies that define the conditions under which their image will be allowed to run; if the policy conditions are met, the decryption key will be provided, and if the conditions are not met, the image will remain encrypted and inaccessible. This provides a level of enforcement beyond integration with orchestrators, and protects data in container images by encrypting container images. This functionality means that a physical host must pass policy requirements in order to gain access to the image key, and the image will be encrypted at rest both in image storage and on the compute host. Beginning with the Intel\u00ae SecL-DC version 2.1 release, the Key Broker now supports 3 rd -party key managers that are KMIP-compliant. The Key Broker has been updated to use the \u201cgemalto kmip-go\u201d client. Virtual Machine confidentiality is deprecated as of the 4.2 Beta release. Signed Flavors Added in the Intel\u00ae SecL-DC 1.6 release, Flavor signing is an improvement to the existing handling of expected attestation measurements, called \u201cFlavors.\u201d This feature adds the ability to digitally sign Flavors so that the integrity of the expected measurements themselves can be verified when attestations occur. This also means that Flavors can be more securely transferred between different Verification Service instances. Flavor signing is seamlessly added to the existing Flavor creation process (both importing from a sample host and \u201cmanually\u201d creating a Flavor using the POST method to the /v2/flavors resource). When a Flavor is created, the Verification Service will sign it using a signing certificate signed by the Certificate Management Service (this is created during Verification Service setup). Each time that the Verification Service evaluates a Flavor, it will first verify the signature on that Flavor to ensure the integrity of the Flavor contents before it is used to attest the integrity of any host. Trusted Virtual Kubernetes Worker Nodes Added in the Intel\u00ae SecL-DC version 2.1 release, this feature provides a Chain of Trust solution extending to Kubernetes Worker Nodes deployed as Virtual Machines. This feature addresses Kubernetes deployments that use Virtual Machines as Worker Nodes, rather than using bare-metal servers. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes. Because virtual machine functionality is deprecated as of the 4.2 Beta release, this feature is also deprecated.","title":"Introduction"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#introduction","text":"","title":"Introduction"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#overview","text":"Intel Security Libraries for Datacenter is a collection of software applications and development libraries intended to help turn Intel platform security features into real-world security use cases.","title":"Overview"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#trusted-computing","text":"Trusted Computing consists of a set of industry standards defined by the Trusted Computing Group to harden systems and data against attack. These standards include verifying platform integrity, establishing identity, protection of keys and secrets, and more. One of the functions of Intel Security Libraries is to provide a \u201cTrusted Platform,\u201d using Intel security technologies to add visibility, auditability, and control to server platforms.","title":"Trusted Computing"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#the-chain-of-trust","text":"In a Trusted Computing environment, a key concept is verification of the integrity of the underlying platform. Verifying platform integrity typically means cryptographic measurement and/or verification of firmware and software components. The process by which this measurement and verification takes place affects the overall strength of the assertion that the measured and verified components have not been altered. Intel refers to this process as the \u201c Chain of Trust ,\u201d whereby at boot time, a sequence of cryptographic measurements and signature verification events happen in a defined order, such that measurement/verification happens before execution, and each entity responsible for performing a measurement or verification is measured by another step earlier in the process. Any break in this chain leads to an opportunity for an attacker to modify code and evade detection.","title":"The Chain of Trust"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#hardware-root-of-trust","text":"The Root of Trust, the first link in the chain, can be one of several different options. Anything that happens in the boot process before the Root of Trust must be considered to be within the \u201ctrust boundary,\u201d signifying components whose trustworthiness cannot be assessed. For this reason, it\u2019s best to use a Root of Trust that starts as early in the system boot process as possible, so that the Chain of Trust during the boot process can cover as much as possible. Multiple Root of Trust options exist, ranging from firmware to hardware. In general, a hardware Root of Trust will have a smaller \u201ctrust boundary\u201d than a firmware Root of Trust. A hardware Root of Trust will also have the benefit of immutability \u2013 where firmware can easily be flashed and modified, hardware is much more difficult to tamper with.","title":"Hardware Root of Trust"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#intel-trusted-execution-technology-intel-txt","text":"Intel\u00ae Trusted Execution Technology is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Grantley generation. Intel\u00ae TXT is enabled in the system BIOS (typically under the Processor > Advanced tab), and requires Intel\u00ae VT-d and Intel VT-x features to be enabled as prerequisites (otherwise the option will be grayed out). Intel\u00ae TXT will ship \u201cdisabled\u201d by default.","title":"Intel\u00ae Trusted Execution Technology (Intel\u00ae TXT)"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#intel-bootguard-intel-btg","text":"Intel\u00ae BootGuard is a hardware Root of Trust feature available on Intel\u00ae server platforms starting with the Purley-Refresh generation. Unlike Intel\u00ae TXT, Intel\u00ae BtG is configured in platform fuses, not in the system BIOS. Intel\u00ae BtG is fused into several \u201cprofiles\u201d that determine the behavior of the feature. Intel\u00ae BtG supports both \u201cverify\u201d and \u201cmeasure\u201d profiles; in \u201cverify\u201d profiles, Intel\u00ae BtG will verify the signature of the platform Initial Boot Block (IBB). In \u201cmeasure\u201dprofiles, Intel\u00ae BtG will hash the IBB and extend that measurement to a TPM PCR. It is recommended that Intel\u00ae BtG be fused into the \u201cmeasure and verify\u201d profile for maximum protection and auditability. Because the Intel\u00ae BtG profile is configured using fuses, the server OEM/ODM will determine the profile used at manufacturing time. Please contact your server vendor to determine what Intel\u00ae BtG profiles are available in their product line. Because Intel\u00ae BtG only measures/verifies the integrity of the IBB, it\u2019s important to have an additional technology handle measurements later in the boot process. Intel\u00ae TXT can provide this function using tboot to invoke SINIT, and UEFI SecureBoot can alternatively provide similar functionality (note that Linux users should properly configure Shim and use a signed kernel for UEFI SecureBoot).","title":"Intel\u00ae BootGuard (Intel\u00ae BtG)"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#supported-trusted-boot-options","text":"Intel\u00ae SecL-DC supports several options for Trusted Computing, depending on the features available on the platform.","title":"Supported Trusted Boot Options"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#remote-attestation","text":"Trusted computing consists primarily of two activities \u2013 measurement, and attestation. Measurement is the act of obtaining cryptographic representations for the system state. Attestation is the act of comparing those cryptographic measurements against expected values to determine whether the system booted into an acceptable state. Attestation can be performed either locally, on the same host that is to be attested, or remotely, by an external authority. The trusted boot process can optionally include a local attestation involving the evaluation of a TPM-stored Launch Control Policy (LCP). In this case, the host\u2019s TPM will compare the measurements that have been taken so far to a set of expected PCR values stored in the LCP; if there is a mismatch, the boot process is halted entirely. Intel\u00ae SecL utilizes remote attestation, providing a remote Verification Service that maintains a database of expected measurements (or \u201cflavors\u201d), and compares the actual boot-time measurements from any number of hosts against its database to provide an assertion that the host booted into a \u201ctrusted\u201d or \u201cuntrusted\u201d state. Remote attestation is typically easier to centrally manage (as opposed to creating an LCP for each host and entering the policy into the host\u2019s TPM), does not halt the boot process allowing for easier remediation, and separates the attack surface into separate components that must both be compromised to bypass security controls. Both local and remote attestation can be used concurrently. However, Intel\u00ae SecL, and this document, will focus only on remote attestation. For more information on TPM Launch Control Policies, consult the Intel Trusted Execution Technology (Intel TXT) Software Development Guide ( https://www.intel.com/content/dam/www/public/us/en/documents/guides/intel-txt-software-development-guide.pdf ).","title":"Remote Attestation"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#intel-security-libraries-for-datacenter-features","text":"","title":"Intel\u00ae Security Libraries for Datacenter Features"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#platform-integrity","text":"Platform Integrity is the use case enabled by the specific implementation of the Chain of Trust and Remote Attestation concepts. This involves the use of a Root of Trust to begin an unbroken chain of platform measurements at server boot time, with measurements extended to the Trusted Platform Module and compared against expected values to verify the integrity of measured components. This use case is foundational for other Intel\u00ae SecL use cases.","title":"Platform Integrity"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#data-sovereignty-trusted-workload-placement","text":"Data Sovereignty builds on the Platform Integrity use case to allow physical TPMs to be written with Asset Tags containing any number of key/value pairs. This use case is typically used to identify the geographic location of the physical server, but can also be used to identify other attributes. For example, the Asset Tags provided by the Data Sovereignty use case could be used to identify hosts that meet specific compliance requirements and can run controlled workloads.","title":"Data Sovereignty / Trusted Workload Placement"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#application-integrity","text":"Added in the Intel\u00ae SecL-DC 1.5 release, Application Integrity allows any files and folders on a Linux host system to be included in the Chain of Trust integrity measurements. These measurements are attested by the Verification Service along with the other platform measurements, and are included in determining the host\u2019s overall Trust status. The measurements are performed by a measurement agent called tbootXM, which is built into initrd during Trust Agent installation. Because initrd is included in other Trusted Computing measurements, this allows Intel\u00ae SecL-DC to carry the Chain of Trust all the way to the Linux filesystem. This feature is deprecated as of the 4.2 Beta release.","title":"Application Integrity"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#workload-confidentiality-for-containers","text":"Added in the Intel\u00ae SecL-DC 1.6 release, Workload Confidentiality allows virtual machine and container images to be encrypted at rest, with key access tied to platform integrity attestation. Because security attributes contained in the platform integrity attestation report are used to control access to the decryption keys, this feature provides both protection for at-rest data, IP, code, etc in container images, and also enforcement of image-owner-controlled placement policies. When decryption keys are released, they are sealed to the physical TPM of the host that was attested, meaning that only a server that has successfully met the policy requirements for the image can actually gain access. Workload Confidentiality builds upon Platform Attestation to protect data in container images. At its core, this feature is about allowing an image owner to set policies that define the conditions under which their image will be allowed to run; if the policy conditions are met, the decryption key will be provided, and if the conditions are not met, the image will remain encrypted and inaccessible. This provides a level of enforcement beyond integration with orchestrators, and protects data in container images by encrypting container images. This functionality means that a physical host must pass policy requirements in order to gain access to the image key, and the image will be encrypted at rest both in image storage and on the compute host. Beginning with the Intel\u00ae SecL-DC version 2.1 release, the Key Broker now supports 3 rd -party key managers that are KMIP-compliant. The Key Broker has been updated to use the \u201cgemalto kmip-go\u201d client. Virtual Machine confidentiality is deprecated as of the 4.2 Beta release.","title":"Workload Confidentiality for Containers"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#signed-flavors","text":"Added in the Intel\u00ae SecL-DC 1.6 release, Flavor signing is an improvement to the existing handling of expected attestation measurements, called \u201cFlavors.\u201d This feature adds the ability to digitally sign Flavors so that the integrity of the expected measurements themselves can be verified when attestations occur. This also means that Flavors can be more securely transferred between different Verification Service instances. Flavor signing is seamlessly added to the existing Flavor creation process (both importing from a sample host and \u201cmanually\u201d creating a Flavor using the POST method to the /v2/flavors resource). When a Flavor is created, the Verification Service will sign it using a signing certificate signed by the Certificate Management Service (this is created during Verification Service setup). Each time that the Verification Service evaluates a Flavor, it will first verify the signature on that Flavor to ensure the integrity of the Flavor contents before it is used to attest the integrity of any host.","title":"Signed Flavors"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/02%20Introduction/#trusted-virtual-kubernetes-worker-nodes","text":"Added in the Intel\u00ae SecL-DC version 2.1 release, this feature provides a Chain of Trust solution extending to Kubernetes Worker Nodes deployed as Virtual Machines. This feature addresses Kubernetes deployments that use Virtual Machines as Worker Nodes, rather than using bare-metal servers. When libvirt initiates a VM Start, the Intel\u00ae SecL-DC Workload Agent will create a report for the VM that associates the VM\u2019s trust status with the trust status of the host launching the VM. This VM report will be retrievable via the Workload Service, and contains the hardware UUID of the physical server hosting the VM. This UUID can be correlated to the Trust Report of that server at the time of VM launch, creating an audit trail validating that the VM launched on a trusted platform. A new report is created for every VM Start, which includes actions like VM migrations, so that each time a VM is launched or moved a new report is generated ensuring an accurate trust status. By using Platform Integrity and Data Sovereignty-based orchestration (or Workload Confidentiality with encrypted worker VMs) for the Virtual Machines to ensure that the virtual Kubernetes Worker nodes only launch on trusted hardware, these VM trust reports provide an auditing capability to extend the Chain of Trust to the virtual Worker Nodes. Because virtual machine functionality is deprecated as of the 4.2 Beta release, this feature is also deprecated.","title":"Trusted Virtual Kubernetes Worker Nodes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/100%20Scalability%20and%20Sizing/","text":"Scalability and Sizing Configuration Maximums Registered Hosts The Intel\u00ae SecL Verification Service can support a maximum of 2000 registered hosts with a single Verification Service instance with default settings and the specified minimum required hardware. The Verification Service can support up to 100,000 registered hosts, but will require a minimum of 16 vCPUs and 16GB RAM. The service is primarily CPU-limited. HDD Space The HDD space recommendations below represent expected log and database growth using default settings. Altering the database or log rotation settings, or the SAML expiration setting, may change the amount of disk space required. For default settings, 100 GB of disk space is recommended. Database Rotation Settings The Intel\u00ae SecL Verification Service database will automatically rotate the audit log table after one million records, and will retain up to ten total rotations. These settings are user-configurable if a longer retention period is needed. number-rotated - defines the maximum number of rotations before the oldest rotation is deleted to make space for a new rotation. Default value is 10 max-row-count \u2013 defines the maximum number of rows in the audit log table before a rotation will occur. Default is 10,000 Note - Rotation settings can be updated in the `config.yaml` file located in the nfs server path `<nfs_path mentioned in values.yaml>/isecl/hvs/config/` - After updation is completed, restart the service by deleting the pod. The Kubernetes deployment will automatically launch a new pod, which will reflect the updated settings. ``` kubectl delete pod -n <namespace> <hvspodname> ```","title":"Scalability and Sizing"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/100%20Scalability%20and%20Sizing/#scalability-and-sizing","text":"","title":"Scalability and Sizing"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/100%20Scalability%20and%20Sizing/#configuration-maximums","text":"","title":"Configuration Maximums"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/100%20Scalability%20and%20Sizing/#registered-hosts","text":"The Intel\u00ae SecL Verification Service can support a maximum of 2000 registered hosts with a single Verification Service instance with default settings and the specified minimum required hardware. The Verification Service can support up to 100,000 registered hosts, but will require a minimum of 16 vCPUs and 16GB RAM. The service is primarily CPU-limited.","title":"Registered Hosts"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/100%20Scalability%20and%20Sizing/#hdd-space","text":"The HDD space recommendations below represent expected log and database growth using default settings. Altering the database or log rotation settings, or the SAML expiration setting, may change the amount of disk space required. For default settings, 100 GB of disk space is recommended.","title":"HDD Space"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/100%20Scalability%20and%20Sizing/#database-rotation-settings","text":"The Intel\u00ae SecL Verification Service database will automatically rotate the audit log table after one million records, and will retain up to ten total rotations. These settings are user-configurable if a longer retention period is needed. number-rotated - defines the maximum number of rotations before the oldest rotation is deleted to make space for a new rotation. Default value is 10 max-row-count \u2013 defines the maximum number of rows in the audit log table before a rotation will occur. Default is 10,000 Note - Rotation settings can be updated in the `config.yaml` file located in the nfs server path `<nfs_path mentioned in values.yaml>/isecl/hvs/config/` - After updation is completed, restart the service by deleting the pod. The Kubernetes deployment will automatically launch a new pod, which will reflect the updated settings. ``` kubectl delete pod -n <namespace> <hvspodname> ```","title":"Database Rotation Settings"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/105%20Deploying%20Individual%20Services%20Using%20Helm/","text":"Deploying Individual Services Using Helm Note: Typically attributes that do not specifically call out for user input will not need to be changed unless there is a specific conflict from the Kubernetes environment. When deploying individual services, all of the values.yaml files must be configured individually. Set deployment version export VERSION=v5.0.0 Following are the steps need to be run for deploying individual charts for host attestation usecase helm pull isecl-helm/cleanup-secrets --version $VERSION && tar -xzf cleanup-secrets-$VERSION.tgz cleanup-secrets/values.yaml helm install cleanup-secrets isecl-helm/cleanup-secrets --version $VERSION -f cleanup-secrets/values.yaml -n isecl helm pull isecl-helm/cms --version $VERSION && tar -xzf cms-$VERSION.tgz cms/values.yaml helm install cms isecl-helm/cms --version $VERSION -f cms/values.yaml -n isecl helm pull isecl-helm/aasdb-cert-generator --version $VERSION && tar -xzf aasdb-cert-generator-$VERSION.tgz aasdb-cert-generator/values.yaml helm install aasdb-cert-generator isecl-helm/aasdb-cert-generator --version $VERSION -f aasdb-cert-generator/values.yaml -n isecl helm pull isecl-helm/aas --version $VERSION && tar -xzf aas-$VERSION.tgz aas/values.yaml helm install aas isecl-helm/aas --version $VERSION -f aas/values.yaml -n isecl helm pull isecl-helm/hvsdb-cert-generator --version $VERSION && tar -xzf hvsdb-cert-generator-$VERSION.tgz hvsdb-cert-generator/values.yaml helm install hvsdb-cert-generator isecl-helm/hvsdb-cert-generator --version $VERSION -f hvsdb-cert-generator/values.yaml -n isecl helm pull isecl-helm/hvs --version $VERSION && tar -xzf hvs-$VERSION.tgz hvs/values.yaml helm install hvs isecl-helm/hvs --version $VERSION -f hvs/values.yaml -n isecl helm pull isecl-helm/trustagent --version $VERSION && tar -xzf trustagent-$VERSION.tgz trustagent/values.yaml helm install trustagent isecl-helm/trustagent --version $VERSION -f trustagent/values.yaml -n isecl Following are the steps need to be run for deploying individual charts for workload security usecase helm pull isecl-helm/cleanup-secrets --version $VERSION && tar -xzf cleanup-secrets-$VERSION.tgz cleanup-secrets/values.yaml helm install cleanup-secrets isecl-helm/cleanup-secrets --version $VERSION -f cleanup-secrets/values.yaml -n isecl helm pull isecl-helm/cms --version $VERSION && tar -xzf cms-$VERSION.tgz cms/values.yaml helm install cms isecl-helm/cms --version $VERSION -f cms/values.yaml -n isecl helm pull isecl-helm/aasdb-cert-generator --version $VERSION && tar -xzf aasdb-cert-generator-$VERSION.tgz aasdb-cert-generator/values.yaml helm install aasdb-cert-generator isecl-helm/aasdb-cert-generator --version $VERSION -f aasdb-cert-generator/values.yaml -n isecl helm pull isecl-helm/aas --version $VERSION && tar -xzf aas-$VERSION.tgz aas/values.yaml helm install aas isecl-helm/aas --version $VERSION -f aas/values.yaml -n isecl helm pull isecl-helm/hvsdb-cert-generator --version $VERSION && tar -xzf hvsdb-cert-generator-$VERSION.tgz hvsdb-cert-generator/values.yaml helm install hvsdb-cert-generator isecl-helm/hvsdb-cert-generator --version $VERSION -f hvsdb-cert-generator/values.yaml -n isecl helm pull isecl-helm/hvs --version $VERSION && tar -xzf hvs-$VERSION.tgz hvs/values.yaml helm install hvs isecl-helm/hvs --version $VERSION -f hvs/values.yaml -n isecl helm pull isecl-helm/trustagent --version $VERSION && tar -xzf trustagent-$VERSION.tgz trustagent/values.yaml helm install trustagent isecl-helm/trustagent --version $VERSION -f trustagent/values.yaml -n isecl helm pull isecl-helm/isecl-controller --version $VERSION && tar -xzf isecl-controller-$VERSION.tgz isecl-controller/values.yaml helm install isecl-controller isecl-helm/isecl-controller --version $VERSION -f isecl-controller/values.yaml -n isecl helm pull isecl-helm/ihub --version $VERSION && tar -xzf ihub-$VERSION.tgz ihub/values.yaml helm install ihub isecl-helm/ihub --version $VERSION -f ihub/values.yaml -n isecl helm pull isecl-helm/isecl-scheduler --version $VERSION && tar -xzf isecl-scheduler-$VERSION.tgz isecl-scheduler/values.yaml helm install isecl-scheduler isecl-helm/isecl-scheduler --version $VERSION -f isecl-scheduler/values.yaml -n isecl helm pull isecl-helm/kbs --version $VERSION && tar -xzf kbs-$VERSION.tgz kbs/values.yaml helm install kbs isecl-helm/kbs --version $VERSION -f kbs/values.yaml -n isecl helm pull isecl-helm/wls --version $VERSION && tar -xzf wls-$VERSION.tgz wls/values.yaml helm install wls isecl-helm/wls --version $VERSION -f wls/values.yaml -n isecl helm pull isecl-helm/workload-agent --version $VERSION && tar -xzf workload-agent-$VERSION.tgz workload-agent/values.yaml helm install workload-agent isecl-helm/workload-agent --version $VERSION -f workload-agent/values.yaml -n isecl helm pull isecl-helm/wpm --version $VERSION && tar -xzf wpm-$VERSION.tgz wpm/values.yaml helm install wpm isecl-helm/wpm --version $VERSION -f wpm/values.yaml -n isecl Following are the steps need to be run for creating global admin user helm pull isecl-helm/global-admin-generator --version $VERSION && tar -xzf global-admin-generator-$VERSION.tgz global-admin-generator/values.yaml helm install global-admin-generator isecl-helm/global-admin-generator --version $VERSION -f global-admin-generator/values.yaml -n isecl The Intel SecL-DC services can individually be deployed using Helm, instead of automatically deploying a specific use case. Below is a list of the Helm charts available on the Intel SecL Helm repository for deploying individual services (not entire use cases): NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/aas 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Authentica... isecl-helm/admission-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Admision C... isecl-helm/cms 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Certificat... isecl-helm/hvs 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Host Verif... isecl-helm/ihub 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Integratio... isecl-helm/isecl-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Custom Con... isecl-helm/isecl-scheduler 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Extended S... isecl-helm/nats 5.0.0 v5.0.0 A Helm chart for Installing NATS server isecl-helm/trustagent 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Trust Agent isecl-helm/kbs 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC key broker service isecl-helm/wls 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Workload Service isecl-helm/wla 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Workload Agent Below is a list of Helm charts used to run specific jobs needed during deployment: NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/aasdb-cert-generator 5.0.0 v5.0.0 A Helm chart for creating aasdb certificates isecl-helm/hvsdb-cert-generator 5.0.0 v5.0.0 A Helm chart for creating hvsdb certificates isecl-helm/cleanup-secrets 5.0.0 v5.0.0 A Helm chart for cleaning up secrets isecl-helm/wpm 5.0.0 v5.0.0 A Helm chart for creating WPM secrets Below is a list of charts that needs to be deployed for Trusted Workload Placement NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/aas 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Authentica... isecl-helm/aasdb-cert-generator 5.0.0 v5.0.0 A Helm chart for creating aasdb certificates isecl-helm/cms 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Certificat... isecl-helm/hvsdb-cert-generator 5.0.0 v5.0.0 A Helm chart for creating hvsdb certificates isecl-helm/hvs 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Host Verif... isecl-helm/ihub 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Integratio... isecl-helm/isecl-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Custom Con... isecl-helm/isecl-scheduler 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Extended S... isecl-helm/nats 5.0.0 v5.0.0 A Helm chart for Installing NATS server isecl-helm/trustagent 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Trust Agent Below are the charts that needs to be deployed for Trusted Cloud Service Provider NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/ihub 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Integratio... isecl-helm/isecl-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Custom Con... isecl-helm/isecl-scheduler 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Extended S... isecl-helm/trustagent 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Trust Agent isecl-helm/admission-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Admision C... Below are the charts that needs to be deployed for TWP Control Plane NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/aas 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Authentica... isecl-helm/aasdb-cert-generator 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Authentica... isecl-helm/cms 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Certificat... isecl-helm/hvsdb-cert-generator 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Host Verif... isecl-helm/hvs 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Host Verif... isecl-helm/nats 5.0.0 v5.0.0 A Helm chart for Installing NATS server Intel SecL-DC can optionally utilize a NATS server to manage connectivity between the Host Verification Service and any number of deployed Trust Agent hosts. This acts as an alternative to communication via REST APIs - in NATS mode, a connection is established with the NATS server, and messages are sent and received over that connection. Using NATS mode requires configuration changes in the values.yaml files for the HVS and Trust Agent charts, as well as deployment of NATS itself: NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/nats 5.0.0 v5.0.0 A Helm chart for Installing NATS server NATS deployments also require a setup job: NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/nats-init 5.0.0 v5.0.0 A Helm chart for creating TLS certificates and ... Intel SecL-DC can optionally integrate with Kubernetes to control the placement of workloads based on the attestation status of worker nodes. Trusted Workload Placement requires the following additional services: NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/admission-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Admision C... isecl-helm/isecl-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Custom Con... isecl-helm/isecl-scheduler 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Extended S... isecl-helm/ihub 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Integratio... Configuration Changes Needed for NATS Mode If NATS mode will be used, the NATS service answer file must also be downloaded and configured, and additional configuration elements must be added to the HVS and Trust Agent values.yaml files. Download and configure the NATS configuration file: tar -xzf nats-$VERSION.tgz nats/values.yaml In the hvs.yaml and trustagent.yaml files, configure the NATS block in the existing config element: nats: enabled: true # Enable/Disable NATS mode<br> (Allowed values: `true`\\`false`) servers: nats://<user input>:30222 # NATS Server IP/Hostname<br> (**REQUIRED IF ENABLED**) serviceMode: outbound # The model for TA (Allowed values: `outbound`) (**REQUIRED IF ENABLED**) Note that the NATS server IP/hostname is typically the same as the Kubernetes control plane. The following example shows an installation for of NATS NATS Deployment Instruction helm pull isecl-helm/nats && tar -xzf nats-$VERSION.tgz nats/values.yaml helm install nats isecl-helm/nats -f nats/values.yaml -n isecl","title":"Deploying Individual Services Using Helm"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/105%20Deploying%20Individual%20Services%20Using%20Helm/#deploying-individual-services-using-helm","text":"Note: Typically attributes that do not specifically call out for user input will not need to be changed unless there is a specific conflict from the Kubernetes environment. When deploying individual services, all of the values.yaml files must be configured individually. Set deployment version export VERSION=v5.0.0 Following are the steps need to be run for deploying individual charts for host attestation usecase helm pull isecl-helm/cleanup-secrets --version $VERSION && tar -xzf cleanup-secrets-$VERSION.tgz cleanup-secrets/values.yaml helm install cleanup-secrets isecl-helm/cleanup-secrets --version $VERSION -f cleanup-secrets/values.yaml -n isecl helm pull isecl-helm/cms --version $VERSION && tar -xzf cms-$VERSION.tgz cms/values.yaml helm install cms isecl-helm/cms --version $VERSION -f cms/values.yaml -n isecl helm pull isecl-helm/aasdb-cert-generator --version $VERSION && tar -xzf aasdb-cert-generator-$VERSION.tgz aasdb-cert-generator/values.yaml helm install aasdb-cert-generator isecl-helm/aasdb-cert-generator --version $VERSION -f aasdb-cert-generator/values.yaml -n isecl helm pull isecl-helm/aas --version $VERSION && tar -xzf aas-$VERSION.tgz aas/values.yaml helm install aas isecl-helm/aas --version $VERSION -f aas/values.yaml -n isecl helm pull isecl-helm/hvsdb-cert-generator --version $VERSION && tar -xzf hvsdb-cert-generator-$VERSION.tgz hvsdb-cert-generator/values.yaml helm install hvsdb-cert-generator isecl-helm/hvsdb-cert-generator --version $VERSION -f hvsdb-cert-generator/values.yaml -n isecl helm pull isecl-helm/hvs --version $VERSION && tar -xzf hvs-$VERSION.tgz hvs/values.yaml helm install hvs isecl-helm/hvs --version $VERSION -f hvs/values.yaml -n isecl helm pull isecl-helm/trustagent --version $VERSION && tar -xzf trustagent-$VERSION.tgz trustagent/values.yaml helm install trustagent isecl-helm/trustagent --version $VERSION -f trustagent/values.yaml -n isecl Following are the steps need to be run for deploying individual charts for workload security usecase helm pull isecl-helm/cleanup-secrets --version $VERSION && tar -xzf cleanup-secrets-$VERSION.tgz cleanup-secrets/values.yaml helm install cleanup-secrets isecl-helm/cleanup-secrets --version $VERSION -f cleanup-secrets/values.yaml -n isecl helm pull isecl-helm/cms --version $VERSION && tar -xzf cms-$VERSION.tgz cms/values.yaml helm install cms isecl-helm/cms --version $VERSION -f cms/values.yaml -n isecl helm pull isecl-helm/aasdb-cert-generator --version $VERSION && tar -xzf aasdb-cert-generator-$VERSION.tgz aasdb-cert-generator/values.yaml helm install aasdb-cert-generator isecl-helm/aasdb-cert-generator --version $VERSION -f aasdb-cert-generator/values.yaml -n isecl helm pull isecl-helm/aas --version $VERSION && tar -xzf aas-$VERSION.tgz aas/values.yaml helm install aas isecl-helm/aas --version $VERSION -f aas/values.yaml -n isecl helm pull isecl-helm/hvsdb-cert-generator --version $VERSION && tar -xzf hvsdb-cert-generator-$VERSION.tgz hvsdb-cert-generator/values.yaml helm install hvsdb-cert-generator isecl-helm/hvsdb-cert-generator --version $VERSION -f hvsdb-cert-generator/values.yaml -n isecl helm pull isecl-helm/hvs --version $VERSION && tar -xzf hvs-$VERSION.tgz hvs/values.yaml helm install hvs isecl-helm/hvs --version $VERSION -f hvs/values.yaml -n isecl helm pull isecl-helm/trustagent --version $VERSION && tar -xzf trustagent-$VERSION.tgz trustagent/values.yaml helm install trustagent isecl-helm/trustagent --version $VERSION -f trustagent/values.yaml -n isecl helm pull isecl-helm/isecl-controller --version $VERSION && tar -xzf isecl-controller-$VERSION.tgz isecl-controller/values.yaml helm install isecl-controller isecl-helm/isecl-controller --version $VERSION -f isecl-controller/values.yaml -n isecl helm pull isecl-helm/ihub --version $VERSION && tar -xzf ihub-$VERSION.tgz ihub/values.yaml helm install ihub isecl-helm/ihub --version $VERSION -f ihub/values.yaml -n isecl helm pull isecl-helm/isecl-scheduler --version $VERSION && tar -xzf isecl-scheduler-$VERSION.tgz isecl-scheduler/values.yaml helm install isecl-scheduler isecl-helm/isecl-scheduler --version $VERSION -f isecl-scheduler/values.yaml -n isecl helm pull isecl-helm/kbs --version $VERSION && tar -xzf kbs-$VERSION.tgz kbs/values.yaml helm install kbs isecl-helm/kbs --version $VERSION -f kbs/values.yaml -n isecl helm pull isecl-helm/wls --version $VERSION && tar -xzf wls-$VERSION.tgz wls/values.yaml helm install wls isecl-helm/wls --version $VERSION -f wls/values.yaml -n isecl helm pull isecl-helm/workload-agent --version $VERSION && tar -xzf workload-agent-$VERSION.tgz workload-agent/values.yaml helm install workload-agent isecl-helm/workload-agent --version $VERSION -f workload-agent/values.yaml -n isecl helm pull isecl-helm/wpm --version $VERSION && tar -xzf wpm-$VERSION.tgz wpm/values.yaml helm install wpm isecl-helm/wpm --version $VERSION -f wpm/values.yaml -n isecl Following are the steps need to be run for creating global admin user helm pull isecl-helm/global-admin-generator --version $VERSION && tar -xzf global-admin-generator-$VERSION.tgz global-admin-generator/values.yaml helm install global-admin-generator isecl-helm/global-admin-generator --version $VERSION -f global-admin-generator/values.yaml -n isecl The Intel SecL-DC services can individually be deployed using Helm, instead of automatically deploying a specific use case. Below is a list of the Helm charts available on the Intel SecL Helm repository for deploying individual services (not entire use cases): NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/aas 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Authentica... isecl-helm/admission-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Admision C... isecl-helm/cms 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Certificat... isecl-helm/hvs 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Host Verif... isecl-helm/ihub 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Integratio... isecl-helm/isecl-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Custom Con... isecl-helm/isecl-scheduler 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Extended S... isecl-helm/nats 5.0.0 v5.0.0 A Helm chart for Installing NATS server isecl-helm/trustagent 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Trust Agent isecl-helm/kbs 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC key broker service isecl-helm/wls 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Workload Service isecl-helm/wla 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Workload Agent Below is a list of Helm charts used to run specific jobs needed during deployment: NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/aasdb-cert-generator 5.0.0 v5.0.0 A Helm chart for creating aasdb certificates isecl-helm/hvsdb-cert-generator 5.0.0 v5.0.0 A Helm chart for creating hvsdb certificates isecl-helm/cleanup-secrets 5.0.0 v5.0.0 A Helm chart for cleaning up secrets isecl-helm/wpm 5.0.0 v5.0.0 A Helm chart for creating WPM secrets Below is a list of charts that needs to be deployed for Trusted Workload Placement NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/aas 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Authentica... isecl-helm/aasdb-cert-generator 5.0.0 v5.0.0 A Helm chart for creating aasdb certificates isecl-helm/cms 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Certificat... isecl-helm/hvsdb-cert-generator 5.0.0 v5.0.0 A Helm chart for creating hvsdb certificates isecl-helm/hvs 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Host Verif... isecl-helm/ihub 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Integratio... isecl-helm/isecl-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Custom Con... isecl-helm/isecl-scheduler 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Extended S... isecl-helm/nats 5.0.0 v5.0.0 A Helm chart for Installing NATS server isecl-helm/trustagent 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Trust Agent Below are the charts that needs to be deployed for Trusted Cloud Service Provider NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/ihub 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Integratio... isecl-helm/isecl-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Custom Con... isecl-helm/isecl-scheduler 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Extended S... isecl-helm/trustagent 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Trust Agent isecl-helm/admission-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Admision C... Below are the charts that needs to be deployed for TWP Control Plane NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/aas 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Authentica... isecl-helm/aasdb-cert-generator 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Authentica... isecl-helm/cms 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Certificat... isecl-helm/hvsdb-cert-generator 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Host Verif... isecl-helm/hvs 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Host Verif... isecl-helm/nats 5.0.0 v5.0.0 A Helm chart for Installing NATS server Intel SecL-DC can optionally utilize a NATS server to manage connectivity between the Host Verification Service and any number of deployed Trust Agent hosts. This acts as an alternative to communication via REST APIs - in NATS mode, a connection is established with the NATS server, and messages are sent and received over that connection. Using NATS mode requires configuration changes in the values.yaml files for the HVS and Trust Agent charts, as well as deployment of NATS itself: NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/nats 5.0.0 v5.0.0 A Helm chart for Installing NATS server NATS deployments also require a setup job: NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/nats-init 5.0.0 v5.0.0 A Helm chart for creating TLS certificates and ... Intel SecL-DC can optionally integrate with Kubernetes to control the placement of workloads based on the attestation status of worker nodes. Trusted Workload Placement requires the following additional services: NAME CHART VERSION APP VERSION DESCRIPTION isecl-helm/admission-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Admision C... isecl-helm/isecl-controller 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Custom Con... isecl-helm/isecl-scheduler 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Extended S... isecl-helm/ihub 5.0.0 v5.0.0 A Helm chart for Installing ISecL-DC Integratio...","title":"Deploying Individual Services Using Helm"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/105%20Deploying%20Individual%20Services%20Using%20Helm/#configuration-changes-needed-for-nats-mode","text":"If NATS mode will be used, the NATS service answer file must also be downloaded and configured, and additional configuration elements must be added to the HVS and Trust Agent values.yaml files. Download and configure the NATS configuration file: tar -xzf nats-$VERSION.tgz nats/values.yaml In the hvs.yaml and trustagent.yaml files, configure the NATS block in the existing config element: nats: enabled: true # Enable/Disable NATS mode<br> (Allowed values: `true`\\`false`) servers: nats://<user input>:30222 # NATS Server IP/Hostname<br> (**REQUIRED IF ENABLED**) serviceMode: outbound # The model for TA (Allowed values: `outbound`) (**REQUIRED IF ENABLED**) Note that the NATS server IP/hostname is typically the same as the Kubernetes control plane. The following example shows an installation for of NATS","title":"Configuration Changes Needed for NATS Mode"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/105%20Deploying%20Individual%20Services%20Using%20Helm/#nats-deployment-instruction","text":"helm pull isecl-helm/nats && tar -xzf nats-$VERSION.tgz nats/values.yaml helm install nats isecl-helm/nats -f nats/values.yaml -n isecl","title":"NATS Deployment Instruction"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/106%20Helm%20charts%20Cleanup/","text":"Steps for Helm chart Cleanup To uninstall a chart helm uninstall <release-name> -n <namespace> To list all the helm chart deployments helm list -A Cleanup steps that needs to be done for a fresh deployment Uninstall all the chart deployments. Cleanup the data at NFS mount and trustagent data mount on each nodes (/etc/trustagent, /var/log/trustagent) Remove all objects(secrets, rbac, clusterrole, service account) related namespace related to deployment kubectl delete ns <namespace> . Note : Before redeploying any of the chart please check the pv and pvc of corresponding deployments are removed. Suppose if you want to redeploy aas, make sure that aas-logs-pv, aas-logs-pvc, aas-config-pv, aas-config-pvc, aas-db-pv, aas-db-pvc, aas-base-pvc are removed successfully. Command: `kubectl get pvc -n <namespace>` && `kubectl get pv -n <namespace>`","title":"Steps for Helm chart Cleanup"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/106%20Helm%20charts%20Cleanup/#steps-for-helm-chart-cleanup","text":"To uninstall a chart helm uninstall <release-name> -n <namespace> To list all the helm chart deployments helm list -A","title":"Steps for Helm chart Cleanup"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/106%20Helm%20charts%20Cleanup/#cleanup-steps-that-needs-to-be-done-for-a-fresh-deployment","text":"Uninstall all the chart deployments. Cleanup the data at NFS mount and trustagent data mount on each nodes (/etc/trustagent, /var/log/trustagent) Remove all objects(secrets, rbac, clusterrole, service account) related namespace related to deployment kubectl delete ns <namespace> . Note : Before redeploying any of the chart please check the pv and pvc of corresponding deployments are removed. Suppose if you want to redeploy aas, make sure that aas-logs-pv, aas-logs-pvc, aas-config-pv, aas-config-pvc, aas-db-pv, aas-db-pvc, aas-base-pvc are removed successfully. Command: `kubectl get pvc -n <namespace>` && `kubectl get pv -n <namespace>`","title":"Cleanup steps that needs to be done for a fresh deployment"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.0%20Changing%20Configuration%20Settings/","text":"Changing Configuration Settings Configuration settings for Intel SecL-DC services can be changed by applying updates to a configmap and executing an appropriate service setup task. Changing Service Configurations Using Configmaps Edit the configmap of respective service to be reconfigured: kubectl edit cm cms -n isecl Add or Update all the variables required for setup tasks refer here for more details Set the SETUP_TASK variable in the service configmap with one or more setup task names SETUP_TASK : \"download-ca-cert,download-tls-cert\" Some of the sensitive variables such as credentials, db credentials, tpm-owner-secret must be updated in Kubernetes secrets: kubectl get secret -n <namespace> <secret-name> -o json | jq --arg val \" $( echo <value> > | base64 ) \" '.data[\"<variable-name>\"]=$val' | kubectl apply -f - For example, updating the AAS_ADMIN_USERNAME in aas-credentials: kubectl get secret -n isecl aas-credentials -o json | jq --arg val \" $( echo aaspassword | base64 ) \" '.data[\"AAS_ADMIN_USERNAME\"]=$val' | kubectl apply -f - Restart the service by deleting the pod. The Kubernetes deployment will automatically launch a new pod, which will reflect the updated settings. kubectl delete pod -n <namespace> <podname> Reset the configmap by removing SETUP_TASK variable: kubectl patch configmap -n <namespace> <configmap name> --type = json -p = '[{\"op\": \"remove\", \"path\": \"/data/SETUP_TASK\"}]' For example, to clear the SETUP_TASK variable in the CMS configmap: kubectl patch configmap -n isecl cms --type = json -p = '[{\"op\": \"remove\", \"path\": \"/data/SETUP_TASK\"}]' For setup tasks which requires BEARER_TOKEN variable. One must need to update the -bearer-token secret. Here are the steps. 1. Check for the bearer-token secret availaibility for service for which setup task needs to be run, by executing kubectl get secrets -n <namespace> 2. Delete already available bearer token secret. kubectl delete secret <service-name>-bearer-token -n <namespace> e.g for hvs kubectl delete secret hvs-bearer-token -n <namespace> 3. Generate token using service specific install credentials via REST API.The service specific credentials could be found in values.yaml under each service section, used along with helm install command. 4. export BEARER_TOKEN=<token created with step 3> 5. kubectl create secret generic <name> -n <namespace> --from-literal=BEARER_TOKEN=$BEARER_TOKEN e.g for hvs: kubectl create secret generic hvs-bearer-token -n <namespace> --from-literal=BEARER_TOKEN=$BEARER_TOKEN Available setup tasks and configuration variable names are provided in later sections. Manually Editing Persistent Storage Configuration settings can also be changed by editing the service config.yml file in the persistent storage volume for that service. For example, if using the provided sample folder structure from the setup-nfs.sh script, the CMS configuration will be stored in /mnt/nfs_share/isecl/cms/config/config.yml . After making any desired configuration changes, delete the pod for that service to make the changes take effect.","title":"Changing Configuration Settings"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.0%20Changing%20Configuration%20Settings/#changing-configuration-settings","text":"Configuration settings for Intel SecL-DC services can be changed by applying updates to a configmap and executing an appropriate service setup task.","title":"Changing Configuration Settings"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.0%20Changing%20Configuration%20Settings/#changing-service-configurations-using-configmaps","text":"Edit the configmap of respective service to be reconfigured: kubectl edit cm cms -n isecl Add or Update all the variables required for setup tasks refer here for more details Set the SETUP_TASK variable in the service configmap with one or more setup task names SETUP_TASK : \"download-ca-cert,download-tls-cert\" Some of the sensitive variables such as credentials, db credentials, tpm-owner-secret must be updated in Kubernetes secrets: kubectl get secret -n <namespace> <secret-name> -o json | jq --arg val \" $( echo <value> > | base64 ) \" '.data[\"<variable-name>\"]=$val' | kubectl apply -f - For example, updating the AAS_ADMIN_USERNAME in aas-credentials: kubectl get secret -n isecl aas-credentials -o json | jq --arg val \" $( echo aaspassword | base64 ) \" '.data[\"AAS_ADMIN_USERNAME\"]=$val' | kubectl apply -f - Restart the service by deleting the pod. The Kubernetes deployment will automatically launch a new pod, which will reflect the updated settings. kubectl delete pod -n <namespace> <podname> Reset the configmap by removing SETUP_TASK variable: kubectl patch configmap -n <namespace> <configmap name> --type = json -p = '[{\"op\": \"remove\", \"path\": \"/data/SETUP_TASK\"}]' For example, to clear the SETUP_TASK variable in the CMS configmap: kubectl patch configmap -n isecl cms --type = json -p = '[{\"op\": \"remove\", \"path\": \"/data/SETUP_TASK\"}]' For setup tasks which requires BEARER_TOKEN variable. One must need to update the -bearer-token secret. Here are the steps. 1. Check for the bearer-token secret availaibility for service for which setup task needs to be run, by executing kubectl get secrets -n <namespace> 2. Delete already available bearer token secret. kubectl delete secret <service-name>-bearer-token -n <namespace> e.g for hvs kubectl delete secret hvs-bearer-token -n <namespace> 3. Generate token using service specific install credentials via REST API.The service specific credentials could be found in values.yaml under each service section, used along with helm install command. 4. export BEARER_TOKEN=<token created with step 3> 5. kubectl create secret generic <name> -n <namespace> --from-literal=BEARER_TOKEN=$BEARER_TOKEN e.g for hvs: kubectl create secret generic hvs-bearer-token -n <namespace> --from-literal=BEARER_TOKEN=$BEARER_TOKEN Available setup tasks and configuration variable names are provided in later sections.","title":"Changing Service Configurations Using Configmaps"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.0%20Changing%20Configuration%20Settings/#manually-editing-persistent-storage","text":"Configuration settings can also be changed by editing the service config.yml file in the persistent storage volume for that service. For example, if using the provided sample folder structure from the setup-nfs.sh script, the CMS configuration will be stored in /mnt/nfs_share/isecl/cms/config/config.yml . After making any desired configuration changes, delete the pod for that service to make the changes take effect.","title":"Manually Editing Persistent Storage"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.1%20CMS%20Setup%20Task%20and%20Configuration%20Settings/","text":"Certificate Management Service Available Setup Tasks all Runs all setup tasks root-ca Creates a self signed Root CA key pair in /etc/cms/root-ca/ for quality of life intermediate-ca Creates a Root CA signed intermediate CA key pair(signing, tls-server and tls-client) in /etc/cms/intermediate-ca/ for quality of life tls Creates an intermediate-ca signed TLS key pair in /etc/cms for quality of life update-service-config Sets or Updates the Service configuration Environment Variables for Setup Tasks Below are the variables that can be used to configure the setup tasks: TLS: SAN_LIST TLS SAN list Update-service-config setup: AAS_BASE_URL AAS Base URL TOKEN_DURATION_MINS Validity of token duration SERVER_PORT The Port on which Server Listens to SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds LOG_LEVEL Log level LOG_MAX_LENGTH Max length of log statement SERVER_MAX_HEADER_BYTES Max Length Of Request Header in Bytes LOG_ENABLE_STDOUT Enable console log SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds Root-ca setup: CMS_CA_CERT_VALIDITY CA Certificate Validity CMS_CA_ORGANIZATION CA Certificate Organization CMS_CA_LOCALITY CA Certificate Locality CMS_CA_PROVINCE CA Certificate Province CMS_CA_COUNTRY CA Certificate Country Intermediate-ca setup: CMS_CA_LOCALITY CA Certificate Locality CMS_CA_PROVINCE CA Certificate Province CMS_CA_COUNTRY CA Certificate Country CMS_CA_CERT_VALIDITY CA Certificate Validity CMS_CA_ORGANIZATION CA Certificate Organization","title":"Certificate Management Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.1%20CMS%20Setup%20Task%20and%20Configuration%20Settings/#certificate-management-service","text":"","title":"Certificate Management Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.1%20CMS%20Setup%20Task%20and%20Configuration%20Settings/#available-setup-tasks","text":"all Runs all setup tasks root-ca Creates a self signed Root CA key pair in /etc/cms/root-ca/ for quality of life intermediate-ca Creates a Root CA signed intermediate CA key pair(signing, tls-server and tls-client) in /etc/cms/intermediate-ca/ for quality of life tls Creates an intermediate-ca signed TLS key pair in /etc/cms for quality of life update-service-config Sets or Updates the Service configuration","title":"Available Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.1%20CMS%20Setup%20Task%20and%20Configuration%20Settings/#environment-variables-for-setup-tasks","text":"Below are the variables that can be used to configure the setup tasks:","title":"Environment Variables for Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.1%20CMS%20Setup%20Task%20and%20Configuration%20Settings/#tls","text":"SAN_LIST TLS SAN list","title":"TLS:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.1%20CMS%20Setup%20Task%20and%20Configuration%20Settings/#update-service-config-setup","text":"AAS_BASE_URL AAS Base URL TOKEN_DURATION_MINS Validity of token duration SERVER_PORT The Port on which Server Listens to SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds LOG_LEVEL Log level LOG_MAX_LENGTH Max length of log statement SERVER_MAX_HEADER_BYTES Max Length Of Request Header in Bytes LOG_ENABLE_STDOUT Enable console log SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds","title":"Update-service-config setup:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.1%20CMS%20Setup%20Task%20and%20Configuration%20Settings/#root-ca-setup","text":"CMS_CA_CERT_VALIDITY CA Certificate Validity CMS_CA_ORGANIZATION CA Certificate Organization CMS_CA_LOCALITY CA Certificate Locality CMS_CA_PROVINCE CA Certificate Province CMS_CA_COUNTRY CA Certificate Country","title":"Root-ca setup:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.1%20CMS%20Setup%20Task%20and%20Configuration%20Settings/#intermediate-ca-setup","text":"CMS_CA_LOCALITY CA Certificate Locality CMS_CA_PROVINCE CA Certificate Province CMS_CA_COUNTRY CA Certificate Country CMS_CA_CERT_VALIDITY CA Certificate Validity CMS_CA_ORGANIZATION CA Certificate Organization","title":"Intermediate-ca setup:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/","text":"Authentication and Authorization Service Available Setup Tasks all Runs all setup tasks download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls database Setup authservice database admin Add authservice admin username and password to database and assign respective roles to the user jwt Create jwt signing key and jwt certificate signed by CMS create-credentials Generates credentials to support third party authentication and authorization update-service-config Sets or Updates the Service configuration Environment Variables for Setup Tasks Below are the environment varables that can be used to configure the setup tasks: Download-ca-cert CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ CMS_TLS_CERT_SHA384 SHA384 hash value of CMS TLS certificate Download-cert-tls CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Download-cert-tls TLS_CERT_FILE The file to which certificate is saved TLS_KEY_FILE The file to which private key is saved TLS_COMMON_NAME The common name of signed certificate TLS_SAN_LIST Comma separated list of hostnames to add to Certificate, including IP addresses and DNS names Database DB_VENDOR Vendor of database, or use AAS_DB_VENDOR alternatively DB_PORT Database port, or use AAS_DB_PORT alternatively DB_NAME Database name, or use AAS_DB_NAME alternatively AAS_DB_PASSWORD Database password, or use DB_PASSWORD alternatively DB_SSL_MODE Database SSL mode, or use AAS_DB_SSL_MODE alternatively DB_SSL_CERT_SOURCE Database SSL certificate to be copied from, or use AAS_DB_SSLCERTSRC alternatively DB_CONN_RETRY_TIME Database connection retry time DB_HOST Database host name, or use AAS_DB_HOSTNAME alternatively AAS_DB_USERNAME Database username, or use DB_USERNAME alternatively DB_SSL_CERT Database SSL certificate, or use AAS_DB_SSLCERT alternatively DB_CONN_RETRY_ATTEMPTS Database connection retry attempts Admin AAS_ADMIN_USERNAME Authentication and Authorization Service Admin Username AAS_ADMIN_PASSWORD Authentication and Authorization Service Admin Password Jwt Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: KEY_FILE The file to which private key is saved COMMON_NAME The common name of signed certificate CERT_FILE The file to which certificate is saved Create-credentials setup: CREATE_CREDENTIALS Trigger to run create-credentials setup task when set to True. Default is False NATS_OPERATOR_NAME Set the NATS operator name, default is \"ISecL-operator\" NATS_OPERATOR_CREDENTIAL_VALIDITY Set the NATS operator credential validity in terms of duration (ex: \"300ms\",\"-1.5h\" or \"2h45m\"), default is 5 years NATS_ACCOUNT_NAME Set the NATS account name, default is \"ISecL-account\" NATS_ACCOUNT_CREDENTIAL_VALIDITY Set the NATS account credential validity in terms of duration (ex: \"300ms\",\"-1.5h\" or \"2h45m\"), default is 5 years NATS_USER_CREDENTIAL_VALIDITY Set the NATS user credential validity in terms of duration (ex: \"300ms\",\"-1.5h\" or \"2h45m\"), default is 1 year Update-service-config setup: NATS_USER_CREDENTIAL_VALIDITY Set the NATS user credential validity, default is 1 year JWT_INCLUDE_KID Includes JWT Key Id for token validation JWT_TOKEN_DURATION_MINS Validity of token duration AUTH_DEFENDER_MAX_ATTEMPTS Auth defender maximum attempts SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds NATS_OPERATOR_NAME Set the NATS operator name, default is \"ISecL-operator\" LOG_MAX_LENGTH Max length of log statement AUTH_DEFENDER_LOCKOUT_DURATION_MINS Auth defender lockout duration in minutes NATS_ACCOUNT_CREDENTIAL_VALIDITY Set the NATS account credential validity, default is 5 years LOG_LEVEL Log level SERVER_PORT The Port on which Server Listens to SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds NATS_ACCOUNT_NAME Set the NATS account name, default is \"ISecL-account\" LOG_ENABLE_STDOUT Enable console log JWT_CERT_COMMON_NAME Common Name for JWT Certificate AUTH_DEFENDER_INTERVAL_MINS Auth defender interval in minutes SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds SERVER_MAX_HEADER_BYTES Max Length Of Request Header in Bytes NATS_OPERATOR_CREDENTIAL_VALIDITY Set the NATS operator credential validity, default is 5 years Aas-credentials secrets: AAS_ADMIN_USERNAME AAS_ADMIN_PASSWORD Aasdb-credentials AAS_DB_USERNAME AAS_DB_PASSWORD","title":"Authentication and Authorization Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#authentication-and-authorization-service","text":"","title":"Authentication and Authorization Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#available-setup-tasks","text":"all Runs all setup tasks download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls database Setup authservice database admin Add authservice admin username and password to database and assign respective roles to the user jwt Create jwt signing key and jwt certificate signed by CMS create-credentials Generates credentials to support third party authentication and authorization update-service-config Sets or Updates the Service configuration","title":"Available Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#environment-variables-for-setup-tasks","text":"Below are the environment varables that can be used to configure the setup tasks:","title":"Environment Variables for Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#download-ca-cert","text":"CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ CMS_TLS_CERT_SHA384 SHA384 hash value of CMS TLS certificate","title":"Download-ca-cert"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#download-cert-tls","text":"CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api","title":"Download-cert-tls"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#download-cert-tls_1","text":"TLS_CERT_FILE The file to which certificate is saved TLS_KEY_FILE The file to which private key is saved TLS_COMMON_NAME The common name of signed certificate TLS_SAN_LIST Comma separated list of hostnames to add to Certificate, including IP addresses and DNS names","title":"Download-cert-tls"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#database","text":"DB_VENDOR Vendor of database, or use AAS_DB_VENDOR alternatively DB_PORT Database port, or use AAS_DB_PORT alternatively DB_NAME Database name, or use AAS_DB_NAME alternatively AAS_DB_PASSWORD Database password, or use DB_PASSWORD alternatively DB_SSL_MODE Database SSL mode, or use AAS_DB_SSL_MODE alternatively DB_SSL_CERT_SOURCE Database SSL certificate to be copied from, or use AAS_DB_SSLCERTSRC alternatively DB_CONN_RETRY_TIME Database connection retry time DB_HOST Database host name, or use AAS_DB_HOSTNAME alternatively AAS_DB_USERNAME Database username, or use DB_USERNAME alternatively DB_SSL_CERT Database SSL certificate, or use AAS_DB_SSLCERT alternatively DB_CONN_RETRY_ATTEMPTS Database connection retry attempts","title":"Database"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#admin","text":"AAS_ADMIN_USERNAME Authentication and Authorization Service Admin Username AAS_ADMIN_PASSWORD Authentication and Authorization Service Admin Password","title":"Admin"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#jwt","text":"Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: KEY_FILE The file to which private key is saved COMMON_NAME The common name of signed certificate CERT_FILE The file to which certificate is saved","title":"Jwt"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#create-credentials-setup","text":"CREATE_CREDENTIALS Trigger to run create-credentials setup task when set to True. Default is False NATS_OPERATOR_NAME Set the NATS operator name, default is \"ISecL-operator\" NATS_OPERATOR_CREDENTIAL_VALIDITY Set the NATS operator credential validity in terms of duration (ex: \"300ms\",\"-1.5h\" or \"2h45m\"), default is 5 years NATS_ACCOUNT_NAME Set the NATS account name, default is \"ISecL-account\" NATS_ACCOUNT_CREDENTIAL_VALIDITY Set the NATS account credential validity in terms of duration (ex: \"300ms\",\"-1.5h\" or \"2h45m\"), default is 5 years NATS_USER_CREDENTIAL_VALIDITY Set the NATS user credential validity in terms of duration (ex: \"300ms\",\"-1.5h\" or \"2h45m\"), default is 1 year","title":"Create-credentials setup:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#update-service-config-setup","text":"NATS_USER_CREDENTIAL_VALIDITY Set the NATS user credential validity, default is 1 year JWT_INCLUDE_KID Includes JWT Key Id for token validation JWT_TOKEN_DURATION_MINS Validity of token duration AUTH_DEFENDER_MAX_ATTEMPTS Auth defender maximum attempts SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds NATS_OPERATOR_NAME Set the NATS operator name, default is \"ISecL-operator\" LOG_MAX_LENGTH Max length of log statement AUTH_DEFENDER_LOCKOUT_DURATION_MINS Auth defender lockout duration in minutes NATS_ACCOUNT_CREDENTIAL_VALIDITY Set the NATS account credential validity, default is 5 years LOG_LEVEL Log level SERVER_PORT The Port on which Server Listens to SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds NATS_ACCOUNT_NAME Set the NATS account name, default is \"ISecL-account\" LOG_ENABLE_STDOUT Enable console log JWT_CERT_COMMON_NAME Common Name for JWT Certificate AUTH_DEFENDER_INTERVAL_MINS Auth defender interval in minutes SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds SERVER_MAX_HEADER_BYTES Max Length Of Request Header in Bytes NATS_OPERATOR_CREDENTIAL_VALIDITY Set the NATS operator credential validity, default is 5 years","title":"Update-service-config setup:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#aas-credentials-secrets","text":"AAS_ADMIN_USERNAME AAS_ADMIN_PASSWORD","title":"Aas-credentials secrets:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.2%20AAS%20Setup%20Task%20and%20Configuration%20Settings/#aasdb-credentials","text":"AAS_DB_USERNAME AAS_DB_PASSWORD","title":"Aasdb-credentials"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/","text":"Verification Service Available Setup Tasks all Runs all setup tasks database Setup hvs database create-default-flavorgroup Create default flavor groups in database create-default-flavor-template Create default flavor templates in database create-dek Create data encryption key for HVS download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls download-cert-saml Download CA certificate from CMS for saml download-cert-flavor-signing Download CA certificate from CMS for flavor signing create-endorsement-ca Generate self-signed endorsement certificate create-privacy-ca Generate self-signed privacy certificate create-tag-ca Generate self-signed tag certificate update-service-config Sets or Updates the Service configuration Variables for Setup Tasks Below are the variables that can be used to configure the setup tasks: Database DB_SSL_CERT Database SSL certificate, or use HVS_DB_SSLCERT alternatively DB_SSL_CERT_SOURCE Database SSL certificate to be copied from, or use HVS_DB_SSLCERTSRC alternatively DB_CONN_RETRY_TIME Database connection retry time DB_HOST Database host name, or use HVS_DB_HOSTNAME alternatively DB_PORT Database port, or use HVS_DB_PORT alternatively DB_USERNAME Database username, or use HVS_DB_USERNAME alternatively DB_SSL_MODE Database SSL mode, or use HVS_DB_SSL_MODE alternatively DB_VENDOR Vendor of database, or use HVS_DB_VENDOR alternatively DB_NAME Database name, or use HVS_DB_NAME alternatively DB_PASSWORD Database password, or use HVS_DB_PASSWORD alternatively DB_CONN_RETRY_ATTEMPTS Database connection retry attempts Update-service-config HRRS_REFRESH_PERIOD Host report refresh service period HOST_TRUST_CACHE_THRESHOLD Maximum number of entries to be cached in the Trust/Flavor caches NAT_SERVERS List of NATs servers to establish connection with outbound TAs SERVICE_PASSWORD The service password as configured in AAS AAS_BASE_URL AAS Base URL FVS_NUMBER_OF_DATA_FETCHERS Number of Flavor verification data fetcher threads FVS_SKIP_FLAVOR_SIGNATURE_VERIFICATION Skips flavor signature verification when set to true SERVER_PORT The Port on which Server listens to SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds LOG_ENABLE_STDOUT Enable console log FVS_NUMBER_OF_VERIFIERS Number of Flavor verification verifier threads SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds SERVICE_USERNAME The service username as configured in AAS LOG_MAX_LENGTH Max length of log statement SERVER_MAX_HEADER_BYTES Max Length of Request Header in Bytes ENABLE_EKCERT_REVOKE_CHECK If enabled, revocation checks will be performed for EK certs at the time of AIK provisioning LOG_LEVEL Log level VCSS_REFRESH_PERIOD VCenter refresh service period Download-cert-flavor-signing Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: FLAVOR_SIGNING_CERT_FILE The file to which certificate is saved FLAVOR_SIGNING_KEY_FILE The file to which private key is saved FLAVOR_SIGNING_COMMON_NAME The common name of signed certificate Create-privacy-ca PRIVACY_CA_KEY_FILE The file to which private key is saved PRIVACY_CA_COMMON_NAME The common name of signed certificate PRIVACY_CA_ISSUER The issuer of signed certificate PRIVACY_CA_VALIDITY_YEARS The validity time in years of signed certificate PRIVACY_CA_CERT_FILE The file to which certificate is saved Create-endorsement-ca ENDORSEMENT_CA_KEY_FILE The file to which private key is saved ENDORSEMENT_CA_COMMON_NAME The common name of signed certificate ENDORSEMENT_CA_ISSUER The issuer of signed certificate ENDORSEMENT_CA_VALIDITY_YEARS The validity time in years of signed certificate ENDORSEMENT_CA_CERT_FILE The file to which certificate is saved Create-tag-ca TAG_CA_CERT_FILE The file to which certificate is saved TAG_CA_KEY_FILE The file to which private key is saved TAG_CA_COMMON_NAME The common name of signed certificate TAG_CA_ISSUER The issuer of signed certificate TAG_CA_VALIDITY_YEARS The validity time in years of signed certificate Database DB_VENDOR Vendor of database, or use HVS_DB_VENDOR alternatively DB_NAME Database name, or use HVS_DB_NAME alternatively DB_PASSWORD Database password, or use HVS_DB_PASSWORD alternatively DB_CONN_RETRY_ATTEMPTS Database connection retry attempts DB_CONN_RETRY_TIME Database connection retry time DB_HOST Database host name, or use HVS_DB_HOSTNAME alternatively DB_PORT Database port, or use HVS_DB_PORT alternatively DB_USERNAME Database username, or use HVS_DB_USERNAME alternatively DB_SSL_MODE Database SSL mode, or use HVS_DB_SSL_MODE alternatively DB_SSL_CERT Database SSL certificate, or use HVS_DB_SSLCERT alternatively DB_SSL_CERT_SOURCE Database SSL certificate to be copied from, or use HVS_DB_SSLCERTSRC alternatively Download-ca-cert CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ CMS_TLS_CERT_SHA384 SHA384 hash value of CMS TLS certificate Download-cert-tls Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: TLS_CERT_FILE The file to which certificate is saved TLS_KEY_FILE The file to which private key is saved TLS_COMMON_NAME The common name of signed certificate TLS_SAN_LIST Comma separated list of hostnames to add to Certificate, including IP addresses and DNS names Download-cert-saml Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: SAML_CERT_FILE The file to which certificate is saved SAML_KEY_FILE The file to which private key is saved SAML_COMMON_NAME The common name of signed certificate SAML_ISSUER The issuer of signed certificate SAML_VALIDITY_SECONDS The validity time in seconds of signed certificate Hvs-credentials HVS_ADMIN_USERNAME HVS_ADMIN_PASSWORD Hvsdb-credentials HVS_DB_USERNAME HVS_DB_PASSWORD","title":"Verification Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#verification-service","text":"","title":"Verification Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#available-setup-tasks","text":"all Runs all setup tasks database Setup hvs database create-default-flavorgroup Create default flavor groups in database create-default-flavor-template Create default flavor templates in database create-dek Create data encryption key for HVS download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls download-cert-saml Download CA certificate from CMS for saml download-cert-flavor-signing Download CA certificate from CMS for flavor signing create-endorsement-ca Generate self-signed endorsement certificate create-privacy-ca Generate self-signed privacy certificate create-tag-ca Generate self-signed tag certificate update-service-config Sets or Updates the Service configuration","title":"Available Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#variables-for-setup-tasks","text":"Below are the variables that can be used to configure the setup tasks:","title":"Variables for Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#database","text":"DB_SSL_CERT Database SSL certificate, or use HVS_DB_SSLCERT alternatively DB_SSL_CERT_SOURCE Database SSL certificate to be copied from, or use HVS_DB_SSLCERTSRC alternatively DB_CONN_RETRY_TIME Database connection retry time DB_HOST Database host name, or use HVS_DB_HOSTNAME alternatively DB_PORT Database port, or use HVS_DB_PORT alternatively DB_USERNAME Database username, or use HVS_DB_USERNAME alternatively DB_SSL_MODE Database SSL mode, or use HVS_DB_SSL_MODE alternatively DB_VENDOR Vendor of database, or use HVS_DB_VENDOR alternatively DB_NAME Database name, or use HVS_DB_NAME alternatively DB_PASSWORD Database password, or use HVS_DB_PASSWORD alternatively DB_CONN_RETRY_ATTEMPTS Database connection retry attempts","title":"Database"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#update-service-config","text":"HRRS_REFRESH_PERIOD Host report refresh service period HOST_TRUST_CACHE_THRESHOLD Maximum number of entries to be cached in the Trust/Flavor caches NAT_SERVERS List of NATs servers to establish connection with outbound TAs SERVICE_PASSWORD The service password as configured in AAS AAS_BASE_URL AAS Base URL FVS_NUMBER_OF_DATA_FETCHERS Number of Flavor verification data fetcher threads FVS_SKIP_FLAVOR_SIGNATURE_VERIFICATION Skips flavor signature verification when set to true SERVER_PORT The Port on which Server listens to SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds LOG_ENABLE_STDOUT Enable console log FVS_NUMBER_OF_VERIFIERS Number of Flavor verification verifier threads SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds SERVICE_USERNAME The service username as configured in AAS LOG_MAX_LENGTH Max length of log statement SERVER_MAX_HEADER_BYTES Max Length of Request Header in Bytes ENABLE_EKCERT_REVOKE_CHECK If enabled, revocation checks will be performed for EK certs at the time of AIK provisioning LOG_LEVEL Log level VCSS_REFRESH_PERIOD VCenter refresh service period","title":"Update-service-config"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#download-cert-flavor-signing","text":"Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: FLAVOR_SIGNING_CERT_FILE The file to which certificate is saved FLAVOR_SIGNING_KEY_FILE The file to which private key is saved FLAVOR_SIGNING_COMMON_NAME The common name of signed certificate","title":"Download-cert-flavor-signing"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#create-privacy-ca","text":"PRIVACY_CA_KEY_FILE The file to which private key is saved PRIVACY_CA_COMMON_NAME The common name of signed certificate PRIVACY_CA_ISSUER The issuer of signed certificate PRIVACY_CA_VALIDITY_YEARS The validity time in years of signed certificate PRIVACY_CA_CERT_FILE The file to which certificate is saved","title":"Create-privacy-ca"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#create-endorsement-ca","text":"ENDORSEMENT_CA_KEY_FILE The file to which private key is saved ENDORSEMENT_CA_COMMON_NAME The common name of signed certificate ENDORSEMENT_CA_ISSUER The issuer of signed certificate ENDORSEMENT_CA_VALIDITY_YEARS The validity time in years of signed certificate ENDORSEMENT_CA_CERT_FILE The file to which certificate is saved","title":"Create-endorsement-ca"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#create-tag-ca","text":"TAG_CA_CERT_FILE The file to which certificate is saved TAG_CA_KEY_FILE The file to which private key is saved TAG_CA_COMMON_NAME The common name of signed certificate TAG_CA_ISSUER The issuer of signed certificate TAG_CA_VALIDITY_YEARS The validity time in years of signed certificate","title":"Create-tag-ca"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#database_1","text":"DB_VENDOR Vendor of database, or use HVS_DB_VENDOR alternatively DB_NAME Database name, or use HVS_DB_NAME alternatively DB_PASSWORD Database password, or use HVS_DB_PASSWORD alternatively DB_CONN_RETRY_ATTEMPTS Database connection retry attempts DB_CONN_RETRY_TIME Database connection retry time DB_HOST Database host name, or use HVS_DB_HOSTNAME alternatively DB_PORT Database port, or use HVS_DB_PORT alternatively DB_USERNAME Database username, or use HVS_DB_USERNAME alternatively DB_SSL_MODE Database SSL mode, or use HVS_DB_SSL_MODE alternatively DB_SSL_CERT Database SSL certificate, or use HVS_DB_SSLCERT alternatively DB_SSL_CERT_SOURCE Database SSL certificate to be copied from, or use HVS_DB_SSLCERTSRC alternatively","title":"Database"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#download-ca-cert","text":"CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ CMS_TLS_CERT_SHA384 SHA384 hash value of CMS TLS certificate","title":"Download-ca-cert"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#download-cert-tls","text":"Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: TLS_CERT_FILE The file to which certificate is saved TLS_KEY_FILE The file to which private key is saved TLS_COMMON_NAME The common name of signed certificate TLS_SAN_LIST Comma separated list of hostnames to add to Certificate, including IP addresses and DNS names","title":"Download-cert-tls"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#download-cert-saml","text":"Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: SAML_CERT_FILE The file to which certificate is saved SAML_KEY_FILE The file to which private key is saved SAML_COMMON_NAME The common name of signed certificate SAML_ISSUER The issuer of signed certificate SAML_VALIDITY_SECONDS The validity time in seconds of signed certificate","title":"Download-cert-saml"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#hvs-credentials","text":"HVS_ADMIN_USERNAME HVS_ADMIN_PASSWORD","title":"Hvs-credentials"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.3%20HVS%20Setup%20Task%20and%20Configuration%20Settings/#hvsdb-credentials","text":"HVS_DB_USERNAME HVS_DB_PASSWORD","title":"Hvsdb-credentials"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.4%20WLS%20Setup%20Task%20and%20Configuration%20Settings/","text":"Workload Service Available Setup Tasks all Runs all setup tasks download-ca-cert Download CMS root CA certificate download-cert-tls Generates Key pair and CSR, gets it signed from CMS download-saml-ca-cert Setup to download SAML CA certificates from HVS update-service-config Sets or Updates the Service configuration Variables for Setup Tasks Below are the variables that can be used to configure the setup tasks: download-saml-cert setup HVS_URL: HVS Base URL Update-service-config setup Mandatory: SERVICE_USERNAME The service username as configured in AAS SERVICE_PASSWORD The service password as configured in AAS Optional: LOG_LEVEL Log level LOG_MAX_LENGTH Max length of log statement LOG_ENABLE_STDOUT Enable console log AAS_BASE_URL AAS Base URL HVS_BASE_URL HVS Base URL SERVER_PORT The Port on which Server Listens to SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds SERVER_MAX_HEADER_BYTES Max Length Of Request Header in Bytes","title":"Workload Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.4%20WLS%20Setup%20Task%20and%20Configuration%20Settings/#workload-service","text":"","title":"Workload Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.4%20WLS%20Setup%20Task%20and%20Configuration%20Settings/#available-setup-tasks","text":"all Runs all setup tasks download-ca-cert Download CMS root CA certificate download-cert-tls Generates Key pair and CSR, gets it signed from CMS download-saml-ca-cert Setup to download SAML CA certificates from HVS update-service-config Sets or Updates the Service configuration","title":"Available Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.4%20WLS%20Setup%20Task%20and%20Configuration%20Settings/#variables-for-setup-tasks","text":"Below are the variables that can be used to configure the setup tasks:","title":"Variables for Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.4%20WLS%20Setup%20Task%20and%20Configuration%20Settings/#download-saml-cert-setup","text":"HVS_URL: HVS Base URL","title":"download-saml-cert setup"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.4%20WLS%20Setup%20Task%20and%20Configuration%20Settings/#update-service-config-setup","text":"Mandatory: SERVICE_USERNAME The service username as configured in AAS SERVICE_PASSWORD The service password as configured in AAS Optional: LOG_LEVEL Log level LOG_MAX_LENGTH Max length of log statement LOG_ENABLE_STDOUT Enable console log AAS_BASE_URL AAS Base URL HVS_BASE_URL HVS Base URL SERVER_PORT The Port on which Server Listens to SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds SERVER_MAX_HEADER_BYTES Max Length Of Request Header in Bytes","title":"Update-service-config setup"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.5%20KBS%20Setup%20Task%20and%20Configuration%20Settings/","text":"Key Broker Service Available Setup Tasks all Runs all setup tasks download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls create-default-key-transfer-policy Create default key transfer policy for KBS update-service-config Sets or Updates the Service configuration Variables for Setup Tasks Below are the variables that can be used to configure the setup tasks: update-service-config AAS_BASE_URL AAS Base URL LOG_LEVEL Log level LOG_MAX_LENGTH Max length of log statement LOG_ENABLE_STDOUT Enable console log KMIP_SERVER_IP IP of KMIP server KMIP_SERVER_PORT PORT of KMIP server KMIP_HOSTNAME HOSTNAME of KMIP server KMIP_USERNAME USERNAME of KMIP server KMIP_PASSWORD PASSWORD of KMIP server KMIP_CLIENT_CERT_PATH KMIP Client certificate path KMIP_CLIENT_KEY_PATH KMIP Client key path KMIP_ROOT_CERT_PATH KMIP Root Certificate path SERVER_PORT The Port on which Server Listens to SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds SERVER_MAX_HEADER_BYTES Max Length Of Request Header in Bytes","title":"Key Broker Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.5%20KBS%20Setup%20Task%20and%20Configuration%20Settings/#key-broker-service","text":"","title":"Key Broker Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.5%20KBS%20Setup%20Task%20and%20Configuration%20Settings/#available-setup-tasks","text":"all Runs all setup tasks download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls create-default-key-transfer-policy Create default key transfer policy for KBS update-service-config Sets or Updates the Service configuration","title":"Available Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.5%20KBS%20Setup%20Task%20and%20Configuration%20Settings/#variables-for-setup-tasks","text":"Below are the variables that can be used to configure the setup tasks:","title":"Variables for Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.5%20KBS%20Setup%20Task%20and%20Configuration%20Settings/#update-service-config","text":"AAS_BASE_URL AAS Base URL LOG_LEVEL Log level LOG_MAX_LENGTH Max length of log statement LOG_ENABLE_STDOUT Enable console log KMIP_SERVER_IP IP of KMIP server KMIP_SERVER_PORT PORT of KMIP server KMIP_HOSTNAME HOSTNAME of KMIP server KMIP_USERNAME USERNAME of KMIP server KMIP_PASSWORD PASSWORD of KMIP server KMIP_CLIENT_CERT_PATH KMIP Client certificate path KMIP_CLIENT_KEY_PATH KMIP Client key path KMIP_ROOT_CERT_PATH KMIP Root Certificate path SERVER_PORT The Port on which Server Listens to SERVER_READ_TIMEOUT Request Read Timeout Duration in Seconds SERVER_READ_HEADER_TIMEOUT Request Read Header Timeout Duration in Seconds SERVER_WRITE_TIMEOUT Request Write Timeout Duration in Seconds SERVER_IDLE_TIMEOUT Request Idle Timeout in Seconds SERVER_MAX_HEADER_BYTES Max Length Of Request Header in Bytes","title":"update-service-config"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/","text":"Trust Agent Available Setup Tasks all Runs all setup tasks to provision the trust agent. This command can be omitted with running only tagent setup download-ca-cert Fetches the latest CMS Root CA Certificates, overwriting existing files. download-cert Downloads a signed TLS Certificate from CMS. download-credential Fetches Credential from AAS download-api-token Fetches Custom Claims Token from AAS update-certificates Runs 'download-ca-cert' and 'download-cert' provision-attestation Runs setup tasks associated with HVS/TPM provisioning. create-host Registers the trust agent with the verification service. create-host-unique-flavor Populates the verification service with the host unique flavor update-service-config Updates service configuration define-tag-index Allocates nvram in the TPM for use by asset tags. Variables for Setup Tasks Below are the variables that can be used to configure the setup tasks: download-ca-cert CMS_BASE_URL=<url> CMS API URL CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that TA is communicating with the right CMS instance download-cert: Fetches a signed TLS Certificate from CMS, overwriting existing files. CMS_BASE_URL=<url> CMS API URL BEARER_TOKEN=<token> for authenticating with CMS and VS create-host: Registers the trust agent with the verification service Mandatory: HVS_URL VS API URL BEARER_TOKEN JWT token for authenticating with VS CURRENT_IP IP Address of TA deployed host for http service mode TA_HOST_ID Host ID of TA for outbound mode(NATS Connection). Host ID of TA should be unique. Optional: TPM_OWNER_SECRET When provided, setup uses the 40 character hex string for the TPM owner password. Uses empty password when not provided create-host-unique-flavor: Populates the verification service with the host unique flavor HVS_URL=<url> VS API URL BEARER_TOKEN=<token> for authenticating with VS CURRENT_IP=<ip address of host> Used to associate the flavor with the host update-service-config: Updates service configuration TRUSTAGENT_PORT=<port> Trust Agent Listener Port TA_SERVER_READ_TIMEOUT Trustagent Server Read Timeout TA_SERVER_READ_HEADER_TIMEOUT Trustagent Read Header Timeout TA_SERVER_WRITE_TIMEOUT Tustagent Write Timeout TA_SERVER_IDLE_TIMEOUT Trustagent Idle Timeout TA_SERVER_MAX_HEADER_BYTES Trustagent Max Header Bytes Timeout TRUSTAGENT_LOG_LEVEL Logging Level TA_ENABLE_CONSOLE_LOG Trustagent Enable standard output LOG_ENTRY_MAXLENGTH Maximum length of each entry in a log provision-attestation: Runs setup tasks associated with HVS/TPM provisioning Mandatory: HVS_URL=<url> VS API URL BEARER_TOKEN=<token> for authenticating with VS Optional: TPM_OWNER_SECRET=<40 byte hex> When provided, setup uses the 40 character hex string for the TPM owner password. Auto-generated when not provided. Configuration Options The Trust Agent configuration settings are managed in /etc/trustagent/configuration/config.yml Setting Description tpmquoteipv4: true When enabled, the Trust Agent will perform an additional hash of the nonce using the bytes from the Trust Agent server IP when returning TPM quotes. This should always be set to True. logging: loglevel: info Defines the Trust Agent logging level logenablestdout: false If set to True, the Trust Agent will log to stdout. By default this is False and the logs are sent to /var/log/trustagent/trustagent.log logentrymaxlength: 300 Defines the maximum length of a single log entry webservice: port: 1443 Defines the port on which the Trust Agent API server will listen readtimeout: 30s readheadertimeout: 10s writetimeout: 10s idletimeout: 10s maxheaderbytes: 1048576 hvs: url: https://0.0.0.0:30443/hvs/v2 Defines the baseurl for the Verification Service tpm: aas: baseurl: https://0.0.0.0:30444/aas/v1/ Defines the base URL for the AAS cms: baseurl: https://0.0.0.0:30445/cms/v1 Defines the base URL for the CMS tlscertdigest: 330086b3...ae477c8502 Defines the SHA383 hash of the CMS TLS certificate tls: certsan: 10.1.2.3,server.domain.com,localhost Comma-separated list of hostnames and IP addresses for the Trust Agent. Used in the Agent TLS certificate. certcn: Trust Agent TLS Certificate Common Name for the Trust Agent TLS certificate Directory Layout The Linux Trust Agent installs by default to /etc/trustagent , with the following subfolders: v5.0.0 Contains the config.yml configuration file, as well as certificates and keystores. This includes the AIK public key blob after provitioning. cacerts Contains ca certificate file generated from CMS.","title":"Trust Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#trust-agent","text":"","title":"Trust Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#available-setup-tasks","text":"all Runs all setup tasks to provision the trust agent. This command can be omitted with running only tagent setup download-ca-cert Fetches the latest CMS Root CA Certificates, overwriting existing files. download-cert Downloads a signed TLS Certificate from CMS. download-credential Fetches Credential from AAS download-api-token Fetches Custom Claims Token from AAS update-certificates Runs 'download-ca-cert' and 'download-cert' provision-attestation Runs setup tasks associated with HVS/TPM provisioning. create-host Registers the trust agent with the verification service. create-host-unique-flavor Populates the verification service with the host unique flavor update-service-config Updates service configuration define-tag-index Allocates nvram in the TPM for use by asset tags.","title":"Available Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#variables-for-setup-tasks","text":"Below are the variables that can be used to configure the setup tasks:","title":"Variables for Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#download-ca-cert","text":"CMS_BASE_URL=<url> CMS API URL CMS_TLS_CERT_SHA384=<CMS TLS cert sha384 hash> to ensure that TA is communicating with the right CMS instance","title":"download-ca-cert"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#download-cert-fetches-a-signed-tls-certificate-from-cms-overwriting-existing-files","text":"CMS_BASE_URL=<url> CMS API URL BEARER_TOKEN=<token> for authenticating with CMS and VS","title":"download-cert: Fetches a signed TLS Certificate from CMS, overwriting existing files."},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#create-host-registers-the-trust-agent-with-the-verification-service","text":"Mandatory: HVS_URL VS API URL BEARER_TOKEN JWT token for authenticating with VS CURRENT_IP IP Address of TA deployed host for http service mode TA_HOST_ID Host ID of TA for outbound mode(NATS Connection). Host ID of TA should be unique. Optional: TPM_OWNER_SECRET When provided, setup uses the 40 character hex string for the TPM owner password. Uses empty password when not provided","title":"create-host: Registers the trust agent with the verification service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#create-host-unique-flavor-populates-the-verification-service-with-the-host-unique-flavor","text":"HVS_URL=<url> VS API URL BEARER_TOKEN=<token> for authenticating with VS CURRENT_IP=<ip address of host> Used to associate the flavor with the host","title":"create-host-unique-flavor: Populates the verification service with the host unique flavor"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#update-service-config-updates-service-configuration","text":"TRUSTAGENT_PORT=<port> Trust Agent Listener Port TA_SERVER_READ_TIMEOUT Trustagent Server Read Timeout TA_SERVER_READ_HEADER_TIMEOUT Trustagent Read Header Timeout TA_SERVER_WRITE_TIMEOUT Tustagent Write Timeout TA_SERVER_IDLE_TIMEOUT Trustagent Idle Timeout TA_SERVER_MAX_HEADER_BYTES Trustagent Max Header Bytes Timeout TRUSTAGENT_LOG_LEVEL Logging Level TA_ENABLE_CONSOLE_LOG Trustagent Enable standard output LOG_ENTRY_MAXLENGTH Maximum length of each entry in a log","title":"update-service-config: Updates service configuration"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#provision-attestation-runs-setup-tasks-associated-with-hvstpm-provisioning","text":"Mandatory: HVS_URL=<url> VS API URL BEARER_TOKEN=<token> for authenticating with VS Optional: TPM_OWNER_SECRET=<40 byte hex> When provided, setup uses the 40 character hex string for the TPM owner password. Auto-generated when not provided.","title":"provision-attestation: Runs setup tasks associated with HVS/TPM provisioning"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#configuration-options","text":"The Trust Agent configuration settings are managed in /etc/trustagent/configuration/config.yml Setting Description tpmquoteipv4: true When enabled, the Trust Agent will perform an additional hash of the nonce using the bytes from the Trust Agent server IP when returning TPM quotes. This should always be set to True. logging: loglevel: info Defines the Trust Agent logging level logenablestdout: false If set to True, the Trust Agent will log to stdout. By default this is False and the logs are sent to /var/log/trustagent/trustagent.log logentrymaxlength: 300 Defines the maximum length of a single log entry webservice: port: 1443 Defines the port on which the Trust Agent API server will listen readtimeout: 30s readheadertimeout: 10s writetimeout: 10s idletimeout: 10s maxheaderbytes: 1048576 hvs: url: https://0.0.0.0:30443/hvs/v2 Defines the baseurl for the Verification Service tpm: aas: baseurl: https://0.0.0.0:30444/aas/v1/ Defines the base URL for the AAS cms: baseurl: https://0.0.0.0:30445/cms/v1 Defines the base URL for the CMS tlscertdigest: 330086b3...ae477c8502 Defines the SHA383 hash of the CMS TLS certificate tls: certsan: 10.1.2.3,server.domain.com,localhost Comma-separated list of hostnames and IP addresses for the Trust Agent. Used in the Agent TLS certificate. certcn: Trust Agent TLS Certificate Common Name for the Trust Agent TLS certificate","title":"Configuration Options"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#directory-layout","text":"The Linux Trust Agent installs by default to /etc/trustagent , with the following subfolders:","title":"Directory Layout"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#v500","text":"Contains the config.yml configuration file, as well as certificates and keystores. This includes the AIK public key blob after provitioning.","title":"v5.0.0"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.6%20Trust%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#cacerts","text":"Contains ca certificate file generated from CMS.","title":"cacerts"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.7%20Workload%20Agent%20Setup%20Task%20and%20Configuration%20Settings/","text":"Workload Agent Available Setup Tasks download-ca-cert Download CMS root CA certificate signing-key Generate a TPM signing key binding-key Generate a TPM binding key register-signing-key Register a signing key with the host verification service register-binding-key Register a binding key with the host verification service update-service-config Updates service configuration Variables for Setup Tasks Below are the variables that can be used to configure the setup tasks: register-binding-key HVS_URL Host Verification Service API endpoint BEARER_TOKEN Bearer token for accessing AAS api TRUSTAGENT_USERNAME TrustAgent component service account for changing binding key file ownership register-signing-key HVS_URL Host Verification Service API endpoint BEARER_TOKEN Bearer token for accessing AAS api TRUSTAGENT_USERNAME TrustAgent component service account for changing binding key file ownership update-service-config setup LOG_LEVEL Log level LOG_ENTRY_MAXLENGTH Maximum length of each entry in a log\" WLA_ENABLE_CONSOLE_LOG <true/false> Workload Agent Enable standard output\" WLS_API_URL Workload Service URL\" SKIP_FLAVOR_SIGNATURE_VERIFICATION <true/false> Skip flavor signature verification if set to true","title":"Workload Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.7%20Workload%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#workload-agent","text":"","title":"Workload Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.7%20Workload%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#available-setup-tasks","text":"download-ca-cert Download CMS root CA certificate signing-key Generate a TPM signing key binding-key Generate a TPM binding key register-signing-key Register a signing key with the host verification service register-binding-key Register a binding key with the host verification service update-service-config Updates service configuration","title":"Available Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.7%20Workload%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#variables-for-setup-tasks","text":"Below are the variables that can be used to configure the setup tasks:","title":"Variables for Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.7%20Workload%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#register-binding-key","text":"HVS_URL Host Verification Service API endpoint BEARER_TOKEN Bearer token for accessing AAS api TRUSTAGENT_USERNAME TrustAgent component service account for changing binding key file ownership","title":"register-binding-key"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.7%20Workload%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#register-signing-key","text":"HVS_URL Host Verification Service API endpoint BEARER_TOKEN Bearer token for accessing AAS api TRUSTAGENT_USERNAME TrustAgent component service account for changing binding key file ownership","title":"register-signing-key"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.7%20Workload%20Agent%20Setup%20Task%20and%20Configuration%20Settings/#update-service-config-setup","text":"LOG_LEVEL Log level LOG_ENTRY_MAXLENGTH Maximum length of each entry in a log\" WLA_ENABLE_CONSOLE_LOG <true/false> Workload Agent Enable standard output\" WLS_API_URL Workload Service URL\" SKIP_FLAVOR_SIGNATURE_VERIFICATION <true/false> Skip flavor signature verification if set to true","title":"update-service-config setup"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/","text":"Workload Policy Manager Installation Answer File Options Key Sample Value Description KBS_BASE_URL https://\\<IP address or hostname of the KBS>:30443/kbs/v1/ Required. Defines the baseurl for the Key Broker Service. The WPM uses this URL to request new encryption keys when encrypting images. CMS_TLS_CERT_SHA384 Required. SHA384 hash of the CMS TLS certificate CMS_BASE_URL https://\\<IP address or hostname for CMS>:30445/cms/v1/ Required. Defines the base URL for the CMS owned by the image owner. Note that this CMS may be different from the CMS used for other components. AAS_API_URL https://\\<IP address or hostname for AAS>:30444/aas/v1 Required. Defines the baseurl for the AAS owned by the image owner. Note that this AAS may be different from the AAS used for other components. BEARER_TOKEN Required; token from CMS with permissions used for installation. WPM_SERVICE_PASSWORD Defines the credentials for the WPM to use to access the KBS WPM_SERVICE_USERNAME Defines the credentials for the WPM to use to access the KBS Configuration Options Command-Line Options The Workload Policy Manager supports several command-line commands that can be executed only as the Root user: Syntax: wpm Uninstall Removes the WPM. --help Displays help text --version Displays the WPM version Setup usage : wpm setup [ ] -space separated list of tasks wpm setup all - Runs all setup tasks wpm setup create-envelope-key - Creates the key pair required to securely transfer key from KBS - Option [--force] overwrites existing envelope key pairs wpm setup download-ca-cert [--force] - Download CMS root CA certificate - Option [--force] overwrites any existing files, and always downloads new root CA cert - Environment variable CMS_BASE_URL= for CMS API url - Environment variable CMS_TLS_CERT_SHA384= to ensure that WPM is talking to the right CMS instance","title":"Workload Policy Manager"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#workload-policy-manager","text":"","title":"Workload Policy Manager"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#installation-answer-file-options","text":"Key Sample Value Description KBS_BASE_URL https://\\<IP address or hostname of the KBS>:30443/kbs/v1/ Required. Defines the baseurl for the Key Broker Service. The WPM uses this URL to request new encryption keys when encrypting images. CMS_TLS_CERT_SHA384 Required. SHA384 hash of the CMS TLS certificate CMS_BASE_URL https://\\<IP address or hostname for CMS>:30445/cms/v1/ Required. Defines the base URL for the CMS owned by the image owner. Note that this CMS may be different from the CMS used for other components. AAS_API_URL https://\\<IP address or hostname for AAS>:30444/aas/v1 Required. Defines the baseurl for the AAS owned by the image owner. Note that this AAS may be different from the AAS used for other components. BEARER_TOKEN Required; token from CMS with permissions used for installation. WPM_SERVICE_PASSWORD Defines the credentials for the WPM to use to access the KBS WPM_SERVICE_USERNAME Defines the credentials for the WPM to use to access the KBS","title":"Installation Answer File Options"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#configuration-options","text":"","title":"Configuration Options"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#command-line-options","text":"The Workload Policy Manager supports several command-line commands that can be executed only as the Root user: Syntax: wpm","title":"Command-Line Options"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#uninstall","text":"Removes the WPM.","title":"Uninstall"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#-help","text":"Displays help text","title":"--help"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#-version","text":"Displays the WPM version","title":"--version"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#setup","text":"usage : wpm setup [ ] -space separated list of tasks","title":"Setup"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#wpm-setup-all","text":"- Runs all setup tasks","title":"wpm setup all"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#wpm-setup-create-envelope-key","text":"- Creates the key pair required to securely transfer key from KBS - Option [--force] overwrites existing envelope key pairs","title":"wpm setup create-envelope-key"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.8%20WPM%20Setup%20Task%20and%20%20Configuration%20Settings/#wpm-setup-download-ca-cert-force","text":"- Download CMS root CA certificate - Option [--force] overwrites any existing files, and always downloads new root CA cert - Environment variable CMS_BASE_URL= for CMS API url - Environment variable CMS_TLS_CERT_SHA384= to ensure that WPM is talking to the right CMS instance","title":"wpm setup download-ca-cert [--force]"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/","text":"Integration Hub Available Setup Tasks all Runs all setup tasks download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls attestation-service-connection Establish Attestation service connection tenant-service-connection Establish Tenant service connection create-signing-key Create signing key for IHUB download-saml-cert Download SAML certificate from Attestation service update-service-config Sets or Updates the Service configuration Environment Variables for Setup Tasks Below are the environment varables that can be used to configure the setup tasks: Uupdate-service-config SERVICE_USERNAME The service username as configured in AAS SERVICE_PASSWORD The service password as configured in AAS LOG_LEVEL Log level LOG_MAX_LENGTH Max length of log statement LOG_ENABLE_STDOUT Enable console log AAS_BASE_URL AAS Base URL Download-ca-cert CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ CMS_TLS_CERT_SHA384 SHA384 hash value of CMS TLS certificate Download-cert-tls Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: TLS_CERT_FILE The file to which certificate is saved TLS_KEY_FILE The file to which private key is saved TLS_COMMON_NAME The common name of signed certificate TLS_SAN_LIST Comma separated list of hostnames to add to Certificate, including IP addresses and DNS names Attestation-service-connection HVS_BASE_URL Base URL for the Host Verification Service SHVS_BASE_URL Base URL for the SGX Host Verification Service Tenant-service-connection TENANT Type of Tenant Service (must be \"Kubernetes\") KUBERNETES_URL URL for Kubernetes deployment KUBERNETES_CRD CRD Name for Kubernetes deployment KUBERNETES_TOKEN Token for Kubernetes deployment KUBERNETES_CERT_FILE Certificate path for Kubernetes deployment","title":"Integration Hub"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/#integration-hub","text":"","title":"Integration Hub"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/#available-setup-tasks","text":"all Runs all setup tasks download-ca-cert Download CMS root CA certificate download-cert-tls Download CA certificate from CMS for tls attestation-service-connection Establish Attestation service connection tenant-service-connection Establish Tenant service connection create-signing-key Create signing key for IHUB download-saml-cert Download SAML certificate from Attestation service update-service-config Sets or Updates the Service configuration","title":"Available Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/#environment-variables-for-setup-tasks","text":"Below are the environment varables that can be used to configure the setup tasks:","title":"Environment Variables for Setup Tasks"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/#uupdate-service-config","text":"SERVICE_USERNAME The service username as configured in AAS SERVICE_PASSWORD The service password as configured in AAS LOG_LEVEL Log level LOG_MAX_LENGTH Max length of log statement LOG_ENABLE_STDOUT Enable console log AAS_BASE_URL AAS Base URL","title":"Uupdate-service-config"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/#download-ca-cert","text":"CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ CMS_TLS_CERT_SHA384 SHA384 hash value of CMS TLS certificate","title":"Download-ca-cert"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/#download-cert-tls","text":"Mandatory: CMS_BASE_URL CMS base URL in the format https://{{cms}}:{{cms_port}}/cms/v1/ BEARER_TOKEN Bearer token for accessing CMS api Optional: TLS_CERT_FILE The file to which certificate is saved TLS_KEY_FILE The file to which private key is saved TLS_COMMON_NAME The common name of signed certificate TLS_SAN_LIST Comma separated list of hostnames to add to Certificate, including IP addresses and DNS names","title":"Download-cert-tls"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/#attestation-service-connection","text":"HVS_BASE_URL Base URL for the Host Verification Service SHVS_BASE_URL Base URL for the SGX Host Verification Service","title":"Attestation-service-connection"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/110.9%20Integration%20Hub%20Setup%20Task%20and%20Configuration%20Settings/#tenant-service-connection","text":"TENANT Type of Tenant Service (must be \"Kubernetes\") KUBERNETES_URL URL for Kubernetes deployment KUBERNETES_CRD CRD Name for Kubernetes deployment KUBERNETES_TOKEN Token for Kubernetes deployment KUBERNETES_CERT_FILE Certificate path for Kubernetes deployment","title":"Tenant-service-connection"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/120%20Certificate%20and%20Key%20Management/","text":"Certificate and Key Management Host Verification Service Certificates and Keys The Host Verification Service has several unique certificates not present on other services.The HVS certificates can be found under <nfs_path mentioned in values.yaml>/isecl/hvs path. Note Please refer detail steps on running setup task and updating specific service on Changing Configuration Settings section. To know about supported HVS setup task and configurations refer HVS Setup Task and Configuration Settings section. To know about supported Trust Agent setup task and configurations refer Trust Agent Setup Task and Configuration Settings section. SAML The SAML Certificate is used to sign SAML attestation reports, and is itself signed by the Root Certificate. This certificate is unique to the Verification Service. <nfs_path mentioned in values.yaml>/isecl/hvs/config/certs/trustedca/saml-cert.pem When the SAML certificate is regenerated, all hosts will immediately be added to a queue to generate a new attestation report, since the old signing certificate is no longer valid. If the Integration Hub is being used, the new SAML certificate will need to be imported to the IHub. Asset Tag The Asset tag Certificate is used to sign all Asset Tag Certificates. This certificate is unique to the Verification Service. <nfs_path mentioned in values.yaml>/isecl/hvs/config/certs/trustedca/tag-ca-cert.pem Privacy CA The Privacy CA certificate is used as part of the certificate chain for creating the Attestation Identity Key (AIK) during Trust Agent provisioning. The Privacy CA must be a self-signed certificate. This certificate is unique to the Verification Service. The Privacy CA certificate is used by Trust Agent nodes during Trust Agent provisioning; if the Privacy CA certificate is changed, all Trust Agent nodes will need to be re-provisioned. <nfs_path mentioned in values.yaml>/isecl/hvs/config/certs/trustedca/privacy-ca/privacy-ca-cert.pem Endorsement CA The Endorsement CA is a self-signed certificate used during Trust Agent provisioning. <nfs_path mentioned in values.yaml>/isecl/hvs/config/certs/endorsement/EndorsementCA.pem TLS Certificates TLS certificates for each service are issued by the Certificate Management Service during installation. If the CMS root certificate is changed, or to regenerate the TLS certificate for a given service: To download CMS root CA certificate execute setup task download-ca-cert To Generate Key pair and CSR, gets it signed from CMS execute setup task download-cert-tls Note Refer Changing Configuration Settings section to run required setup tasks.","title":"Certificate and Key Management"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/120%20Certificate%20and%20Key%20Management/#certificate-and-key-management","text":"","title":"Certificate and Key Management"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/120%20Certificate%20and%20Key%20Management/#host-verification-service-certificates-and-keys","text":"The Host Verification Service has several unique certificates not present on other services.The HVS certificates can be found under <nfs_path mentioned in values.yaml>/isecl/hvs path. Note Please refer detail steps on running setup task and updating specific service on Changing Configuration Settings section. To know about supported HVS setup task and configurations refer HVS Setup Task and Configuration Settings section. To know about supported Trust Agent setup task and configurations refer Trust Agent Setup Task and Configuration Settings section.","title":"Host Verification Service Certificates and Keys"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/120%20Certificate%20and%20Key%20Management/#saml","text":"The SAML Certificate is used to sign SAML attestation reports, and is itself signed by the Root Certificate. This certificate is unique to the Verification Service. <nfs_path mentioned in values.yaml>/isecl/hvs/config/certs/trustedca/saml-cert.pem When the SAML certificate is regenerated, all hosts will immediately be added to a queue to generate a new attestation report, since the old signing certificate is no longer valid. If the Integration Hub is being used, the new SAML certificate will need to be imported to the IHub.","title":"SAML"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/120%20Certificate%20and%20Key%20Management/#asset-tag","text":"The Asset tag Certificate is used to sign all Asset Tag Certificates. This certificate is unique to the Verification Service. <nfs_path mentioned in values.yaml>/isecl/hvs/config/certs/trustedca/tag-ca-cert.pem","title":"Asset Tag"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/120%20Certificate%20and%20Key%20Management/#privacy-ca","text":"The Privacy CA certificate is used as part of the certificate chain for creating the Attestation Identity Key (AIK) during Trust Agent provisioning. The Privacy CA must be a self-signed certificate. This certificate is unique to the Verification Service. The Privacy CA certificate is used by Trust Agent nodes during Trust Agent provisioning; if the Privacy CA certificate is changed, all Trust Agent nodes will need to be re-provisioned. <nfs_path mentioned in values.yaml>/isecl/hvs/config/certs/trustedca/privacy-ca/privacy-ca-cert.pem","title":"Privacy CA"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/120%20Certificate%20and%20Key%20Management/#endorsement-ca","text":"The Endorsement CA is a self-signed certificate used during Trust Agent provisioning. <nfs_path mentioned in values.yaml>/isecl/hvs/config/certs/endorsement/EndorsementCA.pem","title":"Endorsement CA"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/120%20Certificate%20and%20Key%20Management/#tls-certificates","text":"TLS certificates for each service are issued by the Certificate Management Service during installation. If the CMS root certificate is changed, or to regenerate the TLS certificate for a given service: To download CMS root CA certificate execute setup task download-ca-cert To Generate Key pair and CSR, gets it signed from CMS execute setup task download-cert-tls Note Refer Changing Configuration Settings section to run required setup tasks.","title":"TLS Certificates"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/","text":"Upgrades Upgrades for foundational security usecases is supported using helm upgrade mechanism. Upgrades are supported only for usecases which are deployed using helm. Note Before performing any upgrade, Intel strongly recommends backing up the data mounted at NFS. Upgrade Process Upgrade process is done using helm upgrade command. Build Intel assumes all services for any use-case are up and running before proceeding with the upgrade. Push all the newer version of container images to registry. All oci images will be in k8s/container-images. e.g skopeo copy oci-archive:<oci-image-tar-name> docker://<registry-ip/hostname>:<registry-port>/<image-name>:<image-tag> --dest-tls-verify=false Upgrade/Deploy Add helm repo helm repo add isecl-helm https://intel-secl.github.io/helm-charts To search for helm repo with versions helm search repo --versions Download chart and values.yaml helm pull isecl-helm/<chart-name> && tar -xzf <chart-name>-$VERSION.tgz <chart-name>/values.yaml e.g helm pull isecl-helm/Host-Attestation && tar -xzf Host-Attestation-$VERSION.tgz Host-Attestation/values.yaml Update the values.yaml, the values given in values.yaml should be same as that of given for currently deployed version. Charts with v5.0.0 has undergone many changes from that of v4.2.0 and has changes in values.yaml file. The description provided in comments would help user to understand for setting appropriate values, the credentials for services given for v4.2.0 should be same for v5.0.0 as well. v5.0.0 has postgres database version upgrade from 11.7(v4.2.0) to 14.2(v5.0.0), hence we need to set additional values such as image name for dbVersionUpgradeImage (image db-version-upgrade-v11-v14.tar built along with other services container image builds ) and set dbVersionUpgrade to true. versionUpgrade : true currentVersion : \"v4.2.0\" dbVersionUpgrade : true image : dbVersionUpgradeImage : <Registry>/db-version-upgrade:v11-v14 Set the value for currentVersion under global section in values.yaml to the currently deployed version(if v4.2.0 is deployed currently then set the value as \"v4.2.0\") Set the value for versionUpgrade to true. Upgrade the charts with the below commands kubectl delete --all jobs -n <namespace> # Delete all the jobs, since jobs cannot be upgraded. kubectl scale deploy --all --replicas=0 -n <namespace> # Scale down all services, so that upgrade happens smoothly without any inconsistencies helm upgrade <release-name> isecl-helm/<chart-name> --version $VERSION -n <namespace> -f <chart-name>/values.yaml e.g helm upgrade host-attestation isecl-helm/Host-Attestation --version $VERSION -n isecl -f Host-Attestation/values.yaml For charts Trusted-Workload-Placement and Trusted-Workload-Placement-Cloud-Service-Provider, ISecl-Scheduler should be disconnected from K8s base scheduler. This can be done by configuring in manifest of kube-scheduler as mentioned below, by commenting the --config option containers: - command: - kube-scheduler - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf - --bind-address=127.0.0.1 - --kubeconfig=/etc/kubernetes/scheduler.conf - --leader-elect=true #- --config=/opt/isecl-k8s-extensions/kube-scheduler-configuration.yml Uncomment the --config option once upgrade is complete and all service pods are successfully running and jobs are completed. Rollback Services Rollback is supported using helm rollback mechanism. The data at NFS will be automatically backed up using upgrade jobs during upgrade process, the backed up data will be stored in a versioned directory. The init containers at every pod will ensure that the versioned data directory mounted at NFS pointing corresponding PV to correct version. For rolling back to previous version, all jobs need to be deleted mandatorily since helm/k8s doesnt support rollback of jobs. kubectl delete jobs --all -n <namespace> Search for last successfully deployed helm chart for immediate previous version and find out the revision number with below command helm history <release-name> -n <namespace> e.g helm history Host-Attestation -n isecl Rollback to previous revision helm rollback <release-name> <last successfully deployed revision number> -n <namespace> e.g helm rollback Host-Attestation 1 -n isecl kubectl scale deploy --all --replicas=0 -n isecl # Scale down and scale up services for reflecting the persistent volume claim to get volumes mounted to previous release version. kubectl scale deploy --all --replicas=1 -n isecl","title":"Upgrades"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#upgrades","text":"Upgrades for foundational security usecases is supported using helm upgrade mechanism. Upgrades are supported only for usecases which are deployed using helm. Note Before performing any upgrade, Intel strongly recommends backing up the data mounted at NFS.","title":"Upgrades"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#upgrade-process","text":"Upgrade process is done using helm upgrade command.","title":"Upgrade Process"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#build","text":"Intel assumes all services for any use-case are up and running before proceeding with the upgrade. Push all the newer version of container images to registry. All oci images will be in k8s/container-images. e.g skopeo copy oci-archive:<oci-image-tar-name> docker://<registry-ip/hostname>:<registry-port>/<image-name>:<image-tag> --dest-tls-verify=false","title":"Build"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#upgradedeploy","text":"","title":"Upgrade/Deploy"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#add-helm-repo","text":"helm repo add isecl-helm https://intel-secl.github.io/helm-charts","title":"Add helm repo"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#to-search-for-helm-repo-with-versions","text":"helm search repo --versions","title":"To search for helm repo with versions"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#download-chart-and-valuesyaml","text":"helm pull isecl-helm/<chart-name> && tar -xzf <chart-name>-$VERSION.tgz <chart-name>/values.yaml e.g helm pull isecl-helm/Host-Attestation && tar -xzf Host-Attestation-$VERSION.tgz Host-Attestation/values.yaml","title":"Download chart and values.yaml"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#update-the-valuesyaml-the-values-given-in-valuesyaml-should-be-same-as-that-of-given-for-currently-deployed-version","text":"Charts with v5.0.0 has undergone many changes from that of v4.2.0 and has changes in values.yaml file. The description provided in comments would help user to understand for setting appropriate values, the credentials for services given for v4.2.0 should be same for v5.0.0 as well. v5.0.0 has postgres database version upgrade from 11.7(v4.2.0) to 14.2(v5.0.0), hence we need to set additional values such as image name for dbVersionUpgradeImage (image db-version-upgrade-v11-v14.tar built along with other services container image builds ) and set dbVersionUpgrade to true. versionUpgrade : true currentVersion : \"v4.2.0\" dbVersionUpgrade : true image : dbVersionUpgradeImage : <Registry>/db-version-upgrade:v11-v14 Set the value for currentVersion under global section in values.yaml to the currently deployed version(if v4.2.0 is deployed currently then set the value as \"v4.2.0\") Set the value for versionUpgrade to true.","title":"Update the values.yaml, the values given in values.yaml should be same as that of given for currently deployed version."},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#upgrade-the-charts-with-the-below-commands","text":"kubectl delete --all jobs -n <namespace> # Delete all the jobs, since jobs cannot be upgraded. kubectl scale deploy --all --replicas=0 -n <namespace> # Scale down all services, so that upgrade happens smoothly without any inconsistencies helm upgrade <release-name> isecl-helm/<chart-name> --version $VERSION -n <namespace> -f <chart-name>/values.yaml e.g helm upgrade host-attestation isecl-helm/Host-Attestation --version $VERSION -n isecl -f Host-Attestation/values.yaml For charts Trusted-Workload-Placement and Trusted-Workload-Placement-Cloud-Service-Provider, ISecl-Scheduler should be disconnected from K8s base scheduler. This can be done by configuring in manifest of kube-scheduler as mentioned below, by commenting the --config option containers: - command: - kube-scheduler - --authentication-kubeconfig=/etc/kubernetes/scheduler.conf - --authorization-kubeconfig=/etc/kubernetes/scheduler.conf - --bind-address=127.0.0.1 - --kubeconfig=/etc/kubernetes/scheduler.conf - --leader-elect=true #- --config=/opt/isecl-k8s-extensions/kube-scheduler-configuration.yml Uncomment the --config option once upgrade is complete and all service pods are successfully running and jobs are completed.","title":"Upgrade the charts with the below commands"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/130%20Upgrades/#rollback-services","text":"Rollback is supported using helm rollback mechanism. The data at NFS will be automatically backed up using upgrade jobs during upgrade process, the backed up data will be stored in a versioned directory. The init containers at every pod will ensure that the versioned data directory mounted at NFS pointing corresponding PV to correct version. For rolling back to previous version, all jobs need to be deleted mandatorily since helm/k8s doesnt support rollback of jobs. kubectl delete jobs --all -n <namespace> Search for last successfully deployed helm chart for immediate previous version and find out the revision number with below command helm history <release-name> -n <namespace> e.g helm history Host-Attestation -n isecl Rollback to previous revision helm rollback <release-name> <last successfully deployed revision number> -n <namespace> e.g helm rollback Host-Attestation 1 -n isecl kubectl scale deploy --all --replicas=0 -n isecl # Scale down and scale up services for reflecting the persistent volume claim to get volumes mounted to previous release version. kubectl scale deploy --all --replicas=1 -n isecl","title":"Rollback Services"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/","text":"Intel\u00ae Security Libraries Components Certificate Management Service Starting with Intel\u00ae SecL-DC 1.6, most non-TPM-related certificates used by Intel\u00ae SecL-DC applications will be issued by the new Certificate Management Service. This includes acting as a root CA and issuing TLS certificates for all of the various web services. Authentication and Authorization Service Starting with Intel\u00ae SecL-DC 1.6, authentication and authorization for all Intel\u00ae SecL applications will be centrally managed by the new Authentication and Authorization Service (AAS). Previously, each application would manage its own users and permissions independently; this change allows authentication and authorization management to be centralized. Verification Service The Verification Service component of Intel\u00ae Security Libraries performs the core Platform Integrity and Data Sovereignty functionality by acting as a remote attestation authority. Platform security technologies like Intel\u00ae TXT, Intel\u00ae BootGuard, and UEFI SecureBoot extend measurements of platform components (such as the system BIOS/UEFI, OS kernel, etc) to a Trusted Platform module as the server boots. Known-good measurements for each of these components can be directly imported from a sample server. These expected measurements can then be compared against actual measurements from registered servers, allowing the Verification Service to attest to the \"trustiness\" of the platform, meaning whether the platform booted into a \"known-good\" state. Workload Service The Workload Service acts as a management service for handling container image decryption. From Intel\u00ae SecL-DC 4.0 release, the workload service will retrieve the current trust report for the host launching the image, and use that report to make a key retrieval request to the key transfer URL retrieved from the WLA request. The key transfer URL refers to the URL to the image owner\u2019s Key Broker Service, along with the ID of the key needed. Trust Agent The Trust Agent resides on physical servers and enables both remote attestation and the extended chain of trust capabilities. The Agent maintains ownership of the server's Trusted Platform Module, allowing secure attestation quotes to be sent to the Verification Service. Incorporating the Intel\u00ae SecL HostInfo and TpmProvider libraries, the Trust Agent serves to report on platform security capabilities and platform integrity measurements. The Trust Agent is supported for Windows Server 2016 Datacenter and Red Hat Enterprise Linux (RHEL) 8.1 and later. Workload Agent The Workload Agent is the component responsible for handling all of the functions needed for Workload Confidentiality for containers on a physical server. When a compute host at the CSP attempts to launch an encrypted image, the crio runtime will detect the launch request and makes call to Workload Agent along with key url as a parameter for getting the key for image decryption, and further Workload Agent will issue a key transfer request to the Workload service along with Key URL and Hardware uuid of the host. The WLA also performs analogous functionality for containers. Integration Hub The Integration Hub acts as a middle-man between the Verification Service and cloud orchestrator such as k8s, and \"pushes\" attestation information retrieved from the Verification Service to k8s API server according to an assignment of hosts. The Integration Hub serves to disassociate the process of retrieving attestations from actual scheduler queries, so that scheduler services can adhere to best practices and retain better performance at scale. The Integration Hub will regularly query the Intel\u00ae SecL Verification Service for SAML attestations for each host. The Integration Hub maintains only the most recent currently valid attestation for each host, and will refresh attestations when they would expire. The Integration Hub will verify the signature of the SAML attestation for each host assigned to a tenant, then parse the attestation status and asset tag information, and then will securely push the parsed key/value pairs to the plugin endpoints enabled. The Integration Hub features a plugin design for adding new scheduler endpoint types. Currently the Integration Hub supports Kubernetes endpoint plugins. Other integration plugins may be added. Workload Policy Manager The Workload Policy Manager is a Linux command line utility used by container build tools like skopeo/buildah during image encryption, wpm helps in providing the keys from KBS. Key Broker Service The Key Broker Service is effectively a policy compliance engine. Its job is to manage key transfer requests, releasing keys only to servers that meet policy requirements. The Key Broker registers one or more SAML signing certificates from any Verification Services that it will trust. When a key transfer request is received, the request includes a trust attestation report signed by the Verification Service. If the signature matches a registered SAML key, the Broker will then look at the actual report to ensure the server requesting the key matches the image policy (currently only overall system trust is supported as a policy requirement). If the report indicates the policy requirements are met, the image decryption key is wrapped using a public key unique to the TPM of the host that was attested in the report, such that only the host that was attested can unseal the decryption key and gain access to the image.","title":"Intel\u00ae Security Libraries Components"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#intel-security-libraries-components","text":"","title":"Intel\u00ae Security Libraries Components"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#certificate-management-service","text":"Starting with Intel\u00ae SecL-DC 1.6, most non-TPM-related certificates used by Intel\u00ae SecL-DC applications will be issued by the new Certificate Management Service. This includes acting as a root CA and issuing TLS certificates for all of the various web services.","title":"Certificate Management Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#authentication-and-authorization-service","text":"Starting with Intel\u00ae SecL-DC 1.6, authentication and authorization for all Intel\u00ae SecL applications will be centrally managed by the new Authentication and Authorization Service (AAS). Previously, each application would manage its own users and permissions independently; this change allows authentication and authorization management to be centralized.","title":"Authentication and Authorization Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#verification-service","text":"The Verification Service component of Intel\u00ae Security Libraries performs the core Platform Integrity and Data Sovereignty functionality by acting as a remote attestation authority. Platform security technologies like Intel\u00ae TXT, Intel\u00ae BootGuard, and UEFI SecureBoot extend measurements of platform components (such as the system BIOS/UEFI, OS kernel, etc) to a Trusted Platform module as the server boots. Known-good measurements for each of these components can be directly imported from a sample server. These expected measurements can then be compared against actual measurements from registered servers, allowing the Verification Service to attest to the \"trustiness\" of the platform, meaning whether the platform booted into a \"known-good\" state.","title":"Verification Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#workload-service","text":"The Workload Service acts as a management service for handling container image decryption. From Intel\u00ae SecL-DC 4.0 release, the workload service will retrieve the current trust report for the host launching the image, and use that report to make a key retrieval request to the key transfer URL retrieved from the WLA request. The key transfer URL refers to the URL to the image owner\u2019s Key Broker Service, along with the ID of the key needed.","title":"Workload Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#trust-agent","text":"The Trust Agent resides on physical servers and enables both remote attestation and the extended chain of trust capabilities. The Agent maintains ownership of the server's Trusted Platform Module, allowing secure attestation quotes to be sent to the Verification Service. Incorporating the Intel\u00ae SecL HostInfo and TpmProvider libraries, the Trust Agent serves to report on platform security capabilities and platform integrity measurements. The Trust Agent is supported for Windows Server 2016 Datacenter and Red Hat Enterprise Linux (RHEL) 8.1 and later.","title":"Trust Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#workload-agent","text":"The Workload Agent is the component responsible for handling all of the functions needed for Workload Confidentiality for containers on a physical server. When a compute host at the CSP attempts to launch an encrypted image, the crio runtime will detect the launch request and makes call to Workload Agent along with key url as a parameter for getting the key for image decryption, and further Workload Agent will issue a key transfer request to the Workload service along with Key URL and Hardware uuid of the host. The WLA also performs analogous functionality for containers.","title":"Workload Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#integration-hub","text":"The Integration Hub acts as a middle-man between the Verification Service and cloud orchestrator such as k8s, and \"pushes\" attestation information retrieved from the Verification Service to k8s API server according to an assignment of hosts. The Integration Hub serves to disassociate the process of retrieving attestations from actual scheduler queries, so that scheduler services can adhere to best practices and retain better performance at scale. The Integration Hub will regularly query the Intel\u00ae SecL Verification Service for SAML attestations for each host. The Integration Hub maintains only the most recent currently valid attestation for each host, and will refresh attestations when they would expire. The Integration Hub will verify the signature of the SAML attestation for each host assigned to a tenant, then parse the attestation status and asset tag information, and then will securely push the parsed key/value pairs to the plugin endpoints enabled. The Integration Hub features a plugin design for adding new scheduler endpoint types. Currently the Integration Hub supports Kubernetes endpoint plugins. Other integration plugins may be added.","title":"Integration Hub"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#workload-policy-manager","text":"The Workload Policy Manager is a Linux command line utility used by container build tools like skopeo/buildah during image encryption, wpm helps in providing the keys from KBS.","title":"Workload Policy Manager"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/20%20Intel%C2%AE%20Security%20Libraries%20Components/#key-broker-service","text":"The Key Broker Service is effectively a policy compliance engine. Its job is to manage key transfer requests, releasing keys only to servers that meet policy requirements. The Key Broker registers one or more SAML signing certificates from any Verification Services that it will trust. When a key transfer request is received, the request includes a trust attestation report signed by the Verification Service. If the signature matches a registered SAML key, the Broker will then look at the actual report to ensure the server requesting the key matches the image policy (currently only overall system trust is supported as a policy requirement). If the report indicates the policy requirements are met, the image decryption key is wrapped using a public key unique to the TPM of the host that was attested in the report, such that only the host that was attested can unseal the decryption key and gain access to the image.","title":"Key Broker Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/","text":"Hardware Security Technology Considerations Intel\u00ae SecL-DC supports and uses a variety of Intel security features, but there are some key requirements to consider before beginning an installation. Most important among these is the Root of Trust configuration. This involves deciding what combination of TXT, Boot Guard, tboot, and UEFI Secure Boot to enable on platforms that will be attested using Intel\u00ae SecL. Key points: - At least one \"Static Root of Trust\" mechanism must be used (TXT and/or BtG) - For Legacy BIOS systems, tboot must be used (which requires TXT) - For UEFI mode systems, UEFI SecureBoot must be used - IMA(Integrity Measurement Architecture) needs to be provisioned in all platforms which needs to be attested before the deployment NOTE Currently tboot and Secure Boot are not compatible. For UEFI platforms, Intel reccomends enabling TXT and enabling Secure Boot. If Secure Boot will not be used, then Intel recommends enabling TXT and installing tboot. These hardware security technology requirements apply to all platforms to be attested. In a Kubernetes environment, this would typically include all worker nodes. Use the chart below for a guide to acceptable configuration options. . Tboot Installation Tboot is required to build a complete Chain of Trust for Intel\u00ae TXT systems that are not using UEFI Secure Boot. Tboot acts to initiate the Intel\u00ae TXT SINIT ACM (Authenticated Code Module), which populates several TPM measurements including measurement of the kernel, grub command line, and initrd. Without either tboot or UEFI Secure Boot, the Chain of Trust will be broken because the OS-related components will be neither measured nor signature-verified prior to execution. Because tboot acts to initiate the Intel\u00ae TXT SINIT ACM, tboot is only required for platforms using Intel\u00ae TXT, and is not required for platforms using another hardware Root of Trust technology like Intel\u00ae Boot Guard. Intel\u00ae SecL-DC requires tboot 1.10.1 or greater. This may be a later version of tboot than is available on public software repositories. The most current version of tboot can be found here: https://sourceforge.net/projects/tboot/files/tboot/ Tboot requires configuration of the grub boot loader after installation. To install and configure tboot: Install tboot If the package manager does not support a late enough version of tboot, it will need to be compiled from source and installed manually. Instructions can be found here: https://sourceforge.net/p/tboot/wiki/Home/ NOTE Check if kernal packages are excluded in /etc/yum.conf ,then comment (or remove the 'kernel*' part) : #exclude=kernel* yum install -y mercurial zlib-devel openssl-devel gcc wget https://sourceforge.net/projects/tboot/files/tboot/tboot-1.10.5.tar.gz tar -zxf tboot-1.10.5.tar.gz cd tboot-1.10.5/ make make install NOTE The step \"copy platform SINIT to /boot\" should not be required, as datacenter platforms include the SINIT in the system BIOS package. Ensure that multiboot2.mod and relocator.mod are available for grub2 This step may not be necessary for all OS versions. For instance, this step is not applicable for tboot installation on Ubuntu 18.04. In order to utilize tboot, grub2 requires these two modules from the grub2-efi-x64-modules package to be located in the correct directory (if they're absent, the host will throw a grub error when it tries to boot using tboot). These files must be present in this directory: /boot/efi/EFI/redhat/x86_64-efi/multiboot2.mod /boot/efi/EFI/redhat/x86_64-efi/relocator.mod If the files are not present in this directory, they can be moved from their installation location: mkdir -p /boot/efi/EFI/redhat/x86_64-efi/ cp /usr/lib/grub/x86_64-efi/multiboot2.mod /boot/efi/EFI/redhat/x86_64-efi/ cp /usr/lib/grub/x86_64-efi/relocator.mod /boot/efi/EFI/redhat/x86_64-efi/ If the files are not present in their installation location /usr/lib/grub/x86_64-efi/ , then follow below steps: yum install -y grub2-efi-x64-modules Make a backup of your current grub.cfg file The below examples assume a RedHat OS that has been installed on a platform using UEFI boot mode. The grub path will be slightly different for platforms using a non-RedHat OS. cp /boot/efi/EFI/redhat/grub.cfg /boot/efi/EFI/redhat/grub.cfg.bak Generate a new grub.cfg with the tboot boot option For RHEL: grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg For Ubuntu: grub2-mkconfig -o /boot/grub/grub.cfg Ensure that the GRUB_DEFAULT value is set to the tboot option. Update /etc/default/grub and set the GRUB_DEFAULT value to 'tboot-1.10.5' GRUB_DEFAULT='tboot-1.10.5' Regenerate grub.cfg: For RHEL: grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg For Ubuntu: grub2-mkconfig -o /boot/grub/grub.cfg Reboot the system. Because measurement happens at system boot, a reboot is needed to boot to the tboot boot option and populate measurements in the TPM. Verify a successful trusted boot with tboot Tboot provides the txt-stat command to show the tboot log. The first part of the output of this command can be used to verify a successful trusted launch. In the output below, note the \u201cTXT measured launch\u201d and \u201csecrets flag set\u201d at the bottom. Both of these should show \"TRUE\" if the tboot measured launch was successful. If either of these show \"FALSE\" the measured launch has failed. This usually simply indicates that the tboot boot option was not selected during boot. txt-stat If the measured launch was successful, proceed to install the Trust Agent. Intel(r) TXT Configuration Registers: STS: 0x0001c091 senter_done: TRUE sexit_done: FALSE mem_config_lock: FALSE private_open: TRUE locality_1_open: TRUE locality_2_open: TRUE ESTS: 0x00 txt_reset: FALSE E2STS: 0x0000000000000006 secrets: TRUE ERRORCODE: 0x00000000 DIDVID: 0x00000001b0078086 vendor_id: 0x8086 device_id: 0xb007 revision_id: 0x1 FSBIF: 0xffffffffffffffff QPIIF: 0x000000009d003000 SINIT.BASE: 0x6fec0000 SINIT.SIZE: 262144B (0x40000) HEAP.BASE: 0x6ff00000 HEAP.SIZE: 1048576B (0x100000) DPR: 0x0000000070000051 lock: TRUE top: 0x70000000 size: 5MB (5242880B) PUBLIC.KEY: 9c 78 f0 d8 53 de 85 4a 2f 47 76 1c 72 b8 6a 11 16 4a 66 a9 84 c1 aa d7 92 e3 14 4f b7 1c 2d 11 *********************************************************** **TXT measured launch: TRUE** **secrets flag set: TRUE** *********************************************************** Integrity Measurement Architecture (IMA) Agent IMA is based on the Trusted Computing Group's open standards, including Trusted Platform Module (TPM), Trusted Boot, Trusted Software Stack (TSS), Trusted Network Connect (TNC), and Platform Trust Services (PTS). Goals of the kernel integrity subsystem: * Detect if files have been accidentally or maliciously altered, both remotely and locally * Appraise a file's measurement against a \"good\" value stored as an extended attribute * Enforce local file integrity This is complementary to Mandatory Access Control (MAC) protections provided by LSM modules. Depending on specified LSM policies, IMA can attempt to protect file integrity. IMA Components: * IMA-measurement \u2013 Measures files before being opened or executed and extends to TPM PCR 10 * IMA-appraisal - Extends the \"secure boot\" concept of verifying a file's integrity, before transferring control or allowing the file to be accessed by the OS * IMA-audit \u2013 Includes file hashes in the system audit logs, which can be used to augment existing system security analytics/forensics IMA maintains a runtime measurement list and if anchored in hardware (e.g. TPM), maintains an aggregate integrity value over this list. The measurement list cannot be compromised by any software attack, without being detectable. If a malicious file is accessed, its measurement is committed to the TPM before the file is accessed, and the malicious code cannot remove this measurement. If the malicious software compromises the attestation software, it cannot conceal its presence, because it cannot forge a signature on a fake measurement list. IMA measurement and attestation do not attempt to protect a system's integrity. The goal is to detect if such compromise has occurred, so that it can be repaired in a timely manner. IMA Measurement LSM - Linux Security Modules maintain file metadata, which can be leveraged to limit the number of files measured. IMA-measurement using Custom IMA policy maintains a runtime measurement list and anchored in a hardware Trusted Platform Module (TPM), an aggregate integrity value over this list. The benefit of anchoring the aggregate integrity value in the TPM is that the measurement list cannot be compromised by any software attack, without being detectable. Hence, on a trusted boot system, IMA-measurement can be used to attest to the system's runtime integrity. All measurements are recorded in a runtime measurement list located in securityfs : /sys/kernel/security/ima/ascii_runtime_measurements These measurements are also extended to the system TPM if present. IMA is controlled with several kernel command line parameters: ima_policy = custom LSM(SELinux) object type ima_template = ima-ng ima-ng - latest template format for measurement log (default since Linux 3.13) ima_hash = sha256 ['sha256' default since Linux 3.13] Custom IMA policy rules can be defined in /etc/ima/ima-policy. These custom rules can leverage LSM labels to measure or appraise specific file sets or categories. The custom policies can likewise be used to exclude these categories or types from IMA measurement or appraisal. If the IMA policy contains LSM labels, then the LSM policy must be loaded prior to the IMA policy. ISecL IMA measurement components for the node are comprised of two stages: Provision Collect and Report Steps for IMA Provision Download IMA provision script from the below mention location. https://github.com/intel-secl/utils/tree/v5.0/develop/tools/ima-agent Prerequisite before provision. - SELinux needs to be in permissive mode Update `/etc/selinux/config` file with `SELINUX=permissive`and reboot the system. After reboot, verify using `sestatus` and check SELinux mode is `permissive` Note swap needs to be disabled if it was enabled `swapoff -a` and restart kubelet `systemctl restart kubelet` * User needs to install selinux-policy-devel package before running the script to apply custom policy. dnf install selinux-policy-devel Enabling Custom Policy - Change the provision script mode to execution. chmod -x ima-provision.sh - sh ima-provision.sh set-custom-policy -i [File with list of one or more Directory or File path] --hash [sha256] Note set-custom-policy - This option will create the SElinux custom object type and assign to the specific directory File or folder path mentioned inside input file-list should be present in the system, then only custom policy will be applied. e.g: `./ima-provision.sh set-custom-policy -i /tmp/ima.txt --hash sha256` ``` cat /tmp/ima.txt /etc/crio/crio.conf ``` Reboot the host for the IMA provision changes to reflect. Verify default measurements captured under /sys/kernel/security/ima/ascii_runtime_measurements gen-measurements \u2013 This option will label the system and log measurements inside ascii_runtime_measurements Note - If a folder path is mentioned inside the file list, then it will apply custom policy for all the files inside that folder. - To add new file or folder for generating measurement without reboot, run below command and execute step 6 . chcon -R -t isecl_t < folder or file details > Important Notes Only Custom IMA policy shall be supported. To completely remove isecl selinux custom policy from the host: Delete ima custom policy file: rm -rf /etc/ima/ Remove isecl selinux policy: semodule -r isecl (this will automatically remove and reboot the system) Command to verify isecl selinux custom policy was removed: semodule -l | grep isecl Command to update the kernel to remove ima arguments. grubby --update-kernel=/boot/vmlinuz-$(uname -r) --remove-args=\"ima_template=ima-ng ima_hash=sha256\" Reboot the system to update the kernel.","title":"Hardware Security Technology Considerations"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#hardware-security-technology-considerations","text":"Intel\u00ae SecL-DC supports and uses a variety of Intel security features, but there are some key requirements to consider before beginning an installation. Most important among these is the Root of Trust configuration. This involves deciding what combination of TXT, Boot Guard, tboot, and UEFI Secure Boot to enable on platforms that will be attested using Intel\u00ae SecL. Key points: - At least one \"Static Root of Trust\" mechanism must be used (TXT and/or BtG) - For Legacy BIOS systems, tboot must be used (which requires TXT) - For UEFI mode systems, UEFI SecureBoot must be used - IMA(Integrity Measurement Architecture) needs to be provisioned in all platforms which needs to be attested before the deployment NOTE Currently tboot and Secure Boot are not compatible. For UEFI platforms, Intel reccomends enabling TXT and enabling Secure Boot. If Secure Boot will not be used, then Intel recommends enabling TXT and installing tboot. These hardware security technology requirements apply to all platforms to be attested. In a Kubernetes environment, this would typically include all worker nodes. Use the chart below for a guide to acceptable configuration options. .","title":"Hardware Security Technology Considerations"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#tboot-installation","text":"Tboot is required to build a complete Chain of Trust for Intel\u00ae TXT systems that are not using UEFI Secure Boot. Tboot acts to initiate the Intel\u00ae TXT SINIT ACM (Authenticated Code Module), which populates several TPM measurements including measurement of the kernel, grub command line, and initrd. Without either tboot or UEFI Secure Boot, the Chain of Trust will be broken because the OS-related components will be neither measured nor signature-verified prior to execution. Because tboot acts to initiate the Intel\u00ae TXT SINIT ACM, tboot is only required for platforms using Intel\u00ae TXT, and is not required for platforms using another hardware Root of Trust technology like Intel\u00ae Boot Guard. Intel\u00ae SecL-DC requires tboot 1.10.1 or greater. This may be a later version of tboot than is available on public software repositories. The most current version of tboot can be found here: https://sourceforge.net/projects/tboot/files/tboot/ Tboot requires configuration of the grub boot loader after installation. To install and configure tboot:","title":"Tboot Installation"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#install-tboot","text":"If the package manager does not support a late enough version of tboot, it will need to be compiled from source and installed manually. Instructions can be found here: https://sourceforge.net/p/tboot/wiki/Home/ NOTE Check if kernal packages are excluded in /etc/yum.conf ,then comment (or remove the 'kernel*' part) : #exclude=kernel* yum install -y mercurial zlib-devel openssl-devel gcc wget https://sourceforge.net/projects/tboot/files/tboot/tboot-1.10.5.tar.gz tar -zxf tboot-1.10.5.tar.gz cd tboot-1.10.5/ make make install NOTE The step \"copy platform SINIT to /boot\" should not be required, as datacenter platforms include the SINIT in the system BIOS package.","title":"Install tboot"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#ensure-that-multiboot2mod-and-relocatormod-are-available-for-grub2","text":"This step may not be necessary for all OS versions. For instance, this step is not applicable for tboot installation on Ubuntu 18.04. In order to utilize tboot, grub2 requires these two modules from the grub2-efi-x64-modules package to be located in the correct directory (if they're absent, the host will throw a grub error when it tries to boot using tboot). These files must be present in this directory: /boot/efi/EFI/redhat/x86_64-efi/multiboot2.mod /boot/efi/EFI/redhat/x86_64-efi/relocator.mod If the files are not present in this directory, they can be moved from their installation location: mkdir -p /boot/efi/EFI/redhat/x86_64-efi/ cp /usr/lib/grub/x86_64-efi/multiboot2.mod /boot/efi/EFI/redhat/x86_64-efi/ cp /usr/lib/grub/x86_64-efi/relocator.mod /boot/efi/EFI/redhat/x86_64-efi/ If the files are not present in their installation location /usr/lib/grub/x86_64-efi/ , then follow below steps: yum install -y grub2-efi-x64-modules Make a backup of your current grub.cfg file The below examples assume a RedHat OS that has been installed on a platform using UEFI boot mode. The grub path will be slightly different for platforms using a non-RedHat OS. cp /boot/efi/EFI/redhat/grub.cfg /boot/efi/EFI/redhat/grub.cfg.bak Generate a new grub.cfg with the tboot boot option For RHEL: grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg For Ubuntu: grub2-mkconfig -o /boot/grub/grub.cfg","title":"Ensure that multiboot2.mod and relocator.mod are available for grub2"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#ensure-that-the-grub_default-value-is-set-to-the-tboot-option","text":"Update /etc/default/grub and set the GRUB_DEFAULT value to 'tboot-1.10.5' GRUB_DEFAULT='tboot-1.10.5'","title":"Ensure that the GRUB_DEFAULT value is set to the tboot option."},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#regenerate-grubcfg","text":"For RHEL: grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg For Ubuntu: grub2-mkconfig -o /boot/grub/grub.cfg Reboot the system. Because measurement happens at system boot, a reboot is needed to boot to the tboot boot option and populate measurements in the TPM.","title":"Regenerate grub.cfg:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#verify-a-successful-trusted-boot-with-tboot","text":"Tboot provides the txt-stat command to show the tboot log. The first part of the output of this command can be used to verify a successful trusted launch. In the output below, note the \u201cTXT measured launch\u201d and \u201csecrets flag set\u201d at the bottom. Both of these should show \"TRUE\" if the tboot measured launch was successful. If either of these show \"FALSE\" the measured launch has failed. This usually simply indicates that the tboot boot option was not selected during boot. txt-stat If the measured launch was successful, proceed to install the Trust Agent. Intel(r) TXT Configuration Registers: STS: 0x0001c091 senter_done: TRUE sexit_done: FALSE mem_config_lock: FALSE private_open: TRUE locality_1_open: TRUE locality_2_open: TRUE ESTS: 0x00 txt_reset: FALSE E2STS: 0x0000000000000006 secrets: TRUE ERRORCODE: 0x00000000 DIDVID: 0x00000001b0078086 vendor_id: 0x8086 device_id: 0xb007 revision_id: 0x1 FSBIF: 0xffffffffffffffff QPIIF: 0x000000009d003000 SINIT.BASE: 0x6fec0000 SINIT.SIZE: 262144B (0x40000) HEAP.BASE: 0x6ff00000 HEAP.SIZE: 1048576B (0x100000) DPR: 0x0000000070000051 lock: TRUE top: 0x70000000 size: 5MB (5242880B) PUBLIC.KEY: 9c 78 f0 d8 53 de 85 4a 2f 47 76 1c 72 b8 6a 11 16 4a 66 a9 84 c1 aa d7 92 e3 14 4f b7 1c 2d 11 *********************************************************** **TXT measured launch: TRUE** **secrets flag set: TRUE** ***********************************************************","title":"Verify a successful trusted boot with tboot"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#integrity-measurement-architecture-ima-agent","text":"IMA is based on the Trusted Computing Group's open standards, including Trusted Platform Module (TPM), Trusted Boot, Trusted Software Stack (TSS), Trusted Network Connect (TNC), and Platform Trust Services (PTS). Goals of the kernel integrity subsystem: * Detect if files have been accidentally or maliciously altered, both remotely and locally * Appraise a file's measurement against a \"good\" value stored as an extended attribute * Enforce local file integrity This is complementary to Mandatory Access Control (MAC) protections provided by LSM modules. Depending on specified LSM policies, IMA can attempt to protect file integrity. IMA Components: * IMA-measurement \u2013 Measures files before being opened or executed and extends to TPM PCR 10 * IMA-appraisal - Extends the \"secure boot\" concept of verifying a file's integrity, before transferring control or allowing the file to be accessed by the OS * IMA-audit \u2013 Includes file hashes in the system audit logs, which can be used to augment existing system security analytics/forensics IMA maintains a runtime measurement list and if anchored in hardware (e.g. TPM), maintains an aggregate integrity value over this list. The measurement list cannot be compromised by any software attack, without being detectable. If a malicious file is accessed, its measurement is committed to the TPM before the file is accessed, and the malicious code cannot remove this measurement. If the malicious software compromises the attestation software, it cannot conceal its presence, because it cannot forge a signature on a fake measurement list. IMA measurement and attestation do not attempt to protect a system's integrity. The goal is to detect if such compromise has occurred, so that it can be repaired in a timely manner. IMA Measurement LSM - Linux Security Modules maintain file metadata, which can be leveraged to limit the number of files measured. IMA-measurement using Custom IMA policy maintains a runtime measurement list and anchored in a hardware Trusted Platform Module (TPM), an aggregate integrity value over this list. The benefit of anchoring the aggregate integrity value in the TPM is that the measurement list cannot be compromised by any software attack, without being detectable. Hence, on a trusted boot system, IMA-measurement can be used to attest to the system's runtime integrity. All measurements are recorded in a runtime measurement list located in securityfs : /sys/kernel/security/ima/ascii_runtime_measurements These measurements are also extended to the system TPM if present. IMA is controlled with several kernel command line parameters: ima_policy = custom LSM(SELinux) object type ima_template = ima-ng ima-ng - latest template format for measurement log (default since Linux 3.13) ima_hash = sha256 ['sha256' default since Linux 3.13] Custom IMA policy rules can be defined in /etc/ima/ima-policy. These custom rules can leverage LSM labels to measure or appraise specific file sets or categories. The custom policies can likewise be used to exclude these categories or types from IMA measurement or appraisal. If the IMA policy contains LSM labels, then the LSM policy must be loaded prior to the IMA policy.","title":"Integrity Measurement Architecture (IMA) Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#isecl-ima-measurement-components-for-the-node-are-comprised-of-two-stages","text":"Provision Collect and Report","title":"ISecL IMA measurement components for the node are comprised of two stages:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#steps-for-ima-provision","text":"Download IMA provision script from the below mention location. https://github.com/intel-secl/utils/tree/v5.0/develop/tools/ima-agent Prerequisite before provision. - SELinux needs to be in permissive mode Update `/etc/selinux/config` file with `SELINUX=permissive`and reboot the system. After reboot, verify using `sestatus` and check SELinux mode is `permissive` Note swap needs to be disabled if it was enabled `swapoff -a` and restart kubelet `systemctl restart kubelet` * User needs to install selinux-policy-devel package before running the script to apply custom policy. dnf install selinux-policy-devel Enabling Custom Policy - Change the provision script mode to execution. chmod -x ima-provision.sh - sh ima-provision.sh set-custom-policy -i [File with list of one or more Directory or File path] --hash [sha256] Note set-custom-policy - This option will create the SElinux custom object type and assign to the specific directory File or folder path mentioned inside input file-list should be present in the system, then only custom policy will be applied. e.g: `./ima-provision.sh set-custom-policy -i /tmp/ima.txt --hash sha256` ``` cat /tmp/ima.txt /etc/crio/crio.conf ``` Reboot the host for the IMA provision changes to reflect. Verify default measurements captured under /sys/kernel/security/ima/ascii_runtime_measurements gen-measurements \u2013 This option will label the system and log measurements inside ascii_runtime_measurements Note - If a folder path is mentioned inside the file list, then it will apply custom policy for all the files inside that folder. - To add new file or folder for generating measurement without reboot, run below command and execute step 6 . chcon -R -t isecl_t < folder or file details >","title":"Steps for IMA Provision"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23%20Hardware%20Security%20Technology%20Considerations/#important-notes","text":"Only Custom IMA policy shall be supported. To completely remove isecl selinux custom policy from the host: Delete ima custom policy file: rm -rf /etc/ima/ Remove isecl selinux policy: semodule -r isecl (this will automatically remove and reboot the system) Command to verify isecl selinux custom policy was removed: semodule -l | grep isecl Command to update the kernel to remove ima arguments. grubby --update-kernel=/boot/vmlinuz-$(uname -r) --remove-args=\"ima_template=ima-ng ima_hash=sha256\" Reboot the system to update the kernel.","title":"Important Notes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/","text":"Building the Intel SecL-DC Container Images The Intel SecL-DC container images must be built from source and uploaded to a container registry. Currently these images are not made available on any public container registry. Build Server Prerequisites The Intel SecL container images must be built on either a Red Hat Enterprise Linux 8.4 or Ubuntu 20.04 system. Development Tools and Utilities RedHat Enterprise Linux 8.4 dnf install -y git wget tar python3 gcc gcc-c++ zip make yum-utils openssl-devel dnf install -y https://download-ib01.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/m/makeself-2.4.2-1.el8.noarch.rpm ln -s /usr/bin/python3 /usr/bin/python ln -s /usr/bin/pip3 /usr/bin/pip Ubuntu-20.04 apt update apt remove -y gcc gcc-7 apt install -y python3-problem-report git wget tar python3 gcc-8 make makeself openssl libssl-dev libgpg-error-dev cp /usr/bin/gcc-8 /usr/bin/gcc ln -s /usr/bin/python3 /usr/bin/python ln -s /usr/bin/pip3 /usr/bin/pip Repo Tool mkdir -p ~/.bin PATH=\"${HOME}/.bin:${PATH}\" curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo chmod a+rx ~/.bin/repo repo init #Verify repo install repo --version Golang wget https://dl.google.com/go/go1.18.8.linux-amd64.tar.gz tar -xzf go1.18.8.linux-amd64.tar.gz sudo mv go /usr/local export GOROOT=/usr/local/go export PATH=$GOROOT/bin:$PATH rm -rf go1.18.8.linux-amd64.tar.gz Docker RHEL dnf module enable -y container-tools dnf install -y yum-utils yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo dnf install -y docker-ce-20.10.8 docker-ce-cli-20.10.8 systemctl enable docker systemctl start docker Ubuntu #Set up repository apt-get update apt-get -y install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release #Adding Docker's official GPG key mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null #Install Docker Engine apt-get update apt-get -y install docker-ce=5:20.10.8~3-0~ubuntu-focal docker-ce-cli=5:20.10.8~3-0~ubuntu-focal containerd.io #Verify docker service status systemctl status docker NOTE Apply the following step only if you require a proxy: mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/proxy.conf Add the below lines in /etc/systemd/system/docker.service.d/proxy.conf: [Service] Environment=\"HTTP_PROXY=<http_proxy>\" Environment=\"HTTPS_PROXY=<https_proxy>\" Environment=\"NO_PROXY=<no_proxy>\" Restart Docker: systemctl daemon-reload systemctl restart docker Sync the Repos and Run the Additional Prerequisite Script There are separate manifests for different use cases. The following will build all Intel SecL-DC Foundational and Workload Security components. Depending on the use case to be deployed, not all of the resulting container images may be needed. Sync the Repo: mkdir -p /root/intel-secl/build/cc-crio && cd /root/intel-secl/build/cc-crio repo init -u https://github.com/intel-secl/build-manifest.git -m manifest/cc-crio.xml -b refs/tags/v5.0.0-Beta repo sync Run the additional prerequisite script: cd utils/build/workload-security/ chmod +x ws-prereq.sh ./ws-prereq.sh -c Building the Container Images cd /root/intel-secl/build/cc-crio/ make k8s The resulting container images will be placed in the following folder: /root/intel-secl/build/workload-security/k8s/ Uploading the Container Images to a Registry Once built, the images must be uploaded to a container registry using the appropriate version tags. Intel SecL-DC Release Version Required Container Version Tag 4.2 Beta v4.2.0-Beta 5.0.0 v5.0.0 The specific command to upload the images to the registry may differ based on the registry used. The sample below assumes a Docker registry. skopeo copy oci-archive:<oci-image-tar-name> docker://registry.server.com:<registry-port>/<image-name>:<image-tag> NOTE The container names used when uploading the images must match the container names specified in values.yaml when deploying with Helm.","title":"Building the Intel SecL-DC Container Images"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#building-the-intel-secl-dc-container-images","text":"The Intel SecL-DC container images must be built from source and uploaded to a container registry. Currently these images are not made available on any public container registry.","title":"Building the Intel SecL-DC Container Images"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#build-server-prerequisites","text":"The Intel SecL container images must be built on either a Red Hat Enterprise Linux 8.4 or Ubuntu 20.04 system.","title":"Build Server Prerequisites"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#development-tools-and-utilities","text":"","title":"Development Tools and Utilities"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#redhat-enterprise-linux-84","text":"dnf install -y git wget tar python3 gcc gcc-c++ zip make yum-utils openssl-devel dnf install -y https://download-ib01.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/m/makeself-2.4.2-1.el8.noarch.rpm ln -s /usr/bin/python3 /usr/bin/python ln -s /usr/bin/pip3 /usr/bin/pip","title":"RedHat Enterprise Linux 8.4"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#ubuntu-2004","text":"apt update apt remove -y gcc gcc-7 apt install -y python3-problem-report git wget tar python3 gcc-8 make makeself openssl libssl-dev libgpg-error-dev cp /usr/bin/gcc-8 /usr/bin/gcc ln -s /usr/bin/python3 /usr/bin/python ln -s /usr/bin/pip3 /usr/bin/pip","title":"Ubuntu-20.04"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#repo-tool","text":"mkdir -p ~/.bin PATH=\"${HOME}/.bin:${PATH}\" curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo chmod a+rx ~/.bin/repo repo init #Verify repo install repo --version","title":"Repo Tool"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#golang","text":"wget https://dl.google.com/go/go1.18.8.linux-amd64.tar.gz tar -xzf go1.18.8.linux-amd64.tar.gz sudo mv go /usr/local export GOROOT=/usr/local/go export PATH=$GOROOT/bin:$PATH rm -rf go1.18.8.linux-amd64.tar.gz","title":"Golang"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#docker","text":"","title":"Docker"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#rhel","text":"dnf module enable -y container-tools dnf install -y yum-utils yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo dnf install -y docker-ce-20.10.8 docker-ce-cli-20.10.8 systemctl enable docker systemctl start docker","title":"RHEL"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#ubuntu","text":"#Set up repository apt-get update apt-get -y install \\ ca-certificates \\ curl \\ gnupg \\ lsb-release #Adding Docker's official GPG key mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg echo \\ \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null #Install Docker Engine apt-get update apt-get -y install docker-ce=5:20.10.8~3-0~ubuntu-focal docker-ce-cli=5:20.10.8~3-0~ubuntu-focal containerd.io #Verify docker service status systemctl status docker NOTE Apply the following step only if you require a proxy: mkdir -p /etc/systemd/system/docker.service.d touch /etc/systemd/system/docker.service.d/proxy.conf Add the below lines in /etc/systemd/system/docker.service.d/proxy.conf: [Service] Environment=\"HTTP_PROXY=<http_proxy>\" Environment=\"HTTPS_PROXY=<https_proxy>\" Environment=\"NO_PROXY=<no_proxy>\" Restart Docker: systemctl daemon-reload systemctl restart docker","title":"Ubuntu"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#sync-the-repos-and-run-the-additional-prerequisite-script","text":"There are separate manifests for different use cases. The following will build all Intel SecL-DC Foundational and Workload Security components. Depending on the use case to be deployed, not all of the resulting container images may be needed. Sync the Repo: mkdir -p /root/intel-secl/build/cc-crio && cd /root/intel-secl/build/cc-crio repo init -u https://github.com/intel-secl/build-manifest.git -m manifest/cc-crio.xml -b refs/tags/v5.0.0-Beta repo sync Run the additional prerequisite script: cd utils/build/workload-security/ chmod +x ws-prereq.sh ./ws-prereq.sh -c","title":"Sync the Repos and Run the Additional Prerequisite Script"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#building-the-container-images","text":"cd /root/intel-secl/build/cc-crio/ make k8s The resulting container images will be placed in the following folder: /root/intel-secl/build/workload-security/k8s/","title":"Building the Container Images"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/23.9%20Building%20the%20Intel%20SecL-DC%20Container%20Images/#uploading-the-container-images-to-a-registry","text":"Once built, the images must be uploaded to a container registry using the appropriate version tags. Intel SecL-DC Release Version Required Container Version Tag 4.2 Beta v4.2.0-Beta 5.0.0 v5.0.0 The specific command to upload the images to the registry may differ based on the registry used. The sample below assumes a Docker registry. skopeo copy oci-archive:<oci-image-tar-name> docker://registry.server.com:<registry-port>/<image-name>:<image-tag> NOTE The container names used when uploading the images must match the container names specified in values.yaml when deploying with Helm.","title":"Uploading the Container Images to a Registry"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/","text":"Deploying Intel SecL-DC Beginning in the 4.2 release, Intel SecL-DC is deployed using Helm charts onto a Kubernetes platform. Deployment using binary installers has been deprecated. Prerequisites for Deployment A Kubernetes cluster (version 1.23.1 or higher) must be available. Hosts to be attested should be worker nodes in the Kubernetes cluster. Ensure that kubectl is configured to work from the system where you will execute the deployment. For default installations, a multi-node cluster (at least one controller node and at least one worker node) is recommended. A single-node installation (all Kubernetes services and all workloads running on a single node, as in microk8s) will require manual adjustments to node labels and pod tolerations. Worker nodes to be attested must meet the hardware security technology requirements for the use cases to be enabled. Helm 3 must be installed on the system from which the deployment will be launched. curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh An NFS server is required with at minimum 2Gi of storage space available (10Gi is recommended for deployments managing up to 10,000 hosts. 50gi is recommended for deployments managing up to 100,000 hosts). All Intel SecL-DC container images must be pushed to a container registry using the appropriate version tag All worker nodes to be attested must have a supported combination of hardware security technologies enabled (see previous section). All worker nodes to be attested must be labelled according to the security technologies enabled (specifically tboot vs Secure Boot) Label any tboot-enabled worker nodes with the label \"TXT-ENABLED\" kubectl label nodes <node name> node.type=TXT-ENABLED Label any Secure Boot-enabled worker nodes with \"SUEFI-ENABLED\" kubectl label nodes <node name> node.type=SUEFI-ENABLED Setting up for Helm deployment Create a namespace or use the namespace used for helm deployment. kubectl create ns isecl Note ISecL Scheduler and Admission Controller secrets are required for Trusted Workload Placement and Workload Security releated usecases Create Secrets for ISecL Scheduler TLS Key-pair ISecl Scheduler runs as https service, therefore it needs TLS Keypair and tls certificate needs to be signed by K8s CA, inorder to have secure communication between K8s base scheduler and ISecl K8s Scheduler. The creation of TLS keypair is a manual step, which has to be done prior deplolying the helm for Trusted Workload Placement usecase. Following are the steps involved in creating tls cert signed by K8s CA. mkdir -p /tmp/k8s-certs/tls-certs && cd /tmp/k8s-certs/tls-certs openssl req -new -days 365 -newkey rsa:4096 -addext \"subjectAltName = DNS:<Controlplane hostname>\" -nodes -text -out server.csr -keyout server.key -sha384 -subj \"/CN=ISecl Scheduler TLS Certificate\" cat <<EOF | kubectl apply -f - apiVersion: certificates.k8s.io/v1 kind: CertificateSigningRequest metadata: name: isecl-scheduler.isecl spec: request: $(cat server.csr | base64 | tr -d '\\n') signerName: kubernetes.io/kube-apiserver-client usages: - client auth EOF kubectl certificate approve isecl-scheduler.isecl kubectl get csr isecl-scheduler.isecl -o jsonpath='{.status.certificate}' \\ | base64 --decode > server.crt kubectl create secret tls isecl-scheduler-certs --cert=/tmp/k8s-certs/tls-certs/server.crt --key=/tmp/k8s-certs/tls-certs/server.key -n isecl Note CSR needs to be deleted if we want to regenerate isecl-scheduler-certs secret with command kubectl delete csr isecl-scheduler.isecl Create Secrets for Admission controller TLS Key-pair Create admission-controller-certs secrets for admission controller deployment mkdir -p /tmp/adm-certs/tls-certs && cd /tmp/adm-certs/tls-certs openssl req -new -days 365 -newkey rsa:4096 -addext \"subjectAltName = DNS:admission-controller.isecl.svc\" -nodes -text -out server.csr -keyout server.key -sha384 -subj \"/CN=system:node:<nodename>;/O=system:nodes\" cat <<EOF | kubectl apply -f - apiVersion: certificates.k8s.io/v1 kind: CertificateSigningRequest metadata: name: admission-controller.isecl spec: groups: - system:authenticated request: $(cat server.csr | base64 | tr -d '\\n') signerName: kubernetes.io/kubelet-serving usages: - digital signature - key encipherment - server auth EOF kubectl certificate approve admission-controller.isecl kubectl get csr admission-controller.isecl -o jsonpath='{.status.certificate}' \\ | base64 --decode > server.crt kubectl create secret tls admission-controller-certs --cert=/tmp/adm-certs/tls-certs/server.crt --key=/tmp/adm-certs/tls-certs/server.key -n isecl Generate CA Bundle kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}' Add the output base64 encoded string to value in caBundle sub field of admission-controller in usecase/trusted-workload-placement/values.yml in case of usecase deployment chart. Note CSR needs to be deleted if we want to regenerate admission-controller-certs secret with command kubectl delete csr admission-controller.isecl Create Secrets for KBS KMIP Certificates Copy KMIP Client Certificate, Client Key and Root Certificate from KMIP Server to Node where KMIP secrets needs to be generated. kubectl create secret generic kbs-kmip-certs -n isecl --from-file=client_certificate.pem=<KMIP Client Certificate Path> --from-file=client_key.pem=<KMIP Client Key Path> --from-file=root_certificate.pem=<KMIP Root Certificate Path> Note KBS KMIP Certificate is required for Workload Security usecase Retrieving Helm charts The Intel SecL-DC Helm charts are hosted in a github Helm repo: helm repo add isecl-helm https://intel-secl.github.io/helm-charts/ helm repo update The list of available charts on the added repo can be shown using the \"search repo\" command: helm search repo --versions Persistent Storage Several Intel SecL-DC services require persistent storage for databases, configuration settings, and logs. By default the Helm deployments are configured to use NFS storage for these persistent volumes. On the NFS server, execute the provided setup-nfs.sh script to set up the needed persistent volume folder structure and share the mount points. curl -fsSL -o setup-nfs.sh https://raw.githubusercontent.com/intel-secl/helm-charts/v4.2.0-Beta/setup-nfs.sh chmod +x setup-nfs.sh ./setup-nfs.sh /mnt/nfs_share 1001 <ip or hostname of the control plane> All the pods running on nodes in cluster need access to NFS mount path via PVC e.g /mnt/nfs_share . This requires user to add IPs/FQDN names to be added to /etc/exports file on system where NFS server is installed Add all the IPs or FQDN names of each of nodes in K8s cluster in /etc/exports file in system where NFS is server is installed and configured using above script. e.g For 3 node cluster with FQDN names control-plane.com(control plane), node1.com and node2.com(nodes) cat /etc/exports /mnt/nfs_share/isecl/ control-plane.com(rw,sync,no_all_squash,root_squash) /mnt/nfs_share/isecl/ node1.com(rw,sync,no_all_squash,root_squash) /mnt/nfs_share/isecl/ node2.com(rw,sync,no_all_squash,root_squash) Note Even if a new node is joined to the cluster, the IP/FQDN name should be added to /etc/exportfs file at system where NFS server is running After making the changes in /etc/exports file run the below command exportfs -arv Default Service and Agent Mount Paths #Certificate-Management-Service Config : <NFS-vol-base-path>/isecl/cms/config Logs : <NFS-vol-base-path>/isecl/cms/logs #Authentication Authorization Service Config : <NFS-vol-base-path>/isecl/aas/config Logs : <NFS-vol-base-path>/isecl/aas/logs Pg-data : <NFS-vol-base-path>/isecl/aas/db #Host Attestation Service Config : <NFS-vol-base-path>/isecl/hvs/config Logs : <NFS-vol-base-path>/isecl/hvs/logs Pg-data : <NFS-vol-base-path>/usr/local/kube/data/hvs #Integration-Hub Config : <NFS-vol-base-path>/isecl/ihub/config Log : <NFS-vol-base-path>/isecl/ihub/logs #Workload Service Config : <NFS-vol-base-path>/isecl/wls/config Logs : <NFS-vol-base-path>/isecl/wls/log Pg-data : <NFS-vol-base-path>/usr/local/kube/data/wls #Key-Broker-Service Config : <NFS-vol-base-path>/isecl/kbs/config Log : <NFS-vol-base-path>/isecl/kbs/logs Opt : <NFS-vol-base-path>/isecl/kbs/kbs/opt #Trust Agent: Config : /etc/trustagent/v5.0.0/ Logs : /var/log/trustagent/ tpmrm : /dev/tpmrm0 txt-stat : /usr/sbin/txt-stat ta-hostname-path : /etc/hostname ta-hosts-path : /etc/hosts #Workload Agent: Config : /etc/workload-agent/v5.0.0/ Logs : /var/log/workload-agent Note Persistent storage will not be deleted if the Helm deployment is uninstalled. Be sure to delete the created folders on the NFS server (/mnt/nfs_share/ by default) as well as the local storage used by the Trust Agent (/etc/trustagent and /var/log/trustagent on each worker node) and Workload Agent (/etc/workload-agent and /var/log/workload-agent on each worker node) if a \"fresh\" installation is needed. Rerun the setup-nfs.sh script after deleting the shared folders to recreate the empty folder structure. Note If the Endorsement Certificate (EC) Pre-Registration feature is enabled for the HVS: requireEKCertForHostProvision: true # If set to true, worker node EK certificate should be registered in HVS DB, for AIK provisioning step of TA. (Allowed values: `true`\\`false`) verifyQuoteForHostRegistration: true # If set to true, when the worker node is being registered to HVS, quote verification will be done. Default value is false. (Allowed values: `true`\\`false`) The worker node TPM Endorsement Certificates (ECs) must be registered with the HVS before the Trust Agent daemonsets will fully deploy. This is because a necessary step during Trust Agent provisioning will be denied access until the HVS has the EC registered in its database. See the Endorsement Certificate Pre-Registration section for more details about this feature. The Trust Agent daemonset will continue to reattempt deployment on all worker nodes, so the deployment will self-recover after the EC registration happens. Trust Agent deployment failures should be expected if the Trust Agent is deployed before this step is completed. Default Service Ports For both Single node and multi-node deployments following ports are used. All services exposing APIs will use the below ports CMS : 30445 AAS : 30444 HVS : 30443 WLS : 30447 IHUB : None KBS : 30448 K8s-scheduler : 30888 K8s-controller : None TA : 31443 WLA : None","title":"Deploying Intel SecL-DC"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#deploying-intel-secl-dc","text":"Beginning in the 4.2 release, Intel SecL-DC is deployed using Helm charts onto a Kubernetes platform. Deployment using binary installers has been deprecated.","title":"Deploying Intel SecL-DC"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#prerequisites-for-deployment","text":"A Kubernetes cluster (version 1.23.1 or higher) must be available. Hosts to be attested should be worker nodes in the Kubernetes cluster. Ensure that kubectl is configured to work from the system where you will execute the deployment. For default installations, a multi-node cluster (at least one controller node and at least one worker node) is recommended. A single-node installation (all Kubernetes services and all workloads running on a single node, as in microk8s) will require manual adjustments to node labels and pod tolerations. Worker nodes to be attested must meet the hardware security technology requirements for the use cases to be enabled. Helm 3 must be installed on the system from which the deployment will be launched. curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 chmod 700 get_helm.sh ./get_helm.sh An NFS server is required with at minimum 2Gi of storage space available (10Gi is recommended for deployments managing up to 10,000 hosts. 50gi is recommended for deployments managing up to 100,000 hosts). All Intel SecL-DC container images must be pushed to a container registry using the appropriate version tag All worker nodes to be attested must have a supported combination of hardware security technologies enabled (see previous section). All worker nodes to be attested must be labelled according to the security technologies enabled (specifically tboot vs Secure Boot) Label any tboot-enabled worker nodes with the label \"TXT-ENABLED\" kubectl label nodes <node name> node.type=TXT-ENABLED Label any Secure Boot-enabled worker nodes with \"SUEFI-ENABLED\" kubectl label nodes <node name> node.type=SUEFI-ENABLED","title":"Prerequisites for Deployment"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#setting-up-for-helm-deployment","text":"Create a namespace or use the namespace used for helm deployment. kubectl create ns isecl Note ISecL Scheduler and Admission Controller secrets are required for Trusted Workload Placement and Workload Security releated usecases","title":"Setting up for Helm deployment"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#create-secrets-for-isecl-scheduler-tls-key-pair","text":"ISecl Scheduler runs as https service, therefore it needs TLS Keypair and tls certificate needs to be signed by K8s CA, inorder to have secure communication between K8s base scheduler and ISecl K8s Scheduler. The creation of TLS keypair is a manual step, which has to be done prior deplolying the helm for Trusted Workload Placement usecase. Following are the steps involved in creating tls cert signed by K8s CA. mkdir -p /tmp/k8s-certs/tls-certs && cd /tmp/k8s-certs/tls-certs openssl req -new -days 365 -newkey rsa:4096 -addext \"subjectAltName = DNS:<Controlplane hostname>\" -nodes -text -out server.csr -keyout server.key -sha384 -subj \"/CN=ISecl Scheduler TLS Certificate\" cat <<EOF | kubectl apply -f - apiVersion: certificates.k8s.io/v1 kind: CertificateSigningRequest metadata: name: isecl-scheduler.isecl spec: request: $(cat server.csr | base64 | tr -d '\\n') signerName: kubernetes.io/kube-apiserver-client usages: - client auth EOF kubectl certificate approve isecl-scheduler.isecl kubectl get csr isecl-scheduler.isecl -o jsonpath='{.status.certificate}' \\ | base64 --decode > server.crt kubectl create secret tls isecl-scheduler-certs --cert=/tmp/k8s-certs/tls-certs/server.crt --key=/tmp/k8s-certs/tls-certs/server.key -n isecl Note CSR needs to be deleted if we want to regenerate isecl-scheduler-certs secret with command kubectl delete csr isecl-scheduler.isecl","title":"Create Secrets for ISecL Scheduler TLS Key-pair"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#create-secrets-for-admission-controller-tls-key-pair","text":"Create admission-controller-certs secrets for admission controller deployment mkdir -p /tmp/adm-certs/tls-certs && cd /tmp/adm-certs/tls-certs openssl req -new -days 365 -newkey rsa:4096 -addext \"subjectAltName = DNS:admission-controller.isecl.svc\" -nodes -text -out server.csr -keyout server.key -sha384 -subj \"/CN=system:node:<nodename>;/O=system:nodes\" cat <<EOF | kubectl apply -f - apiVersion: certificates.k8s.io/v1 kind: CertificateSigningRequest metadata: name: admission-controller.isecl spec: groups: - system:authenticated request: $(cat server.csr | base64 | tr -d '\\n') signerName: kubernetes.io/kubelet-serving usages: - digital signature - key encipherment - server auth EOF kubectl certificate approve admission-controller.isecl kubectl get csr admission-controller.isecl -o jsonpath='{.status.certificate}' \\ | base64 --decode > server.crt kubectl create secret tls admission-controller-certs --cert=/tmp/adm-certs/tls-certs/server.crt --key=/tmp/adm-certs/tls-certs/server.key -n isecl Generate CA Bundle kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}' Add the output base64 encoded string to value in caBundle sub field of admission-controller in usecase/trusted-workload-placement/values.yml in case of usecase deployment chart. Note CSR needs to be deleted if we want to regenerate admission-controller-certs secret with command kubectl delete csr admission-controller.isecl","title":"Create Secrets for Admission controller TLS Key-pair"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#create-secrets-for-kbs-kmip-certificates","text":"Copy KMIP Client Certificate, Client Key and Root Certificate from KMIP Server to Node where KMIP secrets needs to be generated. kubectl create secret generic kbs-kmip-certs -n isecl --from-file=client_certificate.pem=<KMIP Client Certificate Path> --from-file=client_key.pem=<KMIP Client Key Path> --from-file=root_certificate.pem=<KMIP Root Certificate Path> Note KBS KMIP Certificate is required for Workload Security usecase","title":"Create Secrets for KBS KMIP Certificates"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#retrieving-helm-charts","text":"The Intel SecL-DC Helm charts are hosted in a github Helm repo: helm repo add isecl-helm https://intel-secl.github.io/helm-charts/ helm repo update The list of available charts on the added repo can be shown using the \"search repo\" command: helm search repo --versions","title":"Retrieving Helm charts"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#persistent-storage","text":"Several Intel SecL-DC services require persistent storage for databases, configuration settings, and logs. By default the Helm deployments are configured to use NFS storage for these persistent volumes. On the NFS server, execute the provided setup-nfs.sh script to set up the needed persistent volume folder structure and share the mount points. curl -fsSL -o setup-nfs.sh https://raw.githubusercontent.com/intel-secl/helm-charts/v4.2.0-Beta/setup-nfs.sh chmod +x setup-nfs.sh ./setup-nfs.sh /mnt/nfs_share 1001 <ip or hostname of the control plane> All the pods running on nodes in cluster need access to NFS mount path via PVC e.g /mnt/nfs_share . This requires user to add IPs/FQDN names to be added to /etc/exports file on system where NFS server is installed Add all the IPs or FQDN names of each of nodes in K8s cluster in /etc/exports file in system where NFS is server is installed and configured using above script. e.g For 3 node cluster with FQDN names control-plane.com(control plane), node1.com and node2.com(nodes) cat /etc/exports /mnt/nfs_share/isecl/ control-plane.com(rw,sync,no_all_squash,root_squash) /mnt/nfs_share/isecl/ node1.com(rw,sync,no_all_squash,root_squash) /mnt/nfs_share/isecl/ node2.com(rw,sync,no_all_squash,root_squash) Note Even if a new node is joined to the cluster, the IP/FQDN name should be added to /etc/exportfs file at system where NFS server is running After making the changes in /etc/exports file run the below command exportfs -arv","title":"Persistent Storage"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#default-service-and-agent-mount-paths","text":"#Certificate-Management-Service Config : <NFS-vol-base-path>/isecl/cms/config Logs : <NFS-vol-base-path>/isecl/cms/logs #Authentication Authorization Service Config : <NFS-vol-base-path>/isecl/aas/config Logs : <NFS-vol-base-path>/isecl/aas/logs Pg-data : <NFS-vol-base-path>/isecl/aas/db #Host Attestation Service Config : <NFS-vol-base-path>/isecl/hvs/config Logs : <NFS-vol-base-path>/isecl/hvs/logs Pg-data : <NFS-vol-base-path>/usr/local/kube/data/hvs #Integration-Hub Config : <NFS-vol-base-path>/isecl/ihub/config Log : <NFS-vol-base-path>/isecl/ihub/logs #Workload Service Config : <NFS-vol-base-path>/isecl/wls/config Logs : <NFS-vol-base-path>/isecl/wls/log Pg-data : <NFS-vol-base-path>/usr/local/kube/data/wls #Key-Broker-Service Config : <NFS-vol-base-path>/isecl/kbs/config Log : <NFS-vol-base-path>/isecl/kbs/logs Opt : <NFS-vol-base-path>/isecl/kbs/kbs/opt #Trust Agent: Config : /etc/trustagent/v5.0.0/ Logs : /var/log/trustagent/ tpmrm : /dev/tpmrm0 txt-stat : /usr/sbin/txt-stat ta-hostname-path : /etc/hostname ta-hosts-path : /etc/hosts #Workload Agent: Config : /etc/workload-agent/v5.0.0/ Logs : /var/log/workload-agent Note Persistent storage will not be deleted if the Helm deployment is uninstalled. Be sure to delete the created folders on the NFS server (/mnt/nfs_share/ by default) as well as the local storage used by the Trust Agent (/etc/trustagent and /var/log/trustagent on each worker node) and Workload Agent (/etc/workload-agent and /var/log/workload-agent on each worker node) if a \"fresh\" installation is needed. Rerun the setup-nfs.sh script after deleting the shared folders to recreate the empty folder structure. Note If the Endorsement Certificate (EC) Pre-Registration feature is enabled for the HVS: requireEKCertForHostProvision: true # If set to true, worker node EK certificate should be registered in HVS DB, for AIK provisioning step of TA. (Allowed values: `true`\\`false`) verifyQuoteForHostRegistration: true # If set to true, when the worker node is being registered to HVS, quote verification will be done. Default value is false. (Allowed values: `true`\\`false`) The worker node TPM Endorsement Certificates (ECs) must be registered with the HVS before the Trust Agent daemonsets will fully deploy. This is because a necessary step during Trust Agent provisioning will be denied access until the HVS has the EC registered in its database. See the Endorsement Certificate Pre-Registration section for more details about this feature. The Trust Agent daemonset will continue to reattempt deployment on all worker nodes, so the deployment will self-recover after the EC registration happens. Trust Agent deployment failures should be expected if the Trust Agent is deployed before this step is completed.","title":"Default Service and Agent Mount Paths"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/24%20Deploying%20Intel%20SecL%20using%20Helm/#default-service-ports","text":"For both Single node and multi-node deployments following ports are used. All services exposing APIs will use the below ports CMS : 30445 AAS : 30444 HVS : 30443 WLS : 30447 IHUB : None KBS : 30448 K8s-scheduler : 30888 K8s-controller : None TA : 31443 WLA : None","title":"Default Service Ports"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/","text":"Deploying Intel SecL Use Cases Using Helm Intel SecL-DC provides combined Helm charts to deploy an entire use case using a single configuration file, rather than deploying each individual service. This is the recommended method for deployment. Available use case deployments include: Host Attestation (This enables Platform Integrity Attestation) Trusted Workload Placement (This deploys the Host Attestation use case and adds integration with Kubernetes to place worklaods on trusted workers) The Trusted Workload Placement deployment can optionally be divided into separate deployments for the Cloud Service Provider and the Control Plane The Control Plane deployment includes the CMS, AAS, HVS, and optionally supports NATS The Cloud Service Provider deployment includes the Trust Agent, Integration Hub, Admission-Controller, Intel SecL Controller, and Intel SecL Scheduler Workload Security (this deploys Host Attestation and Trusted Workload Placement, and adds components to enable Workload Confidentiality) Deployment Steps Configure the values.yaml answer file. Each values.yaml file will contain \" \" prompts and a comment describing the information required. Use Case charts Deployment Pull the Helm charts from the Helm repository and then deploy. Set the release version export VERSION=v5.0.0 Host-Attestation: helm pull isecl-helm/Host-Attestation --version $VERSION && tar -xzf Host-Attestation-$VERSION.tgz Host-Attestation/values.yaml helm install host-attastation isecl-helm/Host-Attestation --version $VERSION -f Host-Attestation/values.yaml --create-namespace -n <namespace> Trusted Workload Placement helm pull isecl-helm/Trusted-Workload-Placement --version $VERSION && tar -xzf Trusted-Workload-Placement-$VERSION.tgz Trusted-Workload-Placement/values.yaml helm install trusted-workload-placement isecl-helm/Trusted-Workload-Placement --version $VERSION -f Trusted-Workload-Placement/values.yaml --create-namespace -n <namespace> Trusted Workload Placement - Cloud Service Provider Components Only helm pull isecl-helm/Trusted-Workload-Placement-Cloud-Service-Provider --version $VERSION && tar -xzf Trusted-Workload-Placement-Cloud-Service-Provider-$VERSION.tgz Trusted-Workload-Placement-Cloud-Service-Provider/values.yaml helm install twp-cloud-service-provider isecl-helm/Trusted-Workload-Placement-Cloud-Service-Provider --version $VERSION -f Trusted-Workload-Placement-Cloud-Service-Provider/values.yaml --create-namespace -n <namespace> Trusted Workload Placement - Control Plane Components Only helm pull isecl-helm/Trusted-Workload-Placement-Control-Plane --version $VERSION && tar -xzf Trusted-Workload-Placement-Control-Plane-$VERSION.tgz Trusted-Workload-Placement-Control-Plane/values.yaml helm install twp-control-plane isecl-helm/Twp-Control-Plane --version $VERSION -f Twp-Control-Plane/values.yaml --create-namespace -n <namespace> Workload Security helm pull isecl-helm/Workload-Security --version $VERSION && tar -xzf Workload-Security-$VERSION.tgz Workload-Security/values.yaml helm install workload-security isecl-helm/Workload-Security --version $VERSION -f Workload-Security/values.yaml --create-namespace -n <namespace> Admission Controller when a new worker node is joined/rebooted in the cluster, below steps can be done, to taint such nodes, by labelling it as untrusted, intiatially. Tainiting, doesn't allow scheduling of any pods on that worker node. IHUB pulls the data from HVS, and pushes to ISECL Controller, based on the report status of the node, if the worker node is trusted, then that node will be untainted. Node Joining or Node Rebooted When the worker node is being joined/rebooted in the k8s cluster, Untrusted:True NoExecute and NoSchedule taint would be added to the worker Node To the K8s cluster, when a new worker node is being joined, such worker Nodes are tainted Set taintRebootedNodes to \"true\" in values.yml during helm deployment. In the K8s cluster, if any of the worker node is Rebooted, such worker Nodes are tainted Set taintRegisteredNodes to \"true\" in values.yml during helm deployment. ???+ note By default, taintRebootedNodes and taintRegisteredNodes, will be false. ???+ note In no_proxy, add .svc,.svc.cluster.local, and then do kubeadm init Upload image to registry The admission controller tar file that is present in k8s image folder should be uploaded to registry and update the image name in values.yml file during helm deployment. Usecase Workflows API Collections The below allow to get started with workflows within Intel\u00ae SecL-DC for Foundational and Workload Security Usecases. More details available in API Collections repository Pre-requisites Postman client should be downloaded on supported platforms or on the web to get started with the usecase collections. Note The Postman API Network will always have the latest released version of the API Collections. For all releases, refer the github repository for API Collections Use Case Collections Use case Sub-Usecase API Collection Foundational Security Host Attestation(RHEL) \u2714\ufe0f Data Fencing with Asset Tags(RHEL) \u2714\ufe0f Trusted Workload Placement (Containers) \u2714\ufe0f Workload Security Container Confidentiality with CRIO Runtime \u2714\ufe0f Downloading API Collections Postman API Network for latest released: https://explore.postman.com/intelsecldc or Github repo for all releases #Clone the github repo for api-collections git clone https://github.com/intel-secl/utils.git #Switch to specific release-version of choice cd utils/ git checkout <release-version of choice> #Import Collections from cd tools/api-collections Note The postman-collections are also available when cloning the repos via build manifest under utils/tools/api-collections","title":"Deploying Intel SecL Use Cases Using Helm"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#deploying-intel-secl-use-cases-using-helm","text":"Intel SecL-DC provides combined Helm charts to deploy an entire use case using a single configuration file, rather than deploying each individual service. This is the recommended method for deployment. Available use case deployments include: Host Attestation (This enables Platform Integrity Attestation) Trusted Workload Placement (This deploys the Host Attestation use case and adds integration with Kubernetes to place worklaods on trusted workers) The Trusted Workload Placement deployment can optionally be divided into separate deployments for the Cloud Service Provider and the Control Plane The Control Plane deployment includes the CMS, AAS, HVS, and optionally supports NATS The Cloud Service Provider deployment includes the Trust Agent, Integration Hub, Admission-Controller, Intel SecL Controller, and Intel SecL Scheduler Workload Security (this deploys Host Attestation and Trusted Workload Placement, and adds components to enable Workload Confidentiality)","title":"Deploying Intel SecL Use Cases Using Helm"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#deployment-steps","text":"Configure the values.yaml answer file. Each values.yaml file will contain \" \" prompts and a comment describing the information required.","title":"Deployment Steps"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#use-case-charts-deployment","text":"Pull the Helm charts from the Helm repository and then deploy. Set the release version export VERSION=v5.0.0","title":"Use Case charts Deployment"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#host-attestation","text":"helm pull isecl-helm/Host-Attestation --version $VERSION && tar -xzf Host-Attestation-$VERSION.tgz Host-Attestation/values.yaml helm install host-attastation isecl-helm/Host-Attestation --version $VERSION -f Host-Attestation/values.yaml --create-namespace -n <namespace>","title":"Host-Attestation:"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#trusted-workload-placement","text":"helm pull isecl-helm/Trusted-Workload-Placement --version $VERSION && tar -xzf Trusted-Workload-Placement-$VERSION.tgz Trusted-Workload-Placement/values.yaml helm install trusted-workload-placement isecl-helm/Trusted-Workload-Placement --version $VERSION -f Trusted-Workload-Placement/values.yaml --create-namespace -n <namespace>","title":"Trusted Workload Placement"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#trusted-workload-placement-cloud-service-provider-components-only","text":"helm pull isecl-helm/Trusted-Workload-Placement-Cloud-Service-Provider --version $VERSION && tar -xzf Trusted-Workload-Placement-Cloud-Service-Provider-$VERSION.tgz Trusted-Workload-Placement-Cloud-Service-Provider/values.yaml helm install twp-cloud-service-provider isecl-helm/Trusted-Workload-Placement-Cloud-Service-Provider --version $VERSION -f Trusted-Workload-Placement-Cloud-Service-Provider/values.yaml --create-namespace -n <namespace>","title":"Trusted Workload Placement - Cloud Service Provider Components Only"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#trusted-workload-placement-control-plane-components-only","text":"helm pull isecl-helm/Trusted-Workload-Placement-Control-Plane --version $VERSION && tar -xzf Trusted-Workload-Placement-Control-Plane-$VERSION.tgz Trusted-Workload-Placement-Control-Plane/values.yaml helm install twp-control-plane isecl-helm/Twp-Control-Plane --version $VERSION -f Twp-Control-Plane/values.yaml --create-namespace -n <namespace>","title":"Trusted Workload Placement - Control Plane Components Only"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#workload-security","text":"helm pull isecl-helm/Workload-Security --version $VERSION && tar -xzf Workload-Security-$VERSION.tgz Workload-Security/values.yaml helm install workload-security isecl-helm/Workload-Security --version $VERSION -f Workload-Security/values.yaml --create-namespace -n <namespace>","title":"Workload Security"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#admission-controller","text":"when a new worker node is joined/rebooted in the cluster, below steps can be done, to taint such nodes, by labelling it as untrusted, intiatially. Tainiting, doesn't allow scheduling of any pods on that worker node. IHUB pulls the data from HVS, and pushes to ISECL Controller, based on the report status of the node, if the worker node is trusted, then that node will be untainted. Node Joining or Node Rebooted When the worker node is being joined/rebooted in the k8s cluster, Untrusted:True NoExecute and NoSchedule taint would be added to the worker Node To the K8s cluster, when a new worker node is being joined, such worker Nodes are tainted Set taintRebootedNodes to \"true\" in values.yml during helm deployment. In the K8s cluster, if any of the worker node is Rebooted, such worker Nodes are tainted Set taintRegisteredNodes to \"true\" in values.yml during helm deployment. ???+ note By default, taintRebootedNodes and taintRegisteredNodes, will be false. ???+ note In no_proxy, add .svc,.svc.cluster.local, and then do kubeadm init Upload image to registry The admission controller tar file that is present in k8s image folder should be uploaded to registry and update the image name in values.yml file during helm deployment.","title":"Admission Controller"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#usecase-workflows-api-collections","text":"The below allow to get started with workflows within Intel\u00ae SecL-DC for Foundational and Workload Security Usecases. More details available in API Collections repository","title":"Usecase Workflows API Collections"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#pre-requisites","text":"Postman client should be downloaded on supported platforms or on the web to get started with the usecase collections. Note The Postman API Network will always have the latest released version of the API Collections. For all releases, refer the github repository for API Collections","title":"Pre-requisites"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#use-case-collections","text":"Use case Sub-Usecase API Collection Foundational Security Host Attestation(RHEL) \u2714\ufe0f Data Fencing with Asset Tags(RHEL) \u2714\ufe0f Trusted Workload Placement (Containers) \u2714\ufe0f Workload Security Container Confidentiality with CRIO Runtime \u2714\ufe0f","title":"Use Case Collections"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25%20Deploying%20Intel%20SecL%20Use%20Cases%20Using%20Helm/#downloading-api-collections","text":"Postman API Network for latest released: https://explore.postman.com/intelsecldc or Github repo for all releases #Clone the github repo for api-collections git clone https://github.com/intel-secl/utils.git #Switch to specific release-version of choice cd utils/ git checkout <release-version of choice> #Import Collections from cd tools/api-collections Note The postman-collections are also available when cloning the repos via build manifest under utils/tools/api-collections","title":"Downloading API Collections"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25.12%20Installing%20the%20Workload%20Policy%20Manager/","text":"Installing the Workload Policy Manager The Workload Policy Manager is a lightweight application that assists in encrypting workload images. Because of the way this utility is used, it is not part of the Helm deployment for the rest of the ISecL application, and can be deployed on any machine with a supported OS for authoring encrypted workload images. Required For The WPM is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Containers) Supported Operating Systems The Intel\u00ae Security Libraries Workload Policy Manager supports: Red Hat Enterprise Linux 8.4 Ubuntu 20.04 Recommended Hardware 2 vCPUs RAM: 8 GB 100 GB One network interface with network access to the Key Broker and Workload Service Additional memory and disk space may be required depending on the size of images to be encrypted Installation Copy the WPM installer to the /root directory Create the wpm.env answer file: KBS_BASE_URL = https://<IP address or hostname of the KBS>:<KBS port>/kbs/v1/ WPM_SERVICE_USERNAME = <WPM_Service username mentioned in values.yaml> WPM_SERVICE_PASSWORD = <WPM Service password mentioned in values.yaml> CMS_TLS_CERT_SHA384 = <Sha384 hash of the CMS TLS certificate> CMS_BASE_URL = https://<IP address or hostname for CMS>:<CMS port>/cms/v1/ AAS_API_URL = https://<Hostname or IP address of the AAS>:<AAS port>/aas/v1 WPM_WITH_CONTAINER_SECURITY_CRIO = yes Steps to get sha384 hash of cms tls certificate kubectl exec -it <cms_pod_name> -n <namespace> -- cms tlscertsha384 Execute the WPM installer: ./wpm-v5.0.0.bin","title":"Installing the Workload Policy Manager"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25.12%20Installing%20the%20Workload%20Policy%20Manager/#installing-the-workload-policy-manager","text":"The Workload Policy Manager is a lightweight application that assists in encrypting workload images. Because of the way this utility is used, it is not part of the Helm deployment for the rest of the ISecL application, and can be deployed on any machine with a supported OS for authoring encrypted workload images.","title":"Installing the Workload Policy Manager"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25.12%20Installing%20the%20Workload%20Policy%20Manager/#required-for","text":"The WPM is REQUIRED for the following use cases. Workload Confidentiality (both VMs and Containers)","title":"Required For"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25.12%20Installing%20the%20Workload%20Policy%20Manager/#supported-operating-systems","text":"The Intel\u00ae Security Libraries Workload Policy Manager supports: Red Hat Enterprise Linux 8.4 Ubuntu 20.04","title":"Supported Operating Systems"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25.12%20Installing%20the%20Workload%20Policy%20Manager/#recommended-hardware","text":"2 vCPUs RAM: 8 GB 100 GB One network interface with network access to the Key Broker and Workload Service Additional memory and disk space may be required depending on the size of images to be encrypted","title":"Recommended Hardware"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/25.12%20Installing%20the%20Workload%20Policy%20Manager/#installation","text":"Copy the WPM installer to the /root directory Create the wpm.env answer file: KBS_BASE_URL = https://<IP address or hostname of the KBS>:<KBS port>/kbs/v1/ WPM_SERVICE_USERNAME = <WPM_Service username mentioned in values.yaml> WPM_SERVICE_PASSWORD = <WPM Service password mentioned in values.yaml> CMS_TLS_CERT_SHA384 = <Sha384 hash of the CMS TLS certificate> CMS_BASE_URL = https://<IP address or hostname for CMS>:<CMS port>/cms/v1/ AAS_API_URL = https://<Hostname or IP address of the AAS>:<AAS port>/aas/v1 WPM_WITH_CONTAINER_SECURITY_CRIO = yes Steps to get sha384 hash of cms tls certificate kubectl exec -it <cms_pod_name> -n <namespace> -- cms tlscertsha384 Execute the WPM installer: ./wpm-v5.0.0.bin","title":"Installation"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/","text":"Authentication Beginning in the Intel\u00ae SecL-DC 1.6 release, authentication is centrally managed by the Authentication and Authorization Service (AAS). This service uses a Bearer Token authentication method, which replaces the previous HTTP BASIC authentication. This service also centralizes the creation of roles and users, allowing much easier management of users, passwords, and permissions across all Intel\u00ae SecL-DC services. To make an API request to an Intel\u00ae SecL-DC service, an authentication token is now required. API requests must now include an Authorization header with an appropriate token: Authorization: Bearer $TOKEN The token is issued by the AAS and will expire after a set amount of time. This token may be used with any Intel\u00ae SecL-DC service, and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for. Create Token To request a new token from the AAS: POST https://<AAS IP or hostname>:30444/aas/v1/token { \"username\" : \"<username>\", \"password\" : \"<password>\" } The response will be a token that can be used in the Authorization header for other requests. The length of time for which the token will be valid is configured on the AAS using the key AAS\\_JWT\\_TOKEN\\_DURATION\\_MINS (in the installation answer file during installation) or aas.jwt.token.duration.mins (configured on the AAS after installation). In both cases the value is the length of time in minutes that issued tokens will remain valid before expiring. User Management Users in Intel\u00ae SecL-DC are no longer restrained to a specific service, as they are now centrally managed by the Authentication and Authorization Service. Any user may now be assigned roles for any service, allowing user accounts to be fully defined by the tasks needed. Username and Password requirements Passwords have the following constraints: cannot be empty - i.e must at least have one character maximum length of 255 characters Usernames have the following requirements: Format: username[@host_name[domain]] [@host_name[domain]] is optional username shall be minimum of 2 and maximum of 255 characters username allowed characters are alphanumeric, ., -, _ - but cannot start with -. Domain name must meet requirements of a host name or fully qualified internet host name Examples admin, admin_wls, admin@wls, admin@wls.intel.com , wls-admin@intel.com Create User POST https://<IP or hostname of AAS>:30444/aas/v1/users Authorization: Bearer <token> { \"username\" : \"<username>\", \"password\" : \"<password>\" } Search Users by Username GET h tt ps : //<IP or hostname of AAS>:30444/aas/v1/users?name=<value> Change User Password PATCH h tt ps : //<IP or hostname of AAS>:30444/aas/v1/users/changepassword Au t horiza t io n : Bearer < t oke n > { \"username\" : \"<username>\" , \"old_password\" : \"<old_password>\" , \"new_password\" : \"<new_password>\" , \"password_confirm\" : \"<new_password>\" } Delete User DELETE h tt ps : //<IP or hostname of AAS>:30444/aas/v1/users/<User ID> Au t horiza t io n : Bearer < t oke n > Roles and Permissions Permissions in Intel\u00ae SecL-DC are managed by Roles. Roles are a set of predefined permissions applicable to a specific service. Any number of Roles may be applied to a User. While new Roles can be created, each Intel\u00ae SecL service defines permissions that are applicable to specific predetermined Roles. This means that only pre-defined Roles will actually have any permissions. Role creation is intended to allow Intel\u00ae SecL-DC services to define their permissions while allowing role and user management to be centrally managed on the AAS. When a new service is installed, it will use the Role creation functions to define roles applicable for that service in the AAS. Create Role POST https://<AAS IP or Hostname>:30444/aas/v1/roles Authorization: Bearer <token> { \"service\": \"<Service name>\", \"name\": \"<Role Name>\", \"permissions\": [<array of permissions>] } service field contains a minimum of 1 and maximum of 20 characters. Allowed characters are alphanumeric plus the special charecters -, _, @, ., , name field contains a minimum of 1 and maximum of 40 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , service and name fields are mandatory context field is optional and can contain up to 512 characters. Allowed characters are alphanumeric plus -, _, @, ., ,,=,;,:,* permissions field is optional and allow up to a maximum of 512 characters. The Permissions array must a comma-separated list of permissions formatted as resource:action: Permissions required to execute specific API requests are listed with the API resource and method definitions in the API documentation. Search Roles GET https://<AAS IP or Hostname>:30444/aas/v1/roles?<parameter>=<value> Authorization: Bearer <token> Search parameters supported: Service=<name of service> Name=<role name> Context=<context> contextContains=<partial \"context\" string> allContexts=<true or false> filter=false Delete Role DELETE https://<AAS IP or Hostname>:30444/aas/v1/roles/<role ID> Authorization: Bearer <token> Assign Role to User POST https://<AAS IP or Hostname>:30444/aas/v1/users/<user ID>/roles Authorization: Bearer <token> { \"role_ids\": [\"<comma-separated list of role IDs>\"] } List Roles Assigned to User GET https://<AAS IP or Hostname\\>:30444/aas/v1/users/<user ID>/roles Authorization: Bearer <token> Remove Role from User DELETE https://<AAS IP or Hostname>:30444/aas/v1/users/<userID>/roles/<role ID> Authorization: Bearer <token> Role Definitions The following roles are created during installation (or by the CreateUsers script) and exist by default. Role Name Permissions Utility TA:Administrator TA:*:* Used by the Verification Service to access Trust Agent APIs, including retrieval of TPM quotes, provisioning Asset Tags and IMA Flavor, etc. HVS:ReportSearcher HVS: [reports:search:*\"] Used by the Integration Hub to retrieve attestation reports from the Verification Service KBS:Keymanager KBS: [\"keys:create:*\", \"keys:transfer:*\"] Used by the WPM to create and retrieve symmetric encryption keys to encrypt workload images WLS:KeysCreator WLS: [\"keys:create:*\" Used by the Workload Agent during Container Confidentiality flows to retrieve the key. HVS: ReportCreator HVS: [\"reports:create:*\"] Used by the Workload Service to create new attestation reports on the Verification Service as part of Workload Confidentiality key retrievals. Administrator *:*:* Global administrator role used for the initial administrator account. This role has all permissions across all services, including permissions to create new roles and users. AAS: Administrator *:*:* Administrator role for the AAS only. Has all permissions for AAS resources, including the ability to create or delete users and roles. AAS: RoleManager AAS: [roles:create:*, roles:retrieve:*, roles:search:*, roles:delete:*] AAS role that allows all actions for Roles, but cannot create or delete Users or assign Roles to Users. AAS: UserManager AAS: [users:create:*, users:retrieve:*, users:store:*, users:search:*, users:delete:*] AAS role with all permissions for Users, but has no ability to create Roles or assign Roles to Users. AAS: UserRoleManager AAS: [user_roles:create:*, user_roles:retrieve:*, user_roles:search:*, user_roles:delete:*, AAS role with permissions to assign Roles to Users, but cannot create delete or modify Users or Roles. HVS: AttestationRegister HVS: [host_tls_policies:create:*, hosts:create:*, hosts:store:*, hosts:search:*, host_unique_flavors:create:*, flavors:search:*, tpm_passwords:retrieve:*, tpm_passwords:create:*, host_aiks:certify:* Role used for Trust Agent provisioning. Used to create the installation token provided during installation. HVS: HostSigner HVS: host_signing_key_certificates:create:* Used for installation of the Workload Agent TA: CustomClaimCreator HVS: \"host_aiks:certify: \",\"tpm_endorsements:create: \", \"tpm_endorsements:search: \",AAS: \"credential:create: \" Used for installation of the Trust Agent","title":"Authentication"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#authentication","text":"Beginning in the Intel\u00ae SecL-DC 1.6 release, authentication is centrally managed by the Authentication and Authorization Service (AAS). This service uses a Bearer Token authentication method, which replaces the previous HTTP BASIC authentication. This service also centralizes the creation of roles and users, allowing much easier management of users, passwords, and permissions across all Intel\u00ae SecL-DC services. To make an API request to an Intel\u00ae SecL-DC service, an authentication token is now required. API requests must now include an Authorization header with an appropriate token: Authorization: Bearer $TOKEN The token is issued by the AAS and will expire after a set amount of time. This token may be used with any Intel\u00ae SecL-DC service, and will carry the appropriate permissions for the role(s) assigned to the account the token was generated for.","title":"Authentication"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#create-token","text":"To request a new token from the AAS: POST https://<AAS IP or hostname>:30444/aas/v1/token { \"username\" : \"<username>\", \"password\" : \"<password>\" } The response will be a token that can be used in the Authorization header for other requests. The length of time for which the token will be valid is configured on the AAS using the key AAS\\_JWT\\_TOKEN\\_DURATION\\_MINS (in the installation answer file during installation) or aas.jwt.token.duration.mins (configured on the AAS after installation). In both cases the value is the length of time in minutes that issued tokens will remain valid before expiring.","title":"Create Token"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#user-management","text":"Users in Intel\u00ae SecL-DC are no longer restrained to a specific service, as they are now centrally managed by the Authentication and Authorization Service. Any user may now be assigned roles for any service, allowing user accounts to be fully defined by the tasks needed.","title":"User Management"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#username-and-password-requirements","text":"Passwords have the following constraints: cannot be empty - i.e must at least have one character maximum length of 255 characters Usernames have the following requirements: Format: username[@host_name[domain]] [@host_name[domain]] is optional username shall be minimum of 2 and maximum of 255 characters username allowed characters are alphanumeric, ., -, _ - but cannot start with -. Domain name must meet requirements of a host name or fully qualified internet host name Examples admin, admin_wls, admin@wls, admin@wls.intel.com , wls-admin@intel.com","title":"Username and Password requirements"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#create-user","text":"POST https://<IP or hostname of AAS>:30444/aas/v1/users Authorization: Bearer <token> { \"username\" : \"<username>\", \"password\" : \"<password>\" }","title":"Create User"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#search-users-by-username","text":"GET h tt ps : //<IP or hostname of AAS>:30444/aas/v1/users?name=<value>","title":"Search Users by Username"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#change-user-password","text":"PATCH h tt ps : //<IP or hostname of AAS>:30444/aas/v1/users/changepassword Au t horiza t io n : Bearer < t oke n > { \"username\" : \"<username>\" , \"old_password\" : \"<old_password>\" , \"new_password\" : \"<new_password>\" , \"password_confirm\" : \"<new_password>\" }","title":"Change User Password"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#delete-user","text":"DELETE h tt ps : //<IP or hostname of AAS>:30444/aas/v1/users/<User ID> Au t horiza t io n : Bearer < t oke n >","title":"Delete User"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#roles-and-permissions","text":"Permissions in Intel\u00ae SecL-DC are managed by Roles. Roles are a set of predefined permissions applicable to a specific service. Any number of Roles may be applied to a User. While new Roles can be created, each Intel\u00ae SecL service defines permissions that are applicable to specific predetermined Roles. This means that only pre-defined Roles will actually have any permissions. Role creation is intended to allow Intel\u00ae SecL-DC services to define their permissions while allowing role and user management to be centrally managed on the AAS. When a new service is installed, it will use the Role creation functions to define roles applicable for that service in the AAS.","title":"Roles and Permissions"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#create-role","text":"POST https://<AAS IP or Hostname>:30444/aas/v1/roles Authorization: Bearer <token> { \"service\": \"<Service name>\", \"name\": \"<Role Name>\", \"permissions\": [<array of permissions>] } service field contains a minimum of 1 and maximum of 20 characters. Allowed characters are alphanumeric plus the special charecters -, _, @, ., , name field contains a minimum of 1 and maximum of 40 characters. Allowed characters are alphanumeric plus the special characters -, _, @, ., , service and name fields are mandatory context field is optional and can contain up to 512 characters. Allowed characters are alphanumeric plus -, _, @, ., ,,=,;,:,* permissions field is optional and allow up to a maximum of 512 characters. The Permissions array must a comma-separated list of permissions formatted as resource:action: Permissions required to execute specific API requests are listed with the API resource and method definitions in the API documentation.","title":"Create Role"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#search-roles","text":"GET https://<AAS IP or Hostname>:30444/aas/v1/roles?<parameter>=<value> Authorization: Bearer <token> Search parameters supported: Service=<name of service> Name=<role name> Context=<context> contextContains=<partial \"context\" string> allContexts=<true or false> filter=false","title":"Search Roles"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#delete-role","text":"DELETE https://<AAS IP or Hostname>:30444/aas/v1/roles/<role ID> Authorization: Bearer <token>","title":"Delete Role"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#assign-role-to-user","text":"POST https://<AAS IP or Hostname>:30444/aas/v1/users/<user ID>/roles Authorization: Bearer <token> { \"role_ids\": [\"<comma-separated list of role IDs>\"] }","title":"Assign Role to User"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#list-roles-assigned-to-user","text":"GET https://<AAS IP or Hostname\\>:30444/aas/v1/users/<user ID>/roles Authorization: Bearer <token>","title":"List Roles Assigned to User"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#remove-role-from-user","text":"DELETE https://<AAS IP or Hostname>:30444/aas/v1/users/<userID>/roles/<role ID> Authorization: Bearer <token>","title":"Remove Role from User"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/40%20Authentication/#role-definitions","text":"The following roles are created during installation (or by the CreateUsers script) and exist by default. Role Name Permissions Utility TA:Administrator TA:*:* Used by the Verification Service to access Trust Agent APIs, including retrieval of TPM quotes, provisioning Asset Tags and IMA Flavor, etc. HVS:ReportSearcher HVS: [reports:search:*\"] Used by the Integration Hub to retrieve attestation reports from the Verification Service KBS:Keymanager KBS: [\"keys:create:*\", \"keys:transfer:*\"] Used by the WPM to create and retrieve symmetric encryption keys to encrypt workload images WLS:KeysCreator WLS: [\"keys:create:*\" Used by the Workload Agent during Container Confidentiality flows to retrieve the key. HVS: ReportCreator HVS: [\"reports:create:*\"] Used by the Workload Service to create new attestation reports on the Verification Service as part of Workload Confidentiality key retrievals. Administrator *:*:* Global administrator role used for the initial administrator account. This role has all permissions across all services, including permissions to create new roles and users. AAS: Administrator *:*:* Administrator role for the AAS only. Has all permissions for AAS resources, including the ability to create or delete users and roles. AAS: RoleManager AAS: [roles:create:*, roles:retrieve:*, roles:search:*, roles:delete:*] AAS role that allows all actions for Roles, but cannot create or delete Users or assign Roles to Users. AAS: UserManager AAS: [users:create:*, users:retrieve:*, users:store:*, users:search:*, users:delete:*] AAS role with all permissions for Users, but has no ability to create Roles or assign Roles to Users. AAS: UserRoleManager AAS: [user_roles:create:*, user_roles:retrieve:*, user_roles:search:*, user_roles:delete:*, AAS role with permissions to assign Roles to Users, but cannot create delete or modify Users or Roles. HVS: AttestationRegister HVS: [host_tls_policies:create:*, hosts:create:*, hosts:store:*, hosts:search:*, host_unique_flavors:create:*, flavors:search:*, tpm_passwords:retrieve:*, tpm_passwords:create:*, host_aiks:certify:* Role used for Trust Agent provisioning. Used to create the installation token provided during installation. HVS: HostSigner HVS: host_signing_key_certificates:create:* Used for installation of the Workload Agent TA: CustomClaimCreator HVS: \"host_aiks:certify: \",\"tpm_endorsements:create: \", \"tpm_endorsements:search: \",AAS: \"credential:create: \" Used for installation of the Trust Agent","title":"Role Definitions"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/50%20Connection%20Strings/","text":"Connection Strings Connection Strings define a remote API resource endpoint that will be used to communicate with the registered host for retrieving TPM quotes and other host information. Connection Strings differ based on the type of host. Trust Agent The Trust Agent connection string connects directly to the Trust Agent on a given host. The Verification Service will use a service account with the needed Trust Agent permissions to connect to the Trust Agent. In previous Intel\u00ae SecL versions, each Trust Agent had its own unique user access controls. Starting in the 1.6 release, all authentication has been centralized with the new Authentication and Authorization Service, eliminating the need for credentials to be provided for connection strings connecting to Trust Agent resources. By default, the Trust Agent uses \"HTTP\" mode, which uses the following connection string: intel:https://<HostNameOrIp>:31443 The Trust Agent can also be used in NATS mode, which uses a slightly different connection string: intel:nats://<unique host identifier, configured at Trust Agent installation> The unique host identifier is a unique ID used by NATS to differentiate services when passing messages. Any unique string is acceptable, but good examples can be the host's FQDN or hardware UUID. Note: Make sure no two hosts are configured with same host identifier. VMware ESXi Importing VMware TLS Certificates Before connecting to vCenter to register hosts or clusters, the vCenter TLS certificate needs to be imported to the Verification Service. This must be done for each vCenter server that the Verification Service will connect to, for importing Flavors or registering hosts. Download the root CA certs from vCenter: wget --no-proxy \"*\" https://<vCenter IP or hostname>/certs/download.zip --no-check-certificate This downloads all the root CA certificates for you into download.zip file. unzip download.zip All of the certificates will be stored under <pwd>/certs/ . Certs will be in PEM format. Upload the certificates to the HVS POST https://%3CIP%3E:30443/hvs/v2/ca-certificates { \"name\": \"<cert name>\", \"type\": \"root\", \"certificate\": \"MIIELTCCAxW...\" } Note Please make sure that the certificate does not contain any other characters other than the base64 characters like that of \\n or -----BEGIN CERTIFICATE----- etc. After upload is successful, restart the service by deleting the pod. The Kubernetes deployment will automatically launch a new pod, which will reflect the updated settings. kubectl delete pod -n <namespace> <hvspodname> Registering a VMware ESXi Host The VMware ESXi connection string is actually directed to vCenter, not the actual ESXi host. Many ESXi hosts managed by the same vCenter server will use the same connection string. The username and password specified are vCenter credentials, and the vCenter \"Validate Session\" privilege is required for access. vmware:https://<vCenterHostNameOrIp>:443/sdk ; h = <hostname of ESXi host> ; u = <username> ; p = <password>","title":"Connection Strings"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/50%20Connection%20Strings/#connection-strings","text":"Connection Strings define a remote API resource endpoint that will be used to communicate with the registered host for retrieving TPM quotes and other host information. Connection Strings differ based on the type of host.","title":"Connection Strings"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/50%20Connection%20Strings/#trust-agent","text":"The Trust Agent connection string connects directly to the Trust Agent on a given host. The Verification Service will use a service account with the needed Trust Agent permissions to connect to the Trust Agent. In previous Intel\u00ae SecL versions, each Trust Agent had its own unique user access controls. Starting in the 1.6 release, all authentication has been centralized with the new Authentication and Authorization Service, eliminating the need for credentials to be provided for connection strings connecting to Trust Agent resources. By default, the Trust Agent uses \"HTTP\" mode, which uses the following connection string: intel:https://<HostNameOrIp>:31443 The Trust Agent can also be used in NATS mode, which uses a slightly different connection string: intel:nats://<unique host identifier, configured at Trust Agent installation> The unique host identifier is a unique ID used by NATS to differentiate services when passing messages. Any unique string is acceptable, but good examples can be the host's FQDN or hardware UUID. Note: Make sure no two hosts are configured with same host identifier.","title":"Trust Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/50%20Connection%20Strings/#vmware-esxi","text":"","title":"VMware ESXi"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/50%20Connection%20Strings/#importing-vmware-tls-certificates","text":"Before connecting to vCenter to register hosts or clusters, the vCenter TLS certificate needs to be imported to the Verification Service. This must be done for each vCenter server that the Verification Service will connect to, for importing Flavors or registering hosts. Download the root CA certs from vCenter: wget --no-proxy \"*\" https://<vCenter IP or hostname>/certs/download.zip --no-check-certificate This downloads all the root CA certificates for you into download.zip file. unzip download.zip All of the certificates will be stored under <pwd>/certs/ . Certs will be in PEM format. Upload the certificates to the HVS POST https://%3CIP%3E:30443/hvs/v2/ca-certificates { \"name\": \"<cert name>\", \"type\": \"root\", \"certificate\": \"MIIELTCCAxW...\" } Note Please make sure that the certificate does not contain any other characters other than the base64 characters like that of \\n or -----BEGIN CERTIFICATE----- etc. After upload is successful, restart the service by deleting the pod. The Kubernetes deployment will automatically launch a new pod, which will reflect the updated settings. kubectl delete pod -n <namespace> <hvspodname>","title":"Importing VMware TLS Certificates"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/50%20Connection%20Strings/#registering-a-vmware-esxi-host","text":"The VMware ESXi connection string is actually directed to vCenter, not the actual ESXi host. Many ESXi hosts managed by the same vCenter server will use the same connection string. The username and password specified are vCenter credentials, and the vCenter \"Validate Session\" privilege is required for access. vmware:https://<vCenterHostNameOrIp>:443/sdk ; h = <hostname of ESXi host> ; u = <username> ; p = <password>","title":"Registering a VMware ESXi Host"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/59%20Endorsement%20Certificate%20Pre-Registration/","text":"Endorsement Certificate Pre-Registration Added in the 4.2 release, this feature adds an additional pre-registration step for Trust Agent hosts. When this feature is enabled, Trust Agent provisioning and registration will be denied unless the Endorsement Certificate (EC) from the TPM of the Trust Agent host is known to the Verification Service. This feature is intended for deployments where physical control of compute resources is limited, as in some 5G wireless, Edge, or IoT device deployments. By pre-registering the Endorsement Certificate of the TPM before shipping the equipment to its physical destination, the HVS can be restricted to allow provisioning and registration only with known TPMs. This mitigates the possibility of a malicious host being registered from a remote location where physical security may be weaker. To enable this feature, set the following options to \"true\" in the Helm congifuration for the HVS (either the HVS individual service values.yaml, or the values.yaml for any use case deployment): config: requireEKCertForHostProvision: true # If set to true enable Endorsement Certificate Pre-registration (Allowed values: `true`\\`false`) verifyQuoteForHostRegistration: true # If set to true enforce Endorsement Certificate Pre-registration (Allowed values: `true`\\`false`) NOTE When this feature is enabled, Trust Agent provisioning will fail for any hosts whose TPM EC has not been pre-registered. For the Trust Agent Kubernetes daemonset, this means the Trust Agent pods will fail to deploy. If deploying Intel SecL as individual service deployments, it is recommended that the ECs be registered to the HVS before deploying the Trust Agent service. The Trust Agent daemonset will continually re-attempt provisioning after failure, so the EC can also be registered after the entire application (or entire use case deployment) has been deployed. After the EC is registered, simply delete the Trust Agent pod running on the worker node whose EC was just registered. This will trigger a re-deployment of the pod from the daemonset, and the Trust Agent should deploy successfully. This feature is primarily intended for worker nodes added to the cluster after the Intel SecL applciation has been fully deployed. In this case, the TPM EC should be registerd before adding the node to the cluster. Once the node is added, the Trust Agent will deploy successfully as expected. To register a TPM Endorsement Certificate with the HVS, the EC and its issuer need to be retrieved from the TPM, and then provided as part of an API call to the HVS. These steps must be followed for each individual host to be attested, as each TPM Endorsement Certificate is unique. Extract the Endorsement Certificate and Issuer from a TPM The example below will retrieve the TPM Endorsement Certificate in base64 encoding from a RHEL server: yum install tpm2-tools tpm2_nvread -P hex:<owner secret> -C 0x40000001 -o ekcert.der 0x1c00002 openssl x509 -inform der -in ekcert.der | base64 | tr -d \" \\t\\n\\r\" Next, retrieve the Issuer of the certificate: openssl x509 -inform der -in ekcert.der --text | grep -Po 'CN =\\K.*' NOTE The TPM \"owner secret\" will either be null or a 40 character hex string. Note that if the TPM ownership secret is set to a value, the Trust Agent must be configured to use that same TPM owner secret when it is deployed. This means either: Setting the TPM owner secret to run the above commands and then clearing TPM ownership to use the null secret for the Trust Agent OR Configuring an identical owner secret for all Trust Agent hosts and using that secret both for these commands and for the Trust Agent deployment. Register the Endorsement Certificate to the HVS Using the base64-encoded Endorsement Certificate and Issuer, use the following API to register the EC with the HVS: POST https://<HVS IP or hostname>:<HVS port>/hvs/v2/tpm-endorsements { \"certificate\": \"Mjo2ZTowYjo3NDo0YzoKICAgICAgICAgM2M6ZDY6Yjc6NTU6M2M6Mjc6Y2U6OTU6YTY6ODQ6MjU6MmU6MTc6ODM6YjI6OTU6NzY6OGI6CiAgICAgICAgIGQzOjFkOjg0OjE1OjNlOmQ5OmI1Ojk1OjA0OjJkOjRlOmY5OjkzOjVmOjMxOjM3OjQwOmJhOgogICAgICAgICBjOTo1ZDo0OTo5OTowMjpiODo5NzoyNToxZjplYTpkMzpmNTpjYzowMzpkOTpiZTo1MDo5YjoKICAgICAgICAgNzk6NDQ6NmE6Yzg6M2I6YmU6MDc6MjQ6ZmI6YTA6YTE6N2Q6Y2U6NWM6YjM6MmE6NWY6OTE6CiAgICAgICAgIGJhOjgwOmRjOjk3OjhlOmI1OjM5OjJkOmQ3OjcyOjE0OjJjOjM4OmYyOjM1OmU0OjBhOmY5OgogICAgICAgICA5MjpkNjoxNjoyMTpiNjpiZTo0ZjpmODozYjo1MTpkYTpkNjpiMzo1NzoyZDpkNTphMjoxYjoKICAgICAgICAgOTc6N2U6NGE6ZGQ6ZGM6NmQ6ODE6OTM6NDM6YzI6MzI6ZGE6MGM6ZWM6MDY6NzY6Zjg6ZjM6CiAgICAgICAgIGNhOjc5OjdhOmNkOjQ0OjZmOjgxOmUwOmUyOjQ1OjQxOmFkOjgwOmZkOmQ4OmM4OjQ4OjdiOgogICAgICAgICBiODplODo5NzoyNTo2YToyNTo5OTplNjpjMjpmOTpiMDo1YzpjMTpkNzo1Mzo5ZToyNDplOToKICAgICAgICAgNzM6YzY6Nzk6MWU6Mjc6NmQ6ZDI6MmM6NWQ6ZTc6MmQ6ZjI6OGU6ODA6NzY6NTM6ZjI6NDM6CiAgICAgICAgIDJiOmI1OjNhOmY1OjNmOmFhOjVjOjA0OjUxOmFmOjZiOmM0OjEwOmQ2OmRlOmQ3OjFkOmE0OgogICAgICAgICBiNTo5NDo2MTowZDo0Yjo3NDpkZDo4Nzo5MjpjYTo1NDozNjpmODowYjo3ZDpkNTo0NTowNjoKICAgICAgICAgYzk6MWI6ZGE6NDk6MDQ6NGM6ZGU6YmE6MGI6Mzc6Zjk6ZGU6ZTQ6YjY6OGU6MWI6Mjc6ZmI6CiAgICAgICAgIDdiOjA3OmM0OmVjCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFbkRDQ0E0U2dBd0lCQWdJRWI2QjNnakFOQmdrcWhraUc5dzBCQVFzRkFEQ0JnekVMTUFrR0ExVUVCaE1DClJFVXhJVEFmQmdOVkJBb01HRWx1Wm1sdVpXOXVJRlJsWTJodWIyeHZaMmxsY3lCQlJ6RWFNQmdHQTFVRUN3d1IKVDFCVVNVZEJLRlJOS1NCVVVFMHlMakF4TlRBekJnTlZCQU1NTEVsdVptbHVaVzl1SUU5UVZFbEhRU2hVVFNrZwpVbE5CSUUxaGJuVm1ZV04wZFhKcGJtY2dRMEVnTURBM01CN123VEUxTVRJeU1qRXpNRFkwTkZvWERUTXdNVEl5Ck1qRXpNRFkwTkZvd0FEQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtYMTh2bmwKaFpqNWlvQnBKL3pwbmlneCtJSlNmS3FSRXE0dkdrRzk4Q1h0bXJJbTZNaWFkN09XQUpNdnZCbzhHWnArMENXTgpqbzZaWG1BbnNaeEUvd2RuUTBZdjA4WFdjOCtQblV1M1BaMFBoK3Q3RXRlaGUxS1dWazl2YllVZUF5TFVuc1FBCkg2cStIRDgzTXQ3bHk0WjBFRDlvUFU1UHpoSGVOSGhkTTM3VWNURVk5MkprTU85eGplODhVTEJnNEJ5RTdIdGgKcU5iUzlsTFZadG0xVk9mOVVUR2Fwem5sdnEyaGM2MlBuZWFWNllZbmdvM1N6ODN0d3o2dy8xVDkvZFV5TnliNgo0THBrUUtPTHcxdTNMYm9icndtT3NBREtBOE56UTdtbEtDd0VDRHZmZmFwRHlVV1hrMzVVc3V0Vkk5cTI1di9yCmUwY29CTnd6b2dJWUxKOENBd0VBQWFPQ0FaZ3dnZ0dVTUZzR0NDc0dBUVVGQndFQkJFOHdUVE123mdnckJnRUYKQlFjd0FvWS9hSFIwY0RvdkwzQnJhUzVwYm1acGJtVnZiaTVqYjIwdlQzQjBhV2RoVW5OaFRXWnlRMEV3TURjdgpUM0IwYVdkaFVuTmhUV1p5UTBFd01EY3VZM0owTUE0R0ExVWREd0VCL3dRRUF3SUFJREJZQmdOVkhSRUJBZjhFClRqQk1wRW93U0RFV01CUUdCV2VCQlFJQkRBdHBaRG8wT1RRMk5UZ3dNREVhTUJnR0JXZUJCUUlDREE5VFRFSWcKT1RZM01DQlVVRTB5TGpBeEVqQVFCZ1ZuZ1FVQ0F3d0hhV1E2TURjeU9EQU1CZ05WSFJNQkFmOEVBakFBTUZBRwpBMVVkSHdSSk1FY3dSYUJEb0VHR1AyaDBkSEE2THk5d2Eya3VhVzVtYVc1bGIyNHVZMjl0TDA5d2RHbG5ZVkp6CllVMW1ja05CTURBM0wwOXdkR2xuWVZKellVMW1ja05CTURBM0xtTnliREFWQmdOVkhTQUVEakFNTUFvR0NDcUMKRkFCRUFSUUJNQjhHQTFVZEl3UVlNQmFBRkp4OTlha2NQVW03NXplTlNyb1MvNDU0b3RkY01CQUdBMVVkSlFRSgpNQWNHQldlQkJ123JNQ0VHQTFVZENRUWFNQmd3RmdZRlo0RUZBaEF4RFRBTERBTXlMakFDQVFBQ0FYUXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUJBREEzdEhsNnB4Z3FhR2lFYVNiZ3QwVER6V3QxVThKODZWcG9RbExoZUQKc3BWMmk5TWRoQlUrMmJXVkJDMU8rWk5mTVRkQXVzbGRTWmtDdUpjbEgrclQ5Y3dEMmI1UW0zbEVhc2c3dmdjaworNkNoZmM1Y3N5cGZrYnFBM0plT3RUa3QxM0lVTERqeU5lUUsrWkxXRmlHMnZrLzRPMUhhMXJOWExkV2lHNWQrClN0M2NiWUdUUThJeTJnenNCbmI0ODhwNWVzMUViNEhnNGtWQnJZRDkyTWhJZTdqb2x5VnFKWm5td3Ztd1hNSFgKVTU0azZYUEdlUjRuYmRJc1hlY3Q4bzZBZGxQeVF5dTFPdlUvcWx3RVVhOXJ4QkRXM3RjZHBMV1VZUTFMZE4ySAprc3BVTnZnTGZkVkZCc2tiMmtrRVRONjZDemY1M3VTMmpoc24rM3NIeE93PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\", \"comment\": \"Sample EC registration\", \"hardware_uuid\": \"12912393-1231-1231-123e-12363512363b\", \"issuer\": \"C = DE, O = Sample, OU = Sample TPM2.0, CN = Sample\", \"revoked\": false }","title":"Endorsement Certificate Pre-Registration"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/59%20Endorsement%20Certificate%20Pre-Registration/#endorsement-certificate-pre-registration","text":"Added in the 4.2 release, this feature adds an additional pre-registration step for Trust Agent hosts. When this feature is enabled, Trust Agent provisioning and registration will be denied unless the Endorsement Certificate (EC) from the TPM of the Trust Agent host is known to the Verification Service. This feature is intended for deployments where physical control of compute resources is limited, as in some 5G wireless, Edge, or IoT device deployments. By pre-registering the Endorsement Certificate of the TPM before shipping the equipment to its physical destination, the HVS can be restricted to allow provisioning and registration only with known TPMs. This mitigates the possibility of a malicious host being registered from a remote location where physical security may be weaker. To enable this feature, set the following options to \"true\" in the Helm congifuration for the HVS (either the HVS individual service values.yaml, or the values.yaml for any use case deployment):","title":"Endorsement Certificate Pre-Registration"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/59%20Endorsement%20Certificate%20Pre-Registration/#config-requireekcertforhostprovision-true-if-set-to-true-enable-endorsement-certificate-pre-registration-allowed-values-truefalse-verifyquoteforhostregistration-true-if-set-to-true-enforce-endorsement-certificate-pre-registration-allowed-values-truefalse","text":"NOTE When this feature is enabled, Trust Agent provisioning will fail for any hosts whose TPM EC has not been pre-registered. For the Trust Agent Kubernetes daemonset, this means the Trust Agent pods will fail to deploy. If deploying Intel SecL as individual service deployments, it is recommended that the ECs be registered to the HVS before deploying the Trust Agent service. The Trust Agent daemonset will continually re-attempt provisioning after failure, so the EC can also be registered after the entire application (or entire use case deployment) has been deployed. After the EC is registered, simply delete the Trust Agent pod running on the worker node whose EC was just registered. This will trigger a re-deployment of the pod from the daemonset, and the Trust Agent should deploy successfully. This feature is primarily intended for worker nodes added to the cluster after the Intel SecL applciation has been fully deployed. In this case, the TPM EC should be registerd before adding the node to the cluster. Once the node is added, the Trust Agent will deploy successfully as expected. To register a TPM Endorsement Certificate with the HVS, the EC and its issuer need to be retrieved from the TPM, and then provided as part of an API call to the HVS. These steps must be followed for each individual host to be attested, as each TPM Endorsement Certificate is unique.","title":"config:\n  requireEKCertForHostProvision: true # If set to true enable Endorsement Certificate Pre-registration (Allowed values: `true`\\`false`)\n  verifyQuoteForHostRegistration: true # If set to true enforce Endorsement Certificate Pre-registration (Allowed values: `true`\\`false`)\n"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/59%20Endorsement%20Certificate%20Pre-Registration/#extract-the-endorsement-certificate-and-issuer-from-a-tpm","text":"The example below will retrieve the TPM Endorsement Certificate in base64 encoding from a RHEL server: yum install tpm2-tools tpm2_nvread -P hex:<owner secret> -C 0x40000001 -o ekcert.der 0x1c00002 openssl x509 -inform der -in ekcert.der | base64 | tr -d \" \\t\\n\\r\" Next, retrieve the Issuer of the certificate: openssl x509 -inform der -in ekcert.der --text | grep -Po 'CN =\\K.*' NOTE The TPM \"owner secret\" will either be null or a 40 character hex string. Note that if the TPM ownership secret is set to a value, the Trust Agent must be configured to use that same TPM owner secret when it is deployed. This means either: Setting the TPM owner secret to run the above commands and then clearing TPM ownership to use the null secret for the Trust Agent OR Configuring an identical owner secret for all Trust Agent hosts and using that secret both for these commands and for the Trust Agent deployment.","title":"Extract the Endorsement Certificate and Issuer from a TPM"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/59%20Endorsement%20Certificate%20Pre-Registration/#register-the-endorsement-certificate-to-the-hvs","text":"Using the base64-encoded Endorsement Certificate and Issuer, use the following API to register the EC with the HVS: POST https://<HVS IP or hostname>:<HVS port>/hvs/v2/tpm-endorsements { \"certificate\": \"Mjo2ZTowYjo3NDo0YzoKICAgICAgICAgM2M6ZDY6Yjc6NTU6M2M6Mjc6Y2U6OTU6YTY6ODQ6MjU6MmU6MTc6ODM6YjI6OTU6NzY6OGI6CiAgICAgICAgIGQzOjFkOjg0OjE1OjNlOmQ5OmI1Ojk1OjA0OjJkOjRlOmY5OjkzOjVmOjMxOjM3OjQwOmJhOgogICAgICAgICBjOTo1ZDo0OTo5OTowMjpiODo5NzoyNToxZjplYTpkMzpmNTpjYzowMzpkOTpiZTo1MDo5YjoKICAgICAgICAgNzk6NDQ6NmE6Yzg6M2I6YmU6MDc6MjQ6ZmI6YTA6YTE6N2Q6Y2U6NWM6YjM6MmE6NWY6OTE6CiAgICAgICAgIGJhOjgwOmRjOjk3OjhlOmI1OjM5OjJkOmQ3OjcyOjE0OjJjOjM4OmYyOjM1OmU0OjBhOmY5OgogICAgICAgICA5MjpkNjoxNjoyMTpiNjpiZTo0ZjpmODozYjo1MTpkYTpkNjpiMzo1NzoyZDpkNTphMjoxYjoKICAgICAgICAgOTc6N2U6NGE6ZGQ6ZGM6NmQ6ODE6OTM6NDM6YzI6MzI6ZGE6MGM6ZWM6MDY6NzY6Zjg6ZjM6CiAgICAgICAgIGNhOjc5OjdhOmNkOjQ0OjZmOjgxOmUwOmUyOjQ1OjQxOmFkOjgwOmZkOmQ4OmM4OjQ4OjdiOgogICAgICAgICBiODplODo5NzoyNTo2YToyNTo5OTplNjpjMjpmOTpiMDo1YzpjMTpkNzo1Mzo5ZToyNDplOToKICAgICAgICAgNzM6YzY6Nzk6MWU6Mjc6NmQ6ZDI6MmM6NWQ6ZTc6MmQ6ZjI6OGU6ODA6NzY6NTM6ZjI6NDM6CiAgICAgICAgIDJiOmI1OjNhOmY1OjNmOmFhOjVjOjA0OjUxOmFmOjZiOmM0OjEwOmQ2OmRlOmQ3OjFkOmE0OgogICAgICAgICBiNTo5NDo2MTowZDo0Yjo3NDpkZDo4Nzo5MjpjYTo1NDozNjpmODowYjo3ZDpkNTo0NTowNjoKICAgICAgICAgYzk6MWI6ZGE6NDk6MDQ6NGM6ZGU6YmE6MGI6Mzc6Zjk6ZGU6ZTQ6YjY6OGU6MWI6Mjc6ZmI6CiAgICAgICAgIDdiOjA3OmM0OmVjCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlFbkRDQ0E0U2dBd0lCQWdJRWI2QjNnakFOQmdrcWhraUc5dzBCQVFzRkFEQ0JnekVMTUFrR0ExVUVCaE1DClJFVXhJVEFmQmdOVkJBb01HRWx1Wm1sdVpXOXVJRlJsWTJodWIyeHZaMmxsY3lCQlJ6RWFNQmdHQTFVRUN3d1IKVDFCVVNVZEJLRlJOS1NCVVVFMHlMakF4TlRBekJnTlZCQU1NTEVsdVptbHVaVzl1SUU5UVZFbEhRU2hVVFNrZwpVbE5CSUUxaGJuVm1ZV04wZFhKcGJtY2dRMEVnTURBM01CN123VEUxTVRJeU1qRXpNRFkwTkZvWERUTXdNVEl5Ck1qRXpNRFkwTkZvd0FEQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUtYMTh2bmwKaFpqNWlvQnBKL3pwbmlneCtJSlNmS3FSRXE0dkdrRzk4Q1h0bXJJbTZNaWFkN09XQUpNdnZCbzhHWnArMENXTgpqbzZaWG1BbnNaeEUvd2RuUTBZdjA4WFdjOCtQblV1M1BaMFBoK3Q3RXRlaGUxS1dWazl2YllVZUF5TFVuc1FBCkg2cStIRDgzTXQ3bHk0WjBFRDlvUFU1UHpoSGVOSGhkTTM3VWNURVk5MkprTU85eGplODhVTEJnNEJ5RTdIdGgKcU5iUzlsTFZadG0xVk9mOVVUR2Fwem5sdnEyaGM2MlBuZWFWNllZbmdvM1N6ODN0d3o2dy8xVDkvZFV5TnliNgo0THBrUUtPTHcxdTNMYm9icndtT3NBREtBOE56UTdtbEtDd0VDRHZmZmFwRHlVV1hrMzVVc3V0Vkk5cTI1di9yCmUwY29CTnd6b2dJWUxKOENBd0VBQWFPQ0FaZ3dnZ0dVTUZzR0NDc0dBUVVGQndFQkJFOHdUVE123mdnckJnRUYKQlFjd0FvWS9hSFIwY0RvdkwzQnJhUzVwYm1acGJtVnZiaTVqYjIwdlQzQjBhV2RoVW5OaFRXWnlRMEV3TURjdgpUM0IwYVdkaFVuTmhUV1p5UTBFd01EY3VZM0owTUE0R0ExVWREd0VCL3dRRUF3SUFJREJZQmdOVkhSRUJBZjhFClRqQk1wRW93U0RFV01CUUdCV2VCQlFJQkRBdHBaRG8wT1RRMk5UZ3dNREVhTUJnR0JXZUJCUUlDREE5VFRFSWcKT1RZM01DQlVVRTB5TGpBeEVqQVFCZ1ZuZ1FVQ0F3d0hhV1E2TURjeU9EQU1CZ05WSFJNQkFmOEVBakFBTUZBRwpBMVVkSHdSSk1FY3dSYUJEb0VHR1AyaDBkSEE2THk5d2Eya3VhVzVtYVc1bGIyNHVZMjl0TDA5d2RHbG5ZVkp6CllVMW1ja05CTURBM0wwOXdkR2xuWVZKellVMW1ja05CTURBM0xtTnliREFWQmdOVkhTQUVEakFNTUFvR0NDcUMKRkFCRUFSUUJNQjhHQTFVZEl3UVlNQmFBRkp4OTlha2NQVW03NXplTlNyb1MvNDU0b3RkY01CQUdBMVVkSlFRSgpNQWNHQldlQkJ123JNQ0VHQTFVZENRUWFNQmd3RmdZRlo0RUZBaEF4RFRBTERBTXlMakFDQVFBQ0FYUXdEUVlKCktvWklodmNOQVFFTEJRQURnZ0VCQUJBREEzdEhsNnB4Z3FhR2lFYVNiZ3QwVER6V3QxVThKODZWcG9RbExoZUQKc3BWMmk5TWRoQlUrMmJXVkJDMU8rWk5mTVRkQXVzbGRTWmtDdUpjbEgrclQ5Y3dEMmI1UW0zbEVhc2c3dmdjaworNkNoZmM1Y3N5cGZrYnFBM0plT3RUa3QxM0lVTERqeU5lUUsrWkxXRmlHMnZrLzRPMUhhMXJOWExkV2lHNWQrClN0M2NiWUdUUThJeTJnenNCbmI0ODhwNWVzMUViNEhnNGtWQnJZRDkyTWhJZTdqb2x5VnFKWm5td3Ztd1hNSFgKVTU0azZYUEdlUjRuYmRJc1hlY3Q4bzZBZGxQeVF5dTFPdlUvcWx3RVVhOXJ4QkRXM3RjZHBMV1VZUTFMZE4ySAprc3BVTnZnTGZkVkZCc2tiMmtrRVRONjZDemY1M3VTMmpoc24rM3NIeE93PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\", \"comment\": \"Sample EC registration\", \"hardware_uuid\": \"12912393-1231-1231-123e-12363512363b\", \"issuer\": \"C = DE, O = Sample, OU = Sample TPM2.0, CN = Sample\", \"revoked\": false }","title":"Register the Endorsement Certificate to the HVS"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/","text":"Platform Integrity Attestation Platform attestation is the cornerstone use case for ISecL. Platform attestation involves taking measurements of system components during system boot, and then cryptographically verifying that the actual measurements taken matched a set of expected or approved values, ensuring that the measured components were in an acceptable or \" trusted \" state at the time of the last system boot. ISecL leverages the Trusted Compute Group specification for a trusted boot process, extending measurements of platform components to registers in a Trusted Platform Module, and securely generating quotes of those measurements from the TPM for remote comparison to expected values (attestation). This section includes basic REST API examples for these workflows. See the Javadoc for more detailed documentation on REST APIs supported by ISecL. Typical workflows in the datacenter might include: Creating a set of acceptable flavors for attestation with automatic flavor matching that represent the known-good measurements for acceptable BIOS and OS versions in the datacenter Registering hosts for attestation with automatic flavor matching Upgrading hosts in the datacenter to a new BIOS or OS version Removing hosts from the Verification Service Removing flavors Provisioning asset tags to hosts Invalidating asset tags Retrieving current attestation reports Retrieving current host state information Remediating an untrusted attestation Host Registration Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report. Trust Agent Registration via Verification Service API Any Trust Agent or VMware ESXi host/cluster can be registered using a Verification Service API request. Registration can be performed with or without a set of existing Flavors. Rules for Flavor matching can be set by using the Flavor Group in the request; if no Flavor Group is specified, the automatic Flavor Group will be used. See the Flavor Management section for additional details on Flavors, Flavor Groups, and Flavor matching. Sample Call POST https://verification.service.com:30443/hvs/v2/hosts Authorization: Bearer <token> { \"host_name\": \"<hostname of host to be registered>\", \"connection_string\": \"<connection string>\", \"flavorgroup_name\" : \"\", \"description\" : \"<description>\" } Requires the permission hosts:create Sample Call for ESXi Cluster Registration POST https://verification.service.com:30443/hvs/v2/hosts Authorization: Bearer <token> { \" esxi_clusters\": [ { \"connection_string\": \"<password>\", \"cluster_name\": \"<cluster name>\" } ] } Requires the permission esxi_clusters:create Flavor Creation for Automatic Flavor Matching Flavor creation is the process of adding one or more sets of acceptable measurements to the Verification Service database. These measurements correspond to specific system components, and are used as the basis of comparison to generate trust attestations. Flavors can be created manually, or can be imported from an example host. Flavors are automatically matched to hosts based on the Flavorgroup used by the host and the Flavors, and the Flavor Match Policies of the Flavorgroup. The ISecL Verification Service creates a default Flavorgroups during installation called \" automatic \" This Flavorgroup is configured to be used as a pool of all acceptable Flavors in a given environment, and will automatically match the appropriate Flavor parts to the correct host. This Flavorgroup is used by default and is expected to be useful for the majority of deployments. If no Flavorgroup is specified when creating a Flavor, it will be placed in the \" automatic \" Flavorgroup. Flavors are also divided into Flavor parts, which correspond to the PLATFORM , OS , HOST_UNIQUE , IMA , and ASSET_TAG measurements. These can be created and maintained separately (so that users can manage acceptable OS and BIOS versions, rather than entire host configurations). By default, if not specified, the Verification Service will import Flavors as separate Flavor parts, as appropriate for the host type. By using individual Flavor parts, individual versions of OS or PLATFORM measurements can be managed and automatically mapped. Whenever a host changes states (Untrusted, Connected, etc.) the Verification Service will attempt to match appropriate Flavors to that host. If a Flavor is removed or added, all appropriate hosts will be updated to use the new Flavor, or to no longer use the deleted Flavor. Hosts that are currently using a BIOS where that BIOS versions\u2019 PLATFORM Flavor was deleted will now appear Untrusted, for example. This can be used to easily flag as Untrusted hosts that are using software that has been End-Of-Lifed, or perhaps an OS kernel with a known security vulnerability. Note See the Flavor Management section for additional details on how flavors can be managed, and how the Flavor matching engine works. The sample workflow provided here is intended to be an introduction only. Importing a Flavor from a Sample Host POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"PLATFORM\", \"OS\", \"HOST_UNIQUE\"], \"flavorgroup_names\": [] } Requires the permission flavors:create Note The HOST_UNIQUE Flavor parts, used by Red Hat Enterprise Linux and VMWare ESXi host types, MUST be created for each registered host of that type, and should in general be imported from that host. This means that importing the HOST_UNIQUE flavor should always be done for each host registered. To import ONLY the HOST_UNIQUE Flavor part from a host: POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"HOST_UNIQUE\"], flavorgroup_names\": [] } Requires the permission flavors:create Creating a Flavor Manually Flavors can be directly created (rather than importing from a sample host) if the required information is known. If no Flavorgroup is specified, the Flavor will be placed in the automatic group. Note that the label is a required field and must be unique. POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"\", \"flavor_collection\": { \"flavors\": [ { \"meta\": { \"vendor\": \"INTEL\", \"description\": { \"flavor_part\": \"PLATFORM\", \"label\": \"Intel Corporation_SE5C610.86B.01.01.1008.031920151331_TPM2.0\", \"bios_name\": \"Intel Corporation\", \"bios_version\": \"SE5C620.86B.00.01.0004.071220170215\", \"tpm_version\": \"2.0\" } }, \"hardware\": { \"processor_info\": \"\u2026\", \"processor_flags\": \"\u2026\", \"feature\": { \"tpm\": { \"enabled\": true, \"pcr_banks\": [ \"SHA1\", \"SHA256\" ] }, \"txt\": { \"enabled\": true } } }, \"pcrs\": { \"SHA1\": { \"pcr_0\": { \"value\": \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\": { \"value\": \"1ec12004b371e3afd43d04155abde7476a3794fa\", \"event\": ... } Requires the permission flavors:create Creating the Default SOFTWARE Flavor (Linux Only) As part of the new Application Integrity feature added in Intel\u00ae SecL-DC version 1.5, a new default SOFTWARE Flavor part is provided so that the Linux Trust Agent itself can be measured and included in the attestation process. The default SOFTWARE Flavor includes a manifest for the static files and folders in the Trust Agent. The manifest is automatically deployed to each Linux Trust Agent during the provisioning step. Note The Linux Trust Agent must be rebooted after the Provisioning step is completed (typically Provisioning happens during installation, based on whether all of the required variables are set in the trustagent.env file). Rebooting allows the default SOFTWARE Flavor manifest to be measured and extended to the TPM PCRs. If the reboot is not performed, the system will require a SOFTWARE Flavor, but the measurements will not exist, and the system will appear Untrusted. If an un-rebooted host is used to create the SOFTWARE Flavor, the Flavor will be created based on measurements that do not exist, and will fail. The SOFTWARE Flavor part should be created separately from the other Flavor parts. Only one default SOFTWARE Flavor needs to be created for each version of the Linux Trust Agent. If the SOFTWARE Flavor for the same Trust Agent version is imported multiple times, subsequent imports will fail as the Flavor already exists. To import the SOFTWARE Flavor part from a host: POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"SOFTWARE\"], flavorgroup_names\": [] } Requires the permission flavors:create Creating and Provisioning Asset Tags Asset Tags represent a set of key/value pairs that can be associated with a host in hardware. This enables usages around restricting workflows to specific hosts based on tags, which could include location information, compliance tags, etc. ISecL creates Asset Tags by creating a certificate containing the list of key/value pairs to be tagged to the host, with the host\u2019s hardware UUID as the certificate subject. A hash of this certificate is then written to an NVRAM index in the host\u2019s TPM. This value is included in TPM quotes, and can be attested using an Asset Tag flavor that matches up the expected value and the actual key/value pairs. Creating Asset Tag Certificates Asset Tag certificates can be created with a single REST API call, with any number of key/value pairs. Note that one certificate must be created for each host to be tagged, even if they will all be tagged with identical key/value pairs. POST https://verification.service.com:30443/hvs/v2/tag-certificates Authorization: Bearer <token> { \"hardware_uuid\": \"<hardware UUID of host to be tagged>\", \"selection_content\": [ { \"name\": \"<key>\", \"value\": \"<value>\" }, { \"name\": \"<key>\", \"value\": \"<value>\" }, { \"name\": \"<key>\", \"value\": \"<value>\" } ] } Deploying Asset Tags Red Hat Enterprise Linux Asset Tags can be provisioned to a Windows or RHEL host via a REST API request on the Verification Service that will in turn make a request to the Trust Agent on the host to be tagged. POST https://verification.service.com:30443/hvs/v2/rpc/deploy-tag-certificate Authorization: Bearer <token> { \"certificate_id\": \"<certificate ID>\" } VMWare Since VMWare ESXi hosts do not use a Trust Agent, the process for writing Asset Tags to a VMWare host is different from RHEL. A new interface has been added to ESXi via a new esxcli command starting in vSphere 6.5 Update 2 that allows the Asset Tag information to be written to the TPM via a command-line command. The older process is also described below. The high-level workflow for using Asset Tags with VMWare ESXi is: Create the Asset Tag Certificate for the host. Calculate the Certificate Hash value. Provision the Certificate Hash value to the host TPM and reboot Create the Asset Tag Flavor. Note Asset Tag is currently not supported for VMWare hosts using TPM 2.0. Calculate the Certificate Hash Value Only the hash value of the Asset Tag Certificate can be provisioned to the TPM, due to the low size of the NVRAM. Retrieve the Asset Tag Certificate. The Asset Tag Certificate can be retrieved either from the response when the Asset Tag certificate is created, or by using a GET API request to retrieve the certificate: GET https://verification.service.com:30443/hvs/v2/tag-certificates?subjectEqualTo=<HardwareUUID> Authorization: Bearer <token> Copy only the certificate value (this will be the certificate in encoded format) and write the data to a file on a Linux system. Remove any line breaks and save the file. Assuming the filename used is tag-cert use the following to generate the correct hash: cat tag-cert | base64 --decode | openssl dgst -sha1 | awk -F \" \" '{print $2}' This hash value will be what is actually written to the TPM NVRAM. Provision the Certificate Hash to the Host TPM Due to a new feature added in vSphere 6.5 Update 2, the process for provisioning Asset Tags on VMWare ESXi hosts has been significantly improved. Both the old and new process for provisioning Asset Tags is documented below. Intel recommends using vSphere 6.5 Update 2 or later due to the significant difference in the process. vSphere 6.5 Update 2 or Later Starting in ESXi 6.5u2, you can now use SSH to write Asset Tags directly with no need for TPM clears, reboots, PXE, or BIOS access. SSH to the ESXi host using root credentials. Then use the command: ```shell esxcli hardware tpm tag set -d You can use the following command to verify that the tag was written: ```shell esxcli hardware tpm tag get Reboot the host. After rebooting, the TPM PCR 22 will have the measured value of the hash. vSphere 6.5 Update 1 or Older There is no direct interface from VMWare vCenter or ESXi previous to vSphere 6.5 Update 2 that will write the Tag information to the host TPM. Writing Asset Tag information to a TPM requires TPM ownership; VMWare ESXi takes TPM ownership with a secret password at boot time. This means that the process for writing Asset Tags to a VMWare host requires: Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Booting to an OS that has the ability to issue TPM commands Typically the provisioning OS used is Ubuntu or RHEL, booted temporarily using PXE. Writing the Tag information The TPM index 0x40000010 must be defined, and the hash of the Asset Tag certificate must be written to that index. Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Boot back to VMWare ESXi. When the system is rebooted to ESXi, the Trusted Boot process will extend the value to PCR22, and this value can be used during attestation. Creating the Asset Tag Flavor (VMWare ESXi Only) While for RHEL and Windows hosts the Asset Tag Flavor is automatically created during the Tag Provisioning step, for VMWare ESXi hosts the Flavor must be created by importing it from the host after the Tag has been provisioned. POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<VMWare vCenter connection string>\", \"partial_flavor_types\": [\"ASSET_TAG\"] } Once the Asset Tag Flavor is imported, the host can be attested including Asset Tags as normal. Retrieving Current Attestation Reports GET https://verification.service.com:30443/hvs/v2/reports?latestPerHost=true Authorization: Bearer <token> Retrieving Current Host State Information GET https://verification.service.com:30443/hvs/v2/host-status?latestPerHost=true Authorization: Bearer <token> Upgrading Hosts in the Datacenter to a New BIOS or OS Version Software and firmware updates are a common occurrence in the datacenter. Automatic Flavor matching makes this process relatively simple: Create a new Flavor for the new version. This may be manually created or imported directly from a sample host that has already received the upgrade. Be sure to create new Flavors for each TPM version represented in your datacenter. POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"PLATFORM\", \"OS\", \"HOST_UNIQUE\"], flavorgroup_names\": [] } Update the hosts to the new software or firmware version as normal. On the next attestation attempt, the Verification Service will automatically match the updated hosts to the new Flavor. (Optional) If desired, delete the Flavor for the older version after the update is completed. This will cause any hosts that are still using the old version to attest as Untrusted. Which can easily flag hosts that missed the upgrade for remediation. DELETE https://verification.service.com:30443/hvs/v2/flavors/<flavorId> Authorization: Bearer <token> Removing Hosts From the Verification Service Hosts can be deleted at any time. Reports for that host will remain in the Verification Service database for audit purposes. DELETE https://verification.service.com:30443/hvs/v2/hosts/<hostId> Authorization: Bearer <token> The hostId can be retrieved either at the time the host is created, or by searching hosts using the host\u2019s hostname. Removing Flavors Flavors can be deleted; this will cause any hosts that match the deleted Flavor to evaluate as Untrusted. This can be done if, for example, an old BIOS version needs to be retired and should no longer exist in the datacenter. By deleting the PLATFORM Flavor, hosts with the old BIOS version will attest as Untrusted, flagging them for easy remediation. DELETE https://verification.service.com:30443/hvs/v2/flavors/<flavorId> Invalidating Asset Tags Asset Tags can be deleted in two ways. Deleting the ASSET_TAG Flavor part will retain the Asset Tag certificate in the database, but will cause the host using this Tag to no longer use the Asset Tag for attestation (the Tag result will be disregarded and no tags will be exposed in the attestation Reports). DELETE https://verification.service.com:30443/hvs/v2/flavors/<assetTagflavorId> Authorization: Bearer <token> Deleting the actual Asset Tag certificate will remove the certificate from the database, but will not actually affect attestation results (the authority for attestation results is the Flavor). DELETE https://verification.service.com:30443/hvs/v2/tag-certificates/<assetTagCertificateId> Authorization: Bearer <token> Remediating an Untrusted attestation Hosts can become Untrusted for a wide variety of causes. The first clue to finding the root cause for an Untrusted attestation is the attestation Report itself \u2013 the Report will show Trust results for the PLATFORM , OS , HOST_UNIQUE , and ASSET_TAG Flavor parts individually, along with the OVERALL trust. If the Report shows that the PLATFORM Flavor part trust is \u201cfalse\u201d for example, it means that the PLATFORM measurements did not match any Flavors in the host\u2019s Flavorgroup. Untrusted attestation Reports will contain faults that describe the specific attestation rules that were not satisfied. This often shows enough information to describe the cause of the Untrusted status. A fault like RequiredButNotDefined means that a Flavor part is required by the Flavorgroup policy, but no Flavors for that Flavor part exist in the Flavorgroup (for example, generally Flavorgroups should always require a PLATFORM Flavor part; if no PLATFORM Flavors are in the Flavorgroup, hosts in the Flavorgroup will attest with this fault). Other faults include: \"PcrMatchesConstant\" - describes a rule that evaluates whether a TPM PCR has a specific value \"PcrEventLogIntegrity\" - the module event log is replayed during attestation to verify that the resulting measurement matches the actual value in the module PCR. If the replay does not match, it indicates the event log cannot itself be trusted. \"AikCertificateTrusted\" \u2013 This rule evaluates whether the TPM quote was signed by the TPM associated with this host. As part of host registration, the public half of the Attestation Identity Keypair is captured, and this public key is used to verify the signature on TPM quotes from that host. See the Appendix for a full list of the rules evaluated during Attestation. The Flavor matching engine will use the most-similar Flavor for the attestation Report in the case of an Untrusted result. The fault will explain in a general sense what rule the host attestation violated. To remediate, the rule will need to be satisfied. This could mean creating a new Flavor to match the actual observed values, or it could mean that the host has been tampered with and should have its BIOS flashed or OS reloaded. Attestation Reporting Attestation results are delivered in the form of Host Reports. A Report can delivered in several different formats, which can change the type of data returned. The preferred format for Host Reports is a SAML attestation. A SAML-formatted report includes a chain or signatures that provides auditability for the Report. The SAML attestation will include the base trust status of the host, as well as the overall trust for each individual Flavor used in the attestation. The Report will also contain host information, such as TPM version, Operating System name and version, BIOS version, etc. The SAML Report will not, however, contain individual measurements and comparisons of values. This format of the Report is ideal for securely communicating the trust status of a host and for audit history. Attestation Reports can also be retrieved in json format. This format will not include the signature chain provided in the SAML format, but will contain the actual measurement values and expected Flavor values used for comparison. These reports are typically used for remediation, because they will show specifically why a given Host attested as Untrusted. The format for a Report is determined by the Accept header in the request. Attestations are automatically generated in the Verification Service by a repeating scheduled background process. This process looks for Attestation Reports that are close to expiration, and triggers a new Attestation Report. By default, Attestation Reports are valid for 24 hours, and the background refresh process will trigger a new attestation when a Report is found to be within 3 minutes of expiration. Starting in version 4.1, new attestation reports are automatically generated whenever the Trust Agent starts, including when a host reboots. This affects only Trust Agent hosts (and so does not apply to VMware servers). This means that a GET request to find the most recently generated report should reflect any possible changes to the host state from flavor changes, a reboot, etc. Forcing a new report using a POST request will ensure the state is absolutely current, but should not be required for most circumstances. New reports are generated automatically when: The Trust Agent starts (via service stop/start operations, including pod starts on Kubernetes) The Trust Agent host is rebooted The HVS detects that the existing report is nearing its expiration If the Workload Confidentiality feature is used, new reports are generated with every key request A user can either retrieve the most recent currently valid Attestation Report for a given host, or may trigger a new Attestation Report to be generated. Typically, it is best to retrieve an existing Report for performance reasons. Generating a new Attestation Report requires the generation of a new TPM quote from the TPM of the host being attested; TPM performance differs greatly between vendors, and a quote can take anywhere between 2-7 seconds to generate. Sample Call \u2013 Generating a New Attestation Report POST https://verification.service.com:30443/hvs/v2/reports Authorization: Bearer <token> { \"host_name\":\"host-1\" } Requires the permission reports:create Sample Call \u2013 Retrieving an Existing Attestation Report GET https://verification.service.com:30443/hvs/v2/reports?hostName=HostName.server.com Authorization: Bearer <token> Below are the supported criteria options in order of precedence. If no host filter criteria is specified, then results are returned for all active hosts. id - unique UUID of the report entry in the database hostId - unique UUID of the host entry in the database hostName - name of the host hostHardwareId - hardware UUID of the host hostStatus - current state of the host, which supports the following options: CONNECTED - host is in connected state QUEUE - host is in queue to be processed CONNECTION_FAILURE - connection failure UNAUTHORIZED - unauthorized AIK_NOT_PROVISIONED - AIK certificate is not provisioned EC_NOT_PRESENT - endorsement certificate is not present MEASURED_LAUNCH_FAILURE - TXT measured launch failure TPM_OWNERSHIP_FAILURE - TPM ownership failureTPM_NOT_PRESENT - TPM is not present UNSUPPORTED_TPM - unsupported TPM version UNKNOWN - unknown host state Requires the permissions reports:search Other search criteria may also be used. By default, the most recent currently valid attestation is returned. However, different query parameters can be used to retrieve all attestations for a specific host over the last 30 days, for example.","title":"Platform Integrity Attestation"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#platform-integrity-attestation","text":"Platform attestation is the cornerstone use case for ISecL. Platform attestation involves taking measurements of system components during system boot, and then cryptographically verifying that the actual measurements taken matched a set of expected or approved values, ensuring that the measured components were in an acceptable or \" trusted \" state at the time of the last system boot. ISecL leverages the Trusted Compute Group specification for a trusted boot process, extending measurements of platform components to registers in a Trusted Platform Module, and securely generating quotes of those measurements from the TPM for remote comparison to expected values (attestation). This section includes basic REST API examples for these workflows. See the Javadoc for more detailed documentation on REST APIs supported by ISecL. Typical workflows in the datacenter might include: Creating a set of acceptable flavors for attestation with automatic flavor matching that represent the known-good measurements for acceptable BIOS and OS versions in the datacenter Registering hosts for attestation with automatic flavor matching Upgrading hosts in the datacenter to a new BIOS or OS version Removing hosts from the Verification Service Removing flavors Provisioning asset tags to hosts Invalidating asset tags Retrieving current attestation reports Retrieving current host state information Remediating an untrusted attestation","title":"Platform Integrity Attestation"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#host-registration","text":"Registration creates a host record with connectivity details and other host information in the Verification Service database. This host record will be used by the Verification Service to retrieve TPM attestation quotes from the Trust Agent to generate an attestation report.","title":"Host Registration"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#trust-agent","text":"","title":"Trust Agent"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#registration-via-verification-service-api","text":"Any Trust Agent or VMware ESXi host/cluster can be registered using a Verification Service API request. Registration can be performed with or without a set of existing Flavors. Rules for Flavor matching can be set by using the Flavor Group in the request; if no Flavor Group is specified, the automatic Flavor Group will be used. See the Flavor Management section for additional details on Flavors, Flavor Groups, and Flavor matching.","title":"Registration via Verification Service API"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#sample-call","text":"POST https://verification.service.com:30443/hvs/v2/hosts Authorization: Bearer <token> { \"host_name\": \"<hostname of host to be registered>\", \"connection_string\": \"<connection string>\", \"flavorgroup_name\" : \"\", \"description\" : \"<description>\" } Requires the permission hosts:create","title":"Sample Call"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#sample-call-for-esxi-cluster-registration","text":"POST https://verification.service.com:30443/hvs/v2/hosts Authorization: Bearer <token> { \" esxi_clusters\": [ { \"connection_string\": \"<password>\", \"cluster_name\": \"<cluster name>\" } ] } Requires the permission esxi_clusters:create","title":"Sample Call for ESXi Cluster Registration"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#flavor-creation-for-automatic-flavor-matching","text":"Flavor creation is the process of adding one or more sets of acceptable measurements to the Verification Service database. These measurements correspond to specific system components, and are used as the basis of comparison to generate trust attestations. Flavors can be created manually, or can be imported from an example host. Flavors are automatically matched to hosts based on the Flavorgroup used by the host and the Flavors, and the Flavor Match Policies of the Flavorgroup. The ISecL Verification Service creates a default Flavorgroups during installation called \" automatic \" This Flavorgroup is configured to be used as a pool of all acceptable Flavors in a given environment, and will automatically match the appropriate Flavor parts to the correct host. This Flavorgroup is used by default and is expected to be useful for the majority of deployments. If no Flavorgroup is specified when creating a Flavor, it will be placed in the \" automatic \" Flavorgroup. Flavors are also divided into Flavor parts, which correspond to the PLATFORM , OS , HOST_UNIQUE , IMA , and ASSET_TAG measurements. These can be created and maintained separately (so that users can manage acceptable OS and BIOS versions, rather than entire host configurations). By default, if not specified, the Verification Service will import Flavors as separate Flavor parts, as appropriate for the host type. By using individual Flavor parts, individual versions of OS or PLATFORM measurements can be managed and automatically mapped. Whenever a host changes states (Untrusted, Connected, etc.) the Verification Service will attempt to match appropriate Flavors to that host. If a Flavor is removed or added, all appropriate hosts will be updated to use the new Flavor, or to no longer use the deleted Flavor. Hosts that are currently using a BIOS where that BIOS versions\u2019 PLATFORM Flavor was deleted will now appear Untrusted, for example. This can be used to easily flag as Untrusted hosts that are using software that has been End-Of-Lifed, or perhaps an OS kernel with a known security vulnerability. Note See the Flavor Management section for additional details on how flavors can be managed, and how the Flavor matching engine works. The sample workflow provided here is intended to be an introduction only.","title":"Flavor Creation for Automatic Flavor Matching"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#importing-a-flavor-from-a-sample-host","text":"POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"PLATFORM\", \"OS\", \"HOST_UNIQUE\"], \"flavorgroup_names\": [] } Requires the permission flavors:create Note The HOST_UNIQUE Flavor parts, used by Red Hat Enterprise Linux and VMWare ESXi host types, MUST be created for each registered host of that type, and should in general be imported from that host. This means that importing the HOST_UNIQUE flavor should always be done for each host registered. To import ONLY the HOST_UNIQUE Flavor part from a host: POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"HOST_UNIQUE\"], flavorgroup_names\": [] } Requires the permission flavors:create","title":"Importing a Flavor from a Sample Host"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#creating-a-flavor-manually","text":"Flavors can be directly created (rather than importing from a sample host) if the required information is known. If no Flavorgroup is specified, the Flavor will be placed in the automatic group. Note that the label is a required field and must be unique. POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"\", \"flavor_collection\": { \"flavors\": [ { \"meta\": { \"vendor\": \"INTEL\", \"description\": { \"flavor_part\": \"PLATFORM\", \"label\": \"Intel Corporation_SE5C610.86B.01.01.1008.031920151331_TPM2.0\", \"bios_name\": \"Intel Corporation\", \"bios_version\": \"SE5C620.86B.00.01.0004.071220170215\", \"tpm_version\": \"2.0\" } }, \"hardware\": { \"processor_info\": \"\u2026\", \"processor_flags\": \"\u2026\", \"feature\": { \"tpm\": { \"enabled\": true, \"pcr_banks\": [ \"SHA1\", \"SHA256\" ] }, \"txt\": { \"enabled\": true } } }, \"pcrs\": { \"SHA1\": { \"pcr_0\": { \"value\": \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\": { \"value\": \"1ec12004b371e3afd43d04155abde7476a3794fa\", \"event\": ... } Requires the permission flavors:create","title":"Creating a Flavor Manually"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#creating-the-default-software-flavor-linux-only","text":"As part of the new Application Integrity feature added in Intel\u00ae SecL-DC version 1.5, a new default SOFTWARE Flavor part is provided so that the Linux Trust Agent itself can be measured and included in the attestation process. The default SOFTWARE Flavor includes a manifest for the static files and folders in the Trust Agent. The manifest is automatically deployed to each Linux Trust Agent during the provisioning step. Note The Linux Trust Agent must be rebooted after the Provisioning step is completed (typically Provisioning happens during installation, based on whether all of the required variables are set in the trustagent.env file). Rebooting allows the default SOFTWARE Flavor manifest to be measured and extended to the TPM PCRs. If the reboot is not performed, the system will require a SOFTWARE Flavor, but the measurements will not exist, and the system will appear Untrusted. If an un-rebooted host is used to create the SOFTWARE Flavor, the Flavor will be created based on measurements that do not exist, and will fail. The SOFTWARE Flavor part should be created separately from the other Flavor parts. Only one default SOFTWARE Flavor needs to be created for each version of the Linux Trust Agent. If the SOFTWARE Flavor for the same Trust Agent version is imported multiple times, subsequent imports will fail as the Flavor already exists. To import the SOFTWARE Flavor part from a host: POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"SOFTWARE\"], flavorgroup_names\": [] } Requires the permission flavors:create","title":"Creating the Default SOFTWARE Flavor (Linux Only)"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#creating-and-provisioning-asset-tags","text":"Asset Tags represent a set of key/value pairs that can be associated with a host in hardware. This enables usages around restricting workflows to specific hosts based on tags, which could include location information, compliance tags, etc. ISecL creates Asset Tags by creating a certificate containing the list of key/value pairs to be tagged to the host, with the host\u2019s hardware UUID as the certificate subject. A hash of this certificate is then written to an NVRAM index in the host\u2019s TPM. This value is included in TPM quotes, and can be attested using an Asset Tag flavor that matches up the expected value and the actual key/value pairs.","title":"Creating and Provisioning Asset Tags"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#creating-asset-tag-certificates","text":"Asset Tag certificates can be created with a single REST API call, with any number of key/value pairs. Note that one certificate must be created for each host to be tagged, even if they will all be tagged with identical key/value pairs. POST https://verification.service.com:30443/hvs/v2/tag-certificates Authorization: Bearer <token> { \"hardware_uuid\": \"<hardware UUID of host to be tagged>\", \"selection_content\": [ { \"name\": \"<key>\", \"value\": \"<value>\" }, { \"name\": \"<key>\", \"value\": \"<value>\" }, { \"name\": \"<key>\", \"value\": \"<value>\" } ] }","title":"Creating Asset Tag Certificates"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#deploying-asset-tags","text":"","title":"Deploying Asset Tags"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#red-hat-enterprise-linux","text":"Asset Tags can be provisioned to a Windows or RHEL host via a REST API request on the Verification Service that will in turn make a request to the Trust Agent on the host to be tagged. POST https://verification.service.com:30443/hvs/v2/rpc/deploy-tag-certificate Authorization: Bearer <token> { \"certificate_id\": \"<certificate ID>\" }","title":"Red Hat Enterprise Linux"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#vmware","text":"Since VMWare ESXi hosts do not use a Trust Agent, the process for writing Asset Tags to a VMWare host is different from RHEL. A new interface has been added to ESXi via a new esxcli command starting in vSphere 6.5 Update 2 that allows the Asset Tag information to be written to the TPM via a command-line command. The older process is also described below. The high-level workflow for using Asset Tags with VMWare ESXi is: Create the Asset Tag Certificate for the host. Calculate the Certificate Hash value. Provision the Certificate Hash value to the host TPM and reboot Create the Asset Tag Flavor. Note Asset Tag is currently not supported for VMWare hosts using TPM 2.0.","title":"VMWare"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#calculate-the-certificate-hash-value","text":"Only the hash value of the Asset Tag Certificate can be provisioned to the TPM, due to the low size of the NVRAM. Retrieve the Asset Tag Certificate. The Asset Tag Certificate can be retrieved either from the response when the Asset Tag certificate is created, or by using a GET API request to retrieve the certificate: GET https://verification.service.com:30443/hvs/v2/tag-certificates?subjectEqualTo=<HardwareUUID> Authorization: Bearer <token> Copy only the certificate value (this will be the certificate in encoded format) and write the data to a file on a Linux system. Remove any line breaks and save the file. Assuming the filename used is tag-cert use the following to generate the correct hash: cat tag-cert | base64 --decode | openssl dgst -sha1 | awk -F \" \" '{print $2}' This hash value will be what is actually written to the TPM NVRAM.","title":"Calculate the Certificate Hash Value"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#provision-the-certificate-hash-to-the-host-tpm","text":"Due to a new feature added in vSphere 6.5 Update 2, the process for provisioning Asset Tags on VMWare ESXi hosts has been significantly improved. Both the old and new process for provisioning Asset Tags is documented below. Intel recommends using vSphere 6.5 Update 2 or later due to the significant difference in the process.","title":"Provision the Certificate Hash to the Host TPM"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#vsphere-65-update-2-or-later","text":"Starting in ESXi 6.5u2, you can now use SSH to write Asset Tags directly with no need for TPM clears, reboots, PXE, or BIOS access. SSH to the ESXi host using root credentials. Then use the command: ```shell esxcli hardware tpm tag set -d You can use the following command to verify that the tag was written: ```shell esxcli hardware tpm tag get Reboot the host. After rebooting, the TPM PCR 22 will have the measured value of the hash.","title":"vSphere 6.5 Update 2 or Later"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#vsphere-65-update-1-or-older","text":"There is no direct interface from VMWare vCenter or ESXi previous to vSphere 6.5 Update 2 that will write the Tag information to the host TPM. Writing Asset Tag information to a TPM requires TPM ownership; VMWare ESXi takes TPM ownership with a secret password at boot time. This means that the process for writing Asset Tags to a VMWare host requires: Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Booting to an OS that has the ability to issue TPM commands Typically the provisioning OS used is Ubuntu or RHEL, booted temporarily using PXE. Writing the Tag information The TPM index 0x40000010 must be defined, and the hash of the Asset Tag certificate must be written to that index. Clear TPM ownership. This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Reactivate TPM/TXT This can be done via the system BIOS, or using One Touch Activation through the IPMI interface (if enabled by the server OEM). Boot back to VMWare ESXi. When the system is rebooted to ESXi, the Trusted Boot process will extend the value to PCR22, and this value can be used during attestation.","title":"vSphere 6.5 Update 1 or Older"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#creating-the-asset-tag-flavor-vmware-esxi-only","text":"While for RHEL and Windows hosts the Asset Tag Flavor is automatically created during the Tag Provisioning step, for VMWare ESXi hosts the Flavor must be created by importing it from the host after the Tag has been provisioned. POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<VMWare vCenter connection string>\", \"partial_flavor_types\": [\"ASSET_TAG\"] } Once the Asset Tag Flavor is imported, the host can be attested including Asset Tags as normal.","title":"Creating the Asset Tag Flavor (VMWare ESXi Only)"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#retrieving-current-attestation-reports","text":"GET https://verification.service.com:30443/hvs/v2/reports?latestPerHost=true Authorization: Bearer <token>","title":"Retrieving Current Attestation Reports"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#retrieving-current-host-state-information","text":"GET https://verification.service.com:30443/hvs/v2/host-status?latestPerHost=true Authorization: Bearer <token>","title":"Retrieving Current Host State Information"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#upgrading-hosts-in-the-datacenter-to-a-new-bios-or-os-version","text":"Software and firmware updates are a common occurrence in the datacenter. Automatic Flavor matching makes this process relatively simple: Create a new Flavor for the new version. This may be manually created or imported directly from a sample host that has already received the upgrade. Be sure to create new Flavors for each TPM version represented in your datacenter. POST https://verification.service.com:30443/hvs/v2/flavors Authorization: Bearer <token> { \"connection_string\": \"<connection string>\", \"partial_flavor_types\": [\"PLATFORM\", \"OS\", \"HOST_UNIQUE\"], flavorgroup_names\": [] } Update the hosts to the new software or firmware version as normal. On the next attestation attempt, the Verification Service will automatically match the updated hosts to the new Flavor. (Optional) If desired, delete the Flavor for the older version after the update is completed. This will cause any hosts that are still using the old version to attest as Untrusted. Which can easily flag hosts that missed the upgrade for remediation. DELETE https://verification.service.com:30443/hvs/v2/flavors/<flavorId> Authorization: Bearer <token>","title":"Upgrading Hosts in the Datacenter to a New BIOS or OS Version"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#removing-hosts-from-the-verification-service","text":"Hosts can be deleted at any time. Reports for that host will remain in the Verification Service database for audit purposes. DELETE https://verification.service.com:30443/hvs/v2/hosts/<hostId> Authorization: Bearer <token> The hostId can be retrieved either at the time the host is created, or by searching hosts using the host\u2019s hostname.","title":"Removing Hosts From the Verification Service"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#removing-flavors","text":"Flavors can be deleted; this will cause any hosts that match the deleted Flavor to evaluate as Untrusted. This can be done if, for example, an old BIOS version needs to be retired and should no longer exist in the datacenter. By deleting the PLATFORM Flavor, hosts with the old BIOS version will attest as Untrusted, flagging them for easy remediation. DELETE https://verification.service.com:30443/hvs/v2/flavors/<flavorId>","title":"Removing Flavors"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#invalidating-asset-tags","text":"Asset Tags can be deleted in two ways. Deleting the ASSET_TAG Flavor part will retain the Asset Tag certificate in the database, but will cause the host using this Tag to no longer use the Asset Tag for attestation (the Tag result will be disregarded and no tags will be exposed in the attestation Reports). DELETE https://verification.service.com:30443/hvs/v2/flavors/<assetTagflavorId> Authorization: Bearer <token> Deleting the actual Asset Tag certificate will remove the certificate from the database, but will not actually affect attestation results (the authority for attestation results is the Flavor). DELETE https://verification.service.com:30443/hvs/v2/tag-certificates/<assetTagCertificateId> Authorization: Bearer <token>","title":"Invalidating Asset Tags"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#remediating-an-untrusted-attestation","text":"Hosts can become Untrusted for a wide variety of causes. The first clue to finding the root cause for an Untrusted attestation is the attestation Report itself \u2013 the Report will show Trust results for the PLATFORM , OS , HOST_UNIQUE , and ASSET_TAG Flavor parts individually, along with the OVERALL trust. If the Report shows that the PLATFORM Flavor part trust is \u201cfalse\u201d for example, it means that the PLATFORM measurements did not match any Flavors in the host\u2019s Flavorgroup. Untrusted attestation Reports will contain faults that describe the specific attestation rules that were not satisfied. This often shows enough information to describe the cause of the Untrusted status. A fault like RequiredButNotDefined means that a Flavor part is required by the Flavorgroup policy, but no Flavors for that Flavor part exist in the Flavorgroup (for example, generally Flavorgroups should always require a PLATFORM Flavor part; if no PLATFORM Flavors are in the Flavorgroup, hosts in the Flavorgroup will attest with this fault). Other faults include: \"PcrMatchesConstant\" - describes a rule that evaluates whether a TPM PCR has a specific value \"PcrEventLogIntegrity\" - the module event log is replayed during attestation to verify that the resulting measurement matches the actual value in the module PCR. If the replay does not match, it indicates the event log cannot itself be trusted. \"AikCertificateTrusted\" \u2013 This rule evaluates whether the TPM quote was signed by the TPM associated with this host. As part of host registration, the public half of the Attestation Identity Keypair is captured, and this public key is used to verify the signature on TPM quotes from that host. See the Appendix for a full list of the rules evaluated during Attestation. The Flavor matching engine will use the most-similar Flavor for the attestation Report in the case of an Untrusted result. The fault will explain in a general sense what rule the host attestation violated. To remediate, the rule will need to be satisfied. This could mean creating a new Flavor to match the actual observed values, or it could mean that the host has been tampered with and should have its BIOS flashed or OS reloaded.","title":"Remediating an Untrusted attestation"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#attestation-reporting","text":"Attestation results are delivered in the form of Host Reports. A Report can delivered in several different formats, which can change the type of data returned. The preferred format for Host Reports is a SAML attestation. A SAML-formatted report includes a chain or signatures that provides auditability for the Report. The SAML attestation will include the base trust status of the host, as well as the overall trust for each individual Flavor used in the attestation. The Report will also contain host information, such as TPM version, Operating System name and version, BIOS version, etc. The SAML Report will not, however, contain individual measurements and comparisons of values. This format of the Report is ideal for securely communicating the trust status of a host and for audit history. Attestation Reports can also be retrieved in json format. This format will not include the signature chain provided in the SAML format, but will contain the actual measurement values and expected Flavor values used for comparison. These reports are typically used for remediation, because they will show specifically why a given Host attested as Untrusted. The format for a Report is determined by the Accept header in the request. Attestations are automatically generated in the Verification Service by a repeating scheduled background process. This process looks for Attestation Reports that are close to expiration, and triggers a new Attestation Report. By default, Attestation Reports are valid for 24 hours, and the background refresh process will trigger a new attestation when a Report is found to be within 3 minutes of expiration. Starting in version 4.1, new attestation reports are automatically generated whenever the Trust Agent starts, including when a host reboots. This affects only Trust Agent hosts (and so does not apply to VMware servers). This means that a GET request to find the most recently generated report should reflect any possible changes to the host state from flavor changes, a reboot, etc. Forcing a new report using a POST request will ensure the state is absolutely current, but should not be required for most circumstances. New reports are generated automatically when: The Trust Agent starts (via service stop/start operations, including pod starts on Kubernetes) The Trust Agent host is rebooted The HVS detects that the existing report is nearing its expiration If the Workload Confidentiality feature is used, new reports are generated with every key request A user can either retrieve the most recent currently valid Attestation Report for a given host, or may trigger a new Attestation Report to be generated. Typically, it is best to retrieve an existing Report for performance reasons. Generating a new Attestation Report requires the generation of a new TPM quote from the TPM of the host being attested; TPM performance differs greatly between vendors, and a quote can take anywhere between 2-7 seconds to generate.","title":"Attestation Reporting"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#sample-call-generating-a-new-attestation-report","text":"POST https://verification.service.com:30443/hvs/v2/reports Authorization: Bearer <token> { \"host_name\":\"host-1\" } Requires the permission reports:create","title":"Sample Call \u2013 Generating a New Attestation Report"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/60%20Platform%20Integrity%20Attestation/#sample-call-retrieving-an-existing-attestation-report","text":"GET https://verification.service.com:30443/hvs/v2/reports?hostName=HostName.server.com Authorization: Bearer <token> Below are the supported criteria options in order of precedence. If no host filter criteria is specified, then results are returned for all active hosts. id - unique UUID of the report entry in the database hostId - unique UUID of the host entry in the database hostName - name of the host hostHardwareId - hardware UUID of the host hostStatus - current state of the host, which supports the following options: CONNECTED - host is in connected state QUEUE - host is in queue to be processed CONNECTION_FAILURE - connection failure UNAUTHORIZED - unauthorized AIK_NOT_PROVISIONED - AIK certificate is not provisioned EC_NOT_PRESENT - endorsement certificate is not present MEASURED_LAUNCH_FAILURE - TXT measured launch failure TPM_OWNERSHIP_FAILURE - TPM ownership failureTPM_NOT_PRESENT - TPM is not present UNSUPPORTED_TPM - unsupported TPM version UNKNOWN - unknown host state Requires the permissions reports:search Other search criteria may also be used. By default, the most recent currently valid attestation is returned. However, different query parameters can be used to retrieve all attestations for a specific host over the last 30 days, for example.","title":"Sample Call \u2013 Retrieving an Existing Attestation Report"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/65%20Trusted%20Workload%20Placement/","text":"Trusted Workload Placement Intel\u00ae SecL can be integrated with Cloud scheduler services (or potentially other services) to provide additional security controls. For example, by integrating Intel\u00ae SecL with the OpenStack scheduler service, the OpenStack placement service can incorporate the Intel\u00ae SecL security attributes into VM scheduling. The Integration Hub The Integration Hub acts as the integration point between the Verification Service and a third party service. The primary purpose of the Hub is to collect and maintain up-to-date attestation information, and to \u201cpush\u201d that information to the external service. The secondary purpose is to allow for multitenancy, the Verification Service does not allow for permissions to be applied for specific hosts, so a user with the \u201cattestation\u201d role can access all attestations for all hosts. By using separate Integration Hub instances for each Cloud environment (or \"tenant\"), the Hub will push attestations only for the associated hosts to a given tenant\u2019s integration endpoints. For example, Tenant A is using hosts 1-10 for a Kubernetes environment. Tenant B is using hosts 11-15 for a different Kubernetes environment. Two Hub instances must be configured, one managing tenant A's Kubernetes cluster and a second instance managing Tenant B's Kubernetes environment. Each integration Hub will automatically retrieve the list of hosts used by its configured orchestration endpoint, retrieve the attestation reports only for those hosts, and push the attestation attribute information to each configured endpoint. Neither tenant will have access to the Verification Service, and will not be able to see attestation or other host details regarding infrastructure used by other tenants. Different integration endpoints can be added to the Integration Hub through a plugin architecture. By default, the Integration Hub includes plugins for Kubernetes. Integration with Kubernetes Through the use of Custom Resource Definitions for the Kubernetes Control Plane, Intel\u00ae Security Libraries can make Kubernetes aware of Intel\u00ae SecL security attributes and make them available for pod orchestration. In this way, a security-sensitive pod can be launched only on Trusted physical worker nodes, or on physical worker nodes that match specified Asset Tag values. Note This control only applies to pods launched using the Kubernetes scheduler, and these scheduling controls will not affect manually-launched instances where a specific worker node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing Kubernetes interfaces and does not modify Kubernetes code, using only the standard Custom Resource Definition mechanism to add this functionality to the Kubernetes Control Plane. The datacenter owner or Kubernetes administrator is responsible for the security of the Kubernetes workload scheduling process in general, and Intel recommends following published Kubernetes security best practices. Prerequisites Verification Service must be installed and running. Kubernetes Control Plane Node must be installed and running The supported Kubernetes versions are 1.21.4 , 1.22.2 , 1.23.1 and the integration is validated with 1.21.4 , 1.22.2 , 1.23.1 Kubernetes Worker Nodes must be configured as physical hosts and attached to the Control Plane Node Installing the Intel\u00ae SecL Custom Resource Definitions Intel\u00ae SecL uses Custom Resource Definitions to add the ability to base orchestration decisions on Intel\u00ae SecL security attributes to Kubernetes. These CRDs allow Kubernetes administrators to configure pods to require specific security attributes so that the Kubernetes Control Plane Node will schedule those pods only on Worker Nodes that match the specified attributes. Two CRDs are required for integration with Intel\u00ae SecL \u2013 an extension for the Control Plane nodes, and a scheduler extension.The extensions are deployed as a Kubernetes deployment in the isecl namespace. Note Please refer detail steps given for Deploying Individual Services Using Helm section. Configuring Pods to Require Intel\u00ae SecL Attributes (Optional) Verify that the worker nodes have had their Intel\u00ae SecL security attributes populated: kubectl get nodes --show-labels The output should show the Trust staus and any Asset Tags applied to all of the registered Worker Nodes. Add the following to any Pod creation files: spec : affinity : nodeAffinity : requiredDuringSchedulingIgnoredDuringExecution : nodeSelectorTerms : - matchExpressions : - key : isecl.trusted operator : In values : - \"true\" - key : isecl.TAG_Country operator : In values : - CA - US - key : isecl.TAG_Customer operator : In values : - Coke - Pepsi - key : isecl.TAG_State operator : In values : - CA The isecl.trusted key defines the requirement for a Trusted host. Only one of these keys should be used. The isecl.TAG_ keys indicate Asset Tags; if the workload should only launch on hosts with the COUNTRY=US Asset Tag, the pod should be launched with the matchExpression key isecl.TAG_COUNTRY with the value US . All of the matchExpression definitions must be true for a given worker node to launch the pod \u2013 in the example above, the host must be attested as Trusted with Asset Tags Country=US , Customer=Customer1 and State=CA . If the worker node has additional Asset Tags beyond the ones required, the pod will still be able to be launched on that node. However, if one of the specified Tags is missing or has a different value, that worker node will not be used for that pod. Tainting Untrusted Worker Nodes Optionally, the Intel\u00ae SecL Kubernetes controller can be configured to flag worker nodes as tainted to prevent any pods from launching on them. This restriction is applied regardless of whether the pod has a specific trust policy \u2013 if a worker node is flagged as tainted no pods will be launched on that worker. This setting is disabled by default. To enable this setting: Note Please refer detail steps given in Deploying Intel SecL Use Cases Using Helm section. Pulling Trusted Workload Placement helm chart helm pull isecl-helm/Trusted-Workload-Placement --version $VERSION && tar -xzf Trusted-Workload-Placement-$VERSION.tgz Trusted-Workload-Placement/values.yaml Edit the values.yaml file from helm chart for Trusted workload placement usecase. set the following options under isecl-controller: nodeTainting: # If set to true, taints the node which are joined to the k8s cluster. taintRegisteredNodes: true # If set to true, taints the node which are rebooted in the k8s cluster. taintRebootedNodes: true # If set to true, taints the node which has trust tag set to false in node labels. taintUntrustedNode: true Install Trusted Workload Placement Usecase helm chart helm install trusted-workload-placement isecl-helm/Trusted-Workload-Placement --version $VERSION -f Trusted-Workload-Placement/values.yaml --create-namespace -n <namespace> If the TAINT_UNTRUSTED option is used, worker nodes that attest as untrusted will be tainted with the NoExecute flag and unable to launch pods. There may be a delay of up to 2 minutes before the taint is applied as the Integration Hub only retrieves new reports every 2 minutes. If the TAINT_REGISTERED option is used, worker nodes will be tainted by default by the Intel SecL extension controller. The taint will be removed when the Integration Hub sees a Trusted report and updates the controller. Similarly, if the TAINT_REBOOTED option is used, worker nodes will be tainted by default when rebooted by the Intel SecL extension controller. The taint will be removed when the Integration Hub sees a Trusted report and updates the controller. If a worker was previously considered tainted and the untrusted state is resolved, the Intel\u00ae SecL CRDs will remove the tainted flag and the worker will be able to launch pods again. Note Important: The taint rules can potentially result in all available worker nodes becoming tainted due to a mass-reboot, a mistake with Flavor configuration, etc. This is especially relevant for small proof-of-concept deployments that may only use a limited number of worker nodes. Tainted worker nodes will be evacuate any Intel SecL services, which prevents ISecL from being used to remediate the issue. It is strongly recommended to set taint tolerations for each of the Intel SecL management plane services such that they can still run on tainted workers to prevent such a situation. These settings are not required if the taint options are set to \"false\" (default). The following taints are used by the Intel SecL extension controller: \"taints\" : [ { \"effect\" : \"NoSchedule\" , \"key\" : \"untrusted\" , \"value\" : \"true\" }, { \"effect\" : \"NoExecute\" , \"key\" : \"untrusted\" , \"value\" : \"true\" } Pods can be configured to ignore these taints using \"tolerations:\" tolerations : - key : \"untrusted\" operator : \"Equal\" value : \"true\" effect : \"NoSchedule\" - key : \"untrusted\" operator : \"Equal\" value : \"true\" effect : \"NoExecute\" Note that some pods, including the Trust Agent, should use these tolerations even on untrusted workers. The Trust Agent is particularly important because, without the Trust Agent running on the worker to generate a new trust report, the taints will not be cleared.","title":"Trusted Workload Placement"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/65%20Trusted%20Workload%20Placement/#trusted-workload-placement","text":"Intel\u00ae SecL can be integrated with Cloud scheduler services (or potentially other services) to provide additional security controls. For example, by integrating Intel\u00ae SecL with the OpenStack scheduler service, the OpenStack placement service can incorporate the Intel\u00ae SecL security attributes into VM scheduling.","title":"Trusted Workload Placement"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/65%20Trusted%20Workload%20Placement/#the-integration-hub","text":"The Integration Hub acts as the integration point between the Verification Service and a third party service. The primary purpose of the Hub is to collect and maintain up-to-date attestation information, and to \u201cpush\u201d that information to the external service. The secondary purpose is to allow for multitenancy, the Verification Service does not allow for permissions to be applied for specific hosts, so a user with the \u201cattestation\u201d role can access all attestations for all hosts. By using separate Integration Hub instances for each Cloud environment (or \"tenant\"), the Hub will push attestations only for the associated hosts to a given tenant\u2019s integration endpoints. For example, Tenant A is using hosts 1-10 for a Kubernetes environment. Tenant B is using hosts 11-15 for a different Kubernetes environment. Two Hub instances must be configured, one managing tenant A's Kubernetes cluster and a second instance managing Tenant B's Kubernetes environment. Each integration Hub will automatically retrieve the list of hosts used by its configured orchestration endpoint, retrieve the attestation reports only for those hosts, and push the attestation attribute information to each configured endpoint. Neither tenant will have access to the Verification Service, and will not be able to see attestation or other host details regarding infrastructure used by other tenants. Different integration endpoints can be added to the Integration Hub through a plugin architecture. By default, the Integration Hub includes plugins for Kubernetes.","title":"The Integration Hub"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/65%20Trusted%20Workload%20Placement/#integration-with-kubernetes","text":"Through the use of Custom Resource Definitions for the Kubernetes Control Plane, Intel\u00ae Security Libraries can make Kubernetes aware of Intel\u00ae SecL security attributes and make them available for pod orchestration. In this way, a security-sensitive pod can be launched only on Trusted physical worker nodes, or on physical worker nodes that match specified Asset Tag values. Note This control only applies to pods launched using the Kubernetes scheduler, and these scheduling controls will not affect manually-launched instances where a specific worker node is defined (since this does not use the scheduler at all). Intel SecL-DC uses existing Kubernetes interfaces and does not modify Kubernetes code, using only the standard Custom Resource Definition mechanism to add this functionality to the Kubernetes Control Plane. The datacenter owner or Kubernetes administrator is responsible for the security of the Kubernetes workload scheduling process in general, and Intel recommends following published Kubernetes security best practices.","title":"Integration with Kubernetes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/65%20Trusted%20Workload%20Placement/#prerequisites","text":"Verification Service must be installed and running. Kubernetes Control Plane Node must be installed and running The supported Kubernetes versions are 1.21.4 , 1.22.2 , 1.23.1 and the integration is validated with 1.21.4 , 1.22.2 , 1.23.1 Kubernetes Worker Nodes must be configured as physical hosts and attached to the Control Plane Node","title":"Prerequisites"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/65%20Trusted%20Workload%20Placement/#installing-the-intel-secl-custom-resource-definitions","text":"Intel\u00ae SecL uses Custom Resource Definitions to add the ability to base orchestration decisions on Intel\u00ae SecL security attributes to Kubernetes. These CRDs allow Kubernetes administrators to configure pods to require specific security attributes so that the Kubernetes Control Plane Node will schedule those pods only on Worker Nodes that match the specified attributes. Two CRDs are required for integration with Intel\u00ae SecL \u2013 an extension for the Control Plane nodes, and a scheduler extension.The extensions are deployed as a Kubernetes deployment in the isecl namespace. Note Please refer detail steps given for Deploying Individual Services Using Helm section.","title":"Installing the Intel\u00ae SecL Custom Resource Definitions"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/65%20Trusted%20Workload%20Placement/#configuring-pods-to-require-intel-secl-attributes","text":"(Optional) Verify that the worker nodes have had their Intel\u00ae SecL security attributes populated: kubectl get nodes --show-labels The output should show the Trust staus and any Asset Tags applied to all of the registered Worker Nodes. Add the following to any Pod creation files: spec : affinity : nodeAffinity : requiredDuringSchedulingIgnoredDuringExecution : nodeSelectorTerms : - matchExpressions : - key : isecl.trusted operator : In values : - \"true\" - key : isecl.TAG_Country operator : In values : - CA - US - key : isecl.TAG_Customer operator : In values : - Coke - Pepsi - key : isecl.TAG_State operator : In values : - CA The isecl.trusted key defines the requirement for a Trusted host. Only one of these keys should be used. The isecl.TAG_ keys indicate Asset Tags; if the workload should only launch on hosts with the COUNTRY=US Asset Tag, the pod should be launched with the matchExpression key isecl.TAG_COUNTRY with the value US . All of the matchExpression definitions must be true for a given worker node to launch the pod \u2013 in the example above, the host must be attested as Trusted with Asset Tags Country=US , Customer=Customer1 and State=CA . If the worker node has additional Asset Tags beyond the ones required, the pod will still be able to be launched on that node. However, if one of the specified Tags is missing or has a different value, that worker node will not be used for that pod.","title":"Configuring Pods to Require Intel\u00ae SecL Attributes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/65%20Trusted%20Workload%20Placement/#tainting-untrusted-worker-nodes","text":"Optionally, the Intel\u00ae SecL Kubernetes controller can be configured to flag worker nodes as tainted to prevent any pods from launching on them. This restriction is applied regardless of whether the pod has a specific trust policy \u2013 if a worker node is flagged as tainted no pods will be launched on that worker. This setting is disabled by default. To enable this setting: Note Please refer detail steps given in Deploying Intel SecL Use Cases Using Helm section. Pulling Trusted Workload Placement helm chart helm pull isecl-helm/Trusted-Workload-Placement --version $VERSION && tar -xzf Trusted-Workload-Placement-$VERSION.tgz Trusted-Workload-Placement/values.yaml Edit the values.yaml file from helm chart for Trusted workload placement usecase. set the following options under isecl-controller: nodeTainting: # If set to true, taints the node which are joined to the k8s cluster. taintRegisteredNodes: true # If set to true, taints the node which are rebooted in the k8s cluster. taintRebootedNodes: true # If set to true, taints the node which has trust tag set to false in node labels. taintUntrustedNode: true Install Trusted Workload Placement Usecase helm chart helm install trusted-workload-placement isecl-helm/Trusted-Workload-Placement --version $VERSION -f Trusted-Workload-Placement/values.yaml --create-namespace -n <namespace> If the TAINT_UNTRUSTED option is used, worker nodes that attest as untrusted will be tainted with the NoExecute flag and unable to launch pods. There may be a delay of up to 2 minutes before the taint is applied as the Integration Hub only retrieves new reports every 2 minutes. If the TAINT_REGISTERED option is used, worker nodes will be tainted by default by the Intel SecL extension controller. The taint will be removed when the Integration Hub sees a Trusted report and updates the controller. Similarly, if the TAINT_REBOOTED option is used, worker nodes will be tainted by default when rebooted by the Intel SecL extension controller. The taint will be removed when the Integration Hub sees a Trusted report and updates the controller. If a worker was previously considered tainted and the untrusted state is resolved, the Intel\u00ae SecL CRDs will remove the tainted flag and the worker will be able to launch pods again. Note Important: The taint rules can potentially result in all available worker nodes becoming tainted due to a mass-reboot, a mistake with Flavor configuration, etc. This is especially relevant for small proof-of-concept deployments that may only use a limited number of worker nodes. Tainted worker nodes will be evacuate any Intel SecL services, which prevents ISecL from being used to remediate the issue. It is strongly recommended to set taint tolerations for each of the Intel SecL management plane services such that they can still run on tainted workers to prevent such a situation. These settings are not required if the taint options are set to \"false\" (default). The following taints are used by the Intel SecL extension controller: \"taints\" : [ { \"effect\" : \"NoSchedule\" , \"key\" : \"untrusted\" , \"value\" : \"true\" }, { \"effect\" : \"NoExecute\" , \"key\" : \"untrusted\" , \"value\" : \"true\" } Pods can be configured to ignore these taints using \"tolerations:\" tolerations : - key : \"untrusted\" operator : \"Equal\" value : \"true\" effect : \"NoSchedule\" - key : \"untrusted\" operator : \"Equal\" value : \"true\" effect : \"NoExecute\" Note that some pods, including the Trust Agent, should use these tolerations even on untrusted workers. The Trust Agent is particularly important because, without the Trust Agent running on the worker to generate a new trust report, the taints will not be cleared.","title":"Tainting Untrusted Worker Nodes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/","text":"Workload Confidentiality Workload Confidentiality builds upon Platform Attestation to protect data in container images. At its core, this feature is about allowing an image owner to set policies that define the conditions under which their image will be allowed to run; if the policy conditions are met, the decryption key will be provided, and if the conditions are not met, the image will remain encrypted and inaccessible. This provides a level of enforcement beyond integration with orchestrators, and protects sensitive data when the image is at rest. Workload Encryption relies on Platform Attestation to define the security attributes of hosts. When a protected image is launched, the Workload Agent on the host launching the container image will detect the attempt (using a function of the CRI-O container runtime) and use the Image ID to find the Image Flavor on the Workload Service. The Workload Service will retrieve the current trust report for the host launching the image, and use that report to make a key retrieval request to the key transfer URL retrieved from the image flavor. The key transfer URL refers to the URL to the image owner\u2019s Key Broker Service, along with the ID of the key needed. In a typical production deployment, a Cloud Service Provider would enable Intel\u00ae SecL-DC security controls by installing the Intel\u00ae SecL-DC applications (with the exception of the Key Broker and Workload Policy Manager), and configuring each workload host to be Trusted (as per the Platform Integrity Attestation use case). The owner of the workload image(s) to be protected (for example, the end customer of the CSP) must install a Key Broker Service (which must be available for network communication from the Workload Service hosted on the CSP), the Workload Policy Manager, and their own Authentication and Authorization Service and Certificate Management Service (these will manage authentication and certificates for the KBS and WPM). Any number of image owner customers with their own unique KBS/WPM/AAS/CMS deployments may protect images that can be run by a single CSP deployment. The image owner will use the WPM to encrypt any image(s) to be protected; the WPM will automatically create a new image encryption key using the KBS, and will output the encrypted image and an Image Flavor. The image owner can then upload the encrypted image to the CSP\u2019s image storage service, and then upload the Image Flavor to the CSP-hosted WLS. When a compute host at the CSP attempts to launch a protected image, the WLA on the host will detect the launch request, and will issue a key transfer request to the WLS. The WLS will use the image ID to retrieve the Image Flavor, which contains the key retrieval URL for that image. This URL is hosted on the KBS of the image owner (which is why the KBS must be available to network requests from the WLS). The WLS will access the HVS to retrieve the current Platform Integrity Attestation report for the host, and will use this report to make a key transfer request to the KBS at the key transfer URL. The KBS will receive the request, verify that the Platform Integrity Attestation report is signed using a known SAML signing key (verifying that the report comes from a known and trusted HVS), and will then verify that the report shows that the host is trusted. If these requirements are met, the KBS will use the host\u2019s Binding Key (the public half of an asymmetric keypair generated by the host\u2019s TPM and included in the attestation report) as a Key Encryption Key to seal the Image Encryption Key to the TPM of the host that was attested. When the host receives the response to the key request, it will unseal the Image Encryption Key using its TPM. Because the Key Encryption Key is unique to this host\u2019s TPM, only the actual host that was attested will be able to gain access to the image. With the Image Encryption Key, the host\u2019s WLA will create the appropriate encrypted volume(s) for the image and begin the launch as normal. The WLA does not retain the key on disk; if/when the host is rebooted or the WLA is restarted, restarting the workloads based on protected images will trigger new key requests based on new Platform Integrity Attestation reports. In this way, if a host is compromised in a method detectable by the Platform Integrity feature, protected images will be unable to launch on this server. Container Confidentiality Container Confidentiality with Cri-o and Skopeo Prerequisites Container Confidentiality with Cri-o runtime requires cri-o with version >=1.21 and skopeo version >=1.3.0 Kubernetes must be configured to use Cri-o Platform Integrity Attestation must be configured for the physical Kubernetes Worker Nodes. This includes, at minimum, the CMS; AAS; HVS; KBS; WPM; and the Trust Agent must be installed on each Worker Node. See the Installation section for details installing these services. Each Kubernetes Worker Node should be Trusted in the attestation reports generated by the HVS. Only physical Worker Nodes are supported at this time. The Workload Policy Manager must be installed and available Note Its recommended to not to not use a proxy to access container registries. A local registry mirror is recommended instead. Configure Ocicrypt on all Worker Nodes While Help will install the Workload Agent, each worker node will ned to be configured to use the WLA as a key provider in /etc/ocicrypt-wpm.json : { \"key-providers\" : { \"isecl\" : { \"grpc\" : \"unix:///var/run/workload-agent/wlagent.sock\" } } } Workflow Image encryption Configure the ocicrypt config file /etc/ocicrypt-wpm.json as below on the system(s) running the WPM: { \"key-providers\" : { \"isecl\" : { \"cmd\" : { \"path\" : \"/usr/bin/wpm\" , \"args\" : [ \"get-ocicrypt-wrappedkey\" ] } } } } Add the variable OCICRYPT_KEYPROVIDER_CONFIG=/etc/ocicrypt-wlagent.json in /etc/sysconfig/crio Restart CRI-O systemctl daemon-reload systemctl restart crio Encrypting the Image with Skopeo $OCICRYPT_KEYPROVIDER_CONFIG = /etc/ocicrypt-wpm.json skopeo copy --encryption-key provider:isecl:any source-image destination-image Alternatively, encrypt the image and push it to a registry in a single step: $ OCICRYPT_KEYPROVIDER_CONFIG = /etc/ocicrypt-wpm.json skopeo copy --encryption-key provider:isecl:any oci:custom-image:latest docker://registry.server.com:5000/custom-image:enc Examples Copy a container image from a registry to a local server: $ skopeo copy docker://docker.io/library/nginx:latest oci:nginx_local To encrypt an image (this will allow the image to run only on Trusted platforms): $ OCICRYPT_KEYPROVIDER_CONFIG = /etc/ocicrypt-wpm.json skopeo copy --encryption-key provider:isecl:any oci:nginx_local oci:nginx_secl_enc To copy a local image to a remote registry: $ skopeo copy oci:nginx_secl_enc docker://registry.server.com:5000/nginx_secl_enc:latest Prepare an Image Convert the image to an OCI image using Skopeo: $ skopeo copy docker-daemon:custom-image:latest oci:custom-image:latest Encrypt the image $ OCICRYPT_KEYPROVIDER_CONFIG = /etc/ocicrypt-wpm.json skopeo copy --encryption-key provider:isecl:any oci:custom-image:latest oci:custom-image:enc Push the image to a registry: $ skopeo copy oci:custom-image:enc docker://Registry.server.com:5000/custom-image:enc Pulling and Encrypting a Container Image Skopeo can be used to pull a container image from an external registry (a private Docker registry is used in the examples above). This image may be encrypted already, but if you wish to pull an image for encryption, it must be in plaintext format. Skopeo has a wrapper that can interact with the Workload Policy Manager. When trying to encrypt an image, Skopeo calls the WPM CLI fetch-key command. In the command, the KBS is called in order to create a new key. The return from the KBS includes the key retrieval URL, which is used when trying to decrypt. After the key is returned to the WPM, the WPM passes the key back to Skopeo. Skopeo uses the key to encrypt the image layer by layer as well as associate the encrypted image with the key's URL. Skopeo then uploads the encrypted image to a remote container registry. Importing Verification Service Certificates After installing the Key Broker, the Key Broker must import the SAML and PrivacyCA certificates from any Verification Service(s) it will trust. This provides the Key Broker a way to ensure that only attestations that come from a \u201cknown\u201d Verification Service. The SAML and PrivacyCA certificates needed can be found on the Verification Service. Importing a SAML certificate Retrieve the HVS SAML certificate: GET https://<HVS IP or hostname>:<HVS port>/hvs/v2/ca-certificates?domain=saml accept: application/x-pem-file Use the SAML certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:<KBS port>/kbs/v1/saml-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIID9TCCAl2gAwIBAgIBCTANBgkqhkiG9w0BAQwFADBQMQswCQYDVQQGEwJVUzEL MAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEXMBUGA1UE AxMOQ01TIFNpZ25pbmcgQ0EwHhcNMTkxMjExMTkzOTU1WhcNMjAxMjExMTkzOTU1 WjAYMRYwFAYDVQQDEw1tdHdpbHNvbi1zYW1sMIIBojANBgkqhkiG9w0BAQEFAAOC AY8AMIIBigKCAYEArbrDpzR4Ry0MVhSJULHZoiVL020YqtyRH+R2NlVXTpJzqmEA Ep2utfcP8+mSCT7DLpGBO6KACPCz3pmqj3wZyqZNTrG7IF2Z4Fuf641fPcxA3WVH 3lXz0L5Ep4jOUdfT8kj4hHxHJVJhDsW4J2fds2RGnn8bZG/QbmmGNRfqdxht0zMh 63ik8jBWNWHxYSRbck27FyTj9hDU+z+rFfIdNv1SiQ9FyndgOytK/m7ijoAetkSF bCsauzUL7DFdRzTmB2GCF/Zd957V51GNpvan6uwqDTL6T4NFX2sqoVduu/WIyTpO /6D2aA741CR3Bmk9945TSeDKZNz2HkihuE+d8ES68W1t4rvox/Noi74e0k35AqcQ Q3P0DZpD+XaRapz5CHcOPwOpZ3A/8wN2f+CS2HqDx8FwABkh7l8OdiIWs8+TDQZe 1x4e/50jE/8zMR/tsAy1EXkm3OTOVxih0u18J84x4OT+rHAIcoQ+TOJ40aHrWGHg kVCfiCUzYYT/W/RBAgMBAAGjEjAQMA4GA1UdDwEB/wQEAwIGwDANBgkqhkiG9w0B AQwFAAOCAYEAP/ABHdPquBNrMOCU+v7SfMLmIfJymA15mCorMEiKZ1d7oNnoPP0G pfyRA4TUiyFLCOLi4jIXWuu4Lt6RUz6bnzn8JRWD5ocIJGGxWjOA66xyS3o9iG7G otOh1pzp5wlwPG7r8ZJ7Q26J+NuHpN1GW5U5Vjww1J9rEKnsKp45QHkG2nXEujdx YXmKXtEG2gOMVjaLiqromf6VxbdNoKHZGEfqU3H5ymMgqIrnXl3MivA30CymCDLl rJGRQSwOfzywPCnUOAVptBwLs2kwOtdvnq+BTK3q/dKKoNiFURj/mQ70egquW9ly TOkYivmKqMZxZlq0//cre4K35aCW3ZArzGgNM8Pk0V/hZp8ZHrWLNAdo4w/Pj1oC Yq7R0RQ8jQerkewYBfrv3O3e9c22h48fsHnun6F3sbcDjws/sWJIOcrPyqJE26HY DmIKpvjqc0jI31ndBBwkb+RIBFkz1Ycob9rsW16uVqbjBFDjJ5QKOdXxhqulyboa JAF53vmU+1jE -----END CERTIFICATE----- Importing a PrivacyCA Certificate Use OpenSSL to display the PrivacyCA certificate content: GET https://<HVS IP or hostname>:<KVS port>/hvs/v2/ca-certificates?domain=root accept: application/x-pem-file Use the PrivacyCA certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:9443/kbs/v1/tpm-identity-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIIHaDCCBdCgAwIBAgIGAW72eWZ9MA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMT EG10d2lsc29uLXBjYS1haWswHhcNMTkxMjExMTkzOTQxWhcNMjkxMjEwMTkzOTQx WjAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlrMIIBojANBgkqhkiG9w0BAQEF AAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4YiHtueWBdW0sibtH1QRSbI KtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSUnn07xjWJRP1EcvSaufO1 MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwuattxTelpmgucDp98MqW/ uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337yx3VBK59Dwtsmfsrd5tMn IuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y3saXeNBDg9J363imOHIH haP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZloxJzcNgtimQw3RbyrB3C KijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwCQNnBP4UJXwAflO7COG7P mpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqvtTVtFX+oRWRsgaEdxKf7 LJx4aIjXwP2s6PIiOSalAgMBAAGjggOwMIIDrDCCAbMGA1UdDgSCAaoEggGmMIIB ojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4Yi HtueWBdW0sibtH1QRSbIKtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSU nn07xjWJRP1EcvSaufO1MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwu attxTelpmgucDp98MqW/uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337y x3VBK59Dwtsmfsrd5tMnIuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y 3saXeNBDg9J363imOHIHhaP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZl oxJzcNgtimQw3RbyrB3CKijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwC QNnBP4UJXwAflO7COG7Pmpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqv tTVtFX+oRWRsgaEdxKf7LJx4aIjXwP2s6PIiOSalAgMBAAEwDwYDVR0TAQH/BAUw AwEB/zCCAeAGA1UdIwSCAdcwggHTgIIBpjCCAaIwDQYJKoZIhvcNAQEBBQADggGP ADCCAYoCggGBAJlqga9mIsnGWxf0IBW8U6+GIh7bnlgXVtLIm7R9UEUmyCrZGxbJ q+iekIiwWl3BeylTeg2g9I+bFOHGUrbaisJUlJ59O8Y1iUT9RHL0mrnztTGq3sIA aRUHCNk+mk7Nc4le+waCs9JFrXlEc9Y09SksLmrbcU3paZoLnA6ffDKlv7lrJYh1 FcYedSUxNcp+1X9UAls92vjQx/fC4K+ZLN9+8sd1QSufQ8LbJn7K3ebTJyLlfScN GNlBHQ4tNOBVyOKuuDLDKVgO7eTjUQFPlTVNGN7Gl3jQQ4PSd+t4pjhyB4Wj/IsQ 4amfl2/0xmn4BXhBwZCU7+m1qQ6qHW1lQ24GZaMSc3DYLYpkMN0W8qwdwioo5RKO QUGOmznHTBu4Aqu+7v32zry2+SF80vGQ6cLsAkDZwT+FCV8AH5Tuwjhuz5qY/W01 dTrRYj7WBXOCXRnWn9T5ds1hnkdHNzyM2EMar7U1bRV/qEVkbIGhHcSn+yyceGiI 18D9rOjyIjkmpQIDAQABoR+kHTAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlr ggYBbvZ5Zn0wDQYJKoZIhvcNAQELBQADggGBAC3PEB8Av0PBJgrJMxzMbuf1FCdD AUrfYmP81Hs0/v70efviMEF2s3GAyLHD9v+1nNFCQrjcNCar18k45BlcodBEmxKA DZoioFykRtlha6ByVvuN6wD93KQbKsXPKhUp8X67fLuOcQgfc3BoDRlw/Ha1Ib6X fliE+rQzLCOgClK7ZdTwl9Ok0VbR7Mbal/xShIqr2WopjBtal9p4RsnIxilTHI+m qzbV8zvZXYfYtEb3MMMT5EnjIV8O498KKOjxohD2vqaxqItd58pOi6z/q5f4pLHc DvdsJecJEoWb2bxWQdBgthMjX6AUV/B5G/LTfaPwVbTLdEc+S6Nrobf/TFYV0pvG OzF3ltYag0fupuYJ991s/JhVwgJhCGq7YourDGkNIWAjt0Z2FWuQKnxWvmResgkS WTeXt+1HCFSo5WcAZWV8R9FYv7tzFxPY8aoLj82sgrOE4IwRqaA8KMbq3anF4RCk +D8k6etqMcNHFS8Fj6GlCd80mb4Q3sxuCiBvZw== -----END CERTIFICATE----- Launching an Encrypted Container Image Containers of the protected images can now be launched as normal using Kubernetes pods and deployments. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the Crio Container is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided. Pull encrypted image using command line from the each WLA node crictl pull <Registry-IP>:5000/<image-name>:<tag>","title":"Workload Confidentiality"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#workload-confidentiality","text":"Workload Confidentiality builds upon Platform Attestation to protect data in container images. At its core, this feature is about allowing an image owner to set policies that define the conditions under which their image will be allowed to run; if the policy conditions are met, the decryption key will be provided, and if the conditions are not met, the image will remain encrypted and inaccessible. This provides a level of enforcement beyond integration with orchestrators, and protects sensitive data when the image is at rest. Workload Encryption relies on Platform Attestation to define the security attributes of hosts. When a protected image is launched, the Workload Agent on the host launching the container image will detect the attempt (using a function of the CRI-O container runtime) and use the Image ID to find the Image Flavor on the Workload Service. The Workload Service will retrieve the current trust report for the host launching the image, and use that report to make a key retrieval request to the key transfer URL retrieved from the image flavor. The key transfer URL refers to the URL to the image owner\u2019s Key Broker Service, along with the ID of the key needed. In a typical production deployment, a Cloud Service Provider would enable Intel\u00ae SecL-DC security controls by installing the Intel\u00ae SecL-DC applications (with the exception of the Key Broker and Workload Policy Manager), and configuring each workload host to be Trusted (as per the Platform Integrity Attestation use case). The owner of the workload image(s) to be protected (for example, the end customer of the CSP) must install a Key Broker Service (which must be available for network communication from the Workload Service hosted on the CSP), the Workload Policy Manager, and their own Authentication and Authorization Service and Certificate Management Service (these will manage authentication and certificates for the KBS and WPM). Any number of image owner customers with their own unique KBS/WPM/AAS/CMS deployments may protect images that can be run by a single CSP deployment. The image owner will use the WPM to encrypt any image(s) to be protected; the WPM will automatically create a new image encryption key using the KBS, and will output the encrypted image and an Image Flavor. The image owner can then upload the encrypted image to the CSP\u2019s image storage service, and then upload the Image Flavor to the CSP-hosted WLS. When a compute host at the CSP attempts to launch a protected image, the WLA on the host will detect the launch request, and will issue a key transfer request to the WLS. The WLS will use the image ID to retrieve the Image Flavor, which contains the key retrieval URL for that image. This URL is hosted on the KBS of the image owner (which is why the KBS must be available to network requests from the WLS). The WLS will access the HVS to retrieve the current Platform Integrity Attestation report for the host, and will use this report to make a key transfer request to the KBS at the key transfer URL. The KBS will receive the request, verify that the Platform Integrity Attestation report is signed using a known SAML signing key (verifying that the report comes from a known and trusted HVS), and will then verify that the report shows that the host is trusted. If these requirements are met, the KBS will use the host\u2019s Binding Key (the public half of an asymmetric keypair generated by the host\u2019s TPM and included in the attestation report) as a Key Encryption Key to seal the Image Encryption Key to the TPM of the host that was attested. When the host receives the response to the key request, it will unseal the Image Encryption Key using its TPM. Because the Key Encryption Key is unique to this host\u2019s TPM, only the actual host that was attested will be able to gain access to the image. With the Image Encryption Key, the host\u2019s WLA will create the appropriate encrypted volume(s) for the image and begin the launch as normal. The WLA does not retain the key on disk; if/when the host is rebooted or the WLA is restarted, restarting the workloads based on protected images will trigger new key requests based on new Platform Integrity Attestation reports. In this way, if a host is compromised in a method detectable by the Platform Integrity feature, protected images will be unable to launch on this server.","title":"Workload Confidentiality"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#container-confidentiality","text":"","title":"Container Confidentiality"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#container-confidentiality-with-cri-o-and-skopeo","text":"","title":"Container Confidentiality with Cri-o and Skopeo"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#prerequisites","text":"Container Confidentiality with Cri-o runtime requires cri-o with version >=1.21 and skopeo version >=1.3.0 Kubernetes must be configured to use Cri-o Platform Integrity Attestation must be configured for the physical Kubernetes Worker Nodes. This includes, at minimum, the CMS; AAS; HVS; KBS; WPM; and the Trust Agent must be installed on each Worker Node. See the Installation section for details installing these services. Each Kubernetes Worker Node should be Trusted in the attestation reports generated by the HVS. Only physical Worker Nodes are supported at this time. The Workload Policy Manager must be installed and available Note Its recommended to not to not use a proxy to access container registries. A local registry mirror is recommended instead.","title":"Prerequisites"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#configure-ocicrypt-on-all-worker-nodes","text":"While Help will install the Workload Agent, each worker node will ned to be configured to use the WLA as a key provider in /etc/ocicrypt-wpm.json : { \"key-providers\" : { \"isecl\" : { \"grpc\" : \"unix:///var/run/workload-agent/wlagent.sock\" } } }","title":"Configure Ocicrypt on all Worker Nodes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#workflow","text":"","title":"Workflow"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#image-encryption","text":"Configure the ocicrypt config file /etc/ocicrypt-wpm.json as below on the system(s) running the WPM: { \"key-providers\" : { \"isecl\" : { \"cmd\" : { \"path\" : \"/usr/bin/wpm\" , \"args\" : [ \"get-ocicrypt-wrappedkey\" ] } } } } Add the variable OCICRYPT_KEYPROVIDER_CONFIG=/etc/ocicrypt-wlagent.json in /etc/sysconfig/crio Restart CRI-O systemctl daemon-reload systemctl restart crio","title":"Image encryption"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#encrypting-the-image-with-skopeo","text":"$OCICRYPT_KEYPROVIDER_CONFIG = /etc/ocicrypt-wpm.json skopeo copy --encryption-key provider:isecl:any source-image destination-image Alternatively, encrypt the image and push it to a registry in a single step: $ OCICRYPT_KEYPROVIDER_CONFIG = /etc/ocicrypt-wpm.json skopeo copy --encryption-key provider:isecl:any oci:custom-image:latest docker://registry.server.com:5000/custom-image:enc","title":"Encrypting the Image with Skopeo"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#examples","text":"Copy a container image from a registry to a local server: $ skopeo copy docker://docker.io/library/nginx:latest oci:nginx_local To encrypt an image (this will allow the image to run only on Trusted platforms): $ OCICRYPT_KEYPROVIDER_CONFIG = /etc/ocicrypt-wpm.json skopeo copy --encryption-key provider:isecl:any oci:nginx_local oci:nginx_secl_enc To copy a local image to a remote registry: $ skopeo copy oci:nginx_secl_enc docker://registry.server.com:5000/nginx_secl_enc:latest","title":"Examples"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#prepare-an-image","text":"Convert the image to an OCI image using Skopeo: $ skopeo copy docker-daemon:custom-image:latest oci:custom-image:latest Encrypt the image $ OCICRYPT_KEYPROVIDER_CONFIG = /etc/ocicrypt-wpm.json skopeo copy --encryption-key provider:isecl:any oci:custom-image:latest oci:custom-image:enc Push the image to a registry: $ skopeo copy oci:custom-image:enc docker://Registry.server.com:5000/custom-image:enc","title":"Prepare an Image"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#pulling-and-encrypting-a-container-image","text":"Skopeo can be used to pull a container image from an external registry (a private Docker registry is used in the examples above). This image may be encrypted already, but if you wish to pull an image for encryption, it must be in plaintext format. Skopeo has a wrapper that can interact with the Workload Policy Manager. When trying to encrypt an image, Skopeo calls the WPM CLI fetch-key command. In the command, the KBS is called in order to create a new key. The return from the KBS includes the key retrieval URL, which is used when trying to decrypt. After the key is returned to the WPM, the WPM passes the key back to Skopeo. Skopeo uses the key to encrypt the image layer by layer as well as associate the encrypted image with the key's URL. Skopeo then uploads the encrypted image to a remote container registry.","title":"Pulling and Encrypting a Container Image"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#importing-verification-service-certificates","text":"After installing the Key Broker, the Key Broker must import the SAML and PrivacyCA certificates from any Verification Service(s) it will trust. This provides the Key Broker a way to ensure that only attestations that come from a \u201cknown\u201d Verification Service. The SAML and PrivacyCA certificates needed can be found on the Verification Service.","title":"Importing Verification Service Certificates"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#importing-a-saml-certificate","text":"Retrieve the HVS SAML certificate: GET https://<HVS IP or hostname>:<HVS port>/hvs/v2/ca-certificates?domain=saml accept: application/x-pem-file Use the SAML certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:<KBS port>/kbs/v1/saml-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIID9TCCAl2gAwIBAgIBCTANBgkqhkiG9w0BAQwFADBQMQswCQYDVQQGEwJVUzEL MAkGA1UECBMCU0YxCzAJBgNVBAcTAlNDMQ4wDAYDVQQKEwVJTlRFTDEXMBUGA1UE AxMOQ01TIFNpZ25pbmcgQ0EwHhcNMTkxMjExMTkzOTU1WhcNMjAxMjExMTkzOTU1 WjAYMRYwFAYDVQQDEw1tdHdpbHNvbi1zYW1sMIIBojANBgkqhkiG9w0BAQEFAAOC AY8AMIIBigKCAYEArbrDpzR4Ry0MVhSJULHZoiVL020YqtyRH+R2NlVXTpJzqmEA Ep2utfcP8+mSCT7DLpGBO6KACPCz3pmqj3wZyqZNTrG7IF2Z4Fuf641fPcxA3WVH 3lXz0L5Ep4jOUdfT8kj4hHxHJVJhDsW4J2fds2RGnn8bZG/QbmmGNRfqdxht0zMh 63ik8jBWNWHxYSRbck27FyTj9hDU+z+rFfIdNv1SiQ9FyndgOytK/m7ijoAetkSF bCsauzUL7DFdRzTmB2GCF/Zd957V51GNpvan6uwqDTL6T4NFX2sqoVduu/WIyTpO /6D2aA741CR3Bmk9945TSeDKZNz2HkihuE+d8ES68W1t4rvox/Noi74e0k35AqcQ Q3P0DZpD+XaRapz5CHcOPwOpZ3A/8wN2f+CS2HqDx8FwABkh7l8OdiIWs8+TDQZe 1x4e/50jE/8zMR/tsAy1EXkm3OTOVxih0u18J84x4OT+rHAIcoQ+TOJ40aHrWGHg kVCfiCUzYYT/W/RBAgMBAAGjEjAQMA4GA1UdDwEB/wQEAwIGwDANBgkqhkiG9w0B AQwFAAOCAYEAP/ABHdPquBNrMOCU+v7SfMLmIfJymA15mCorMEiKZ1d7oNnoPP0G pfyRA4TUiyFLCOLi4jIXWuu4Lt6RUz6bnzn8JRWD5ocIJGGxWjOA66xyS3o9iG7G otOh1pzp5wlwPG7r8ZJ7Q26J+NuHpN1GW5U5Vjww1J9rEKnsKp45QHkG2nXEujdx YXmKXtEG2gOMVjaLiqromf6VxbdNoKHZGEfqU3H5ymMgqIrnXl3MivA30CymCDLl rJGRQSwOfzywPCnUOAVptBwLs2kwOtdvnq+BTK3q/dKKoNiFURj/mQ70egquW9ly TOkYivmKqMZxZlq0//cre4K35aCW3ZArzGgNM8Pk0V/hZp8ZHrWLNAdo4w/Pj1oC Yq7R0RQ8jQerkewYBfrv3O3e9c22h48fsHnun6F3sbcDjws/sWJIOcrPyqJE26HY DmIKpvjqc0jI31ndBBwkb+RIBFkz1Ycob9rsW16uVqbjBFDjJ5QKOdXxhqulyboa JAF53vmU+1jE -----END CERTIFICATE-----","title":"Importing a SAML certificate"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#importing-a-privacyca-certificate","text":"Use OpenSSL to display the PrivacyCA certificate content: GET https://<HVS IP or hostname>:<KVS port>/hvs/v2/ca-certificates?domain=root accept: application/x-pem-file Use the PrivacyCA certificate output in the following POST call to the Key Broker: POST https://<Key Broker IP address or hostname>:9443/kbs/v1/tpm-identity-certificates Content-Type: application/x-pem-file -----BEGIN CERTIFICATE----- MIIHaDCCBdCgAwIBAgIGAW72eWZ9MA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAMT EG10d2lsc29uLXBjYS1haWswHhcNMTkxMjExMTkzOTQxWhcNMjkxMjEwMTkzOTQx WjAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlrMIIBojANBgkqhkiG9w0BAQEF AAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4YiHtueWBdW0sibtH1QRSbI KtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSUnn07xjWJRP1EcvSaufO1 MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwuattxTelpmgucDp98MqW/ uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337yx3VBK59Dwtsmfsrd5tMn IuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y3saXeNBDg9J363imOHIH haP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZloxJzcNgtimQw3RbyrB3C KijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwCQNnBP4UJXwAflO7COG7P mpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqvtTVtFX+oRWRsgaEdxKf7 LJx4aIjXwP2s6PIiOSalAgMBAAGjggOwMIIDrDCCAbMGA1UdDgSCAaoEggGmMIIB ojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAmWqBr2YiycZbF/QgFbxTr4Yi HtueWBdW0sibtH1QRSbIKtkbFsmr6J6QiLBaXcF7KVN6DaD0j5sU4cZSttqKwlSU nn07xjWJRP1EcvSaufO1MarewgBpFQcI2T6aTs1ziV77BoKz0kWteURz1jT1KSwu attxTelpmgucDp98MqW/uWsliHUVxh51JTE1yn7Vf1QCWz3a+NDH98Lgr5ks337y x3VBK59Dwtsmfsrd5tMnIuV9Jw0Y2UEdDi004FXI4q64MsMpWA7t5ONRAU+VNU0Y 3saXeNBDg9J363imOHIHhaP8ixDhqZ+Xb/TGafgFeEHBkJTv6bWpDqodbWVDbgZl oxJzcNgtimQw3RbyrB3CKijlEo5BQY6bOcdMG7gCq77u/fbOvLb5IXzS8ZDpwuwC QNnBP4UJXwAflO7COG7Pmpj9bTV1OtFiPtYFc4JdGdaf1Pl2zWGeR0c3PIzYQxqv tTVtFX+oRWRsgaEdxKf7LJx4aIjXwP2s6PIiOSalAgMBAAEwDwYDVR0TAQH/BAUw AwEB/zCCAeAGA1UdIwSCAdcwggHTgIIBpjCCAaIwDQYJKoZIhvcNAQEBBQADggGP ADCCAYoCggGBAJlqga9mIsnGWxf0IBW8U6+GIh7bnlgXVtLIm7R9UEUmyCrZGxbJ q+iekIiwWl3BeylTeg2g9I+bFOHGUrbaisJUlJ59O8Y1iUT9RHL0mrnztTGq3sIA aRUHCNk+mk7Nc4le+waCs9JFrXlEc9Y09SksLmrbcU3paZoLnA6ffDKlv7lrJYh1 FcYedSUxNcp+1X9UAls92vjQx/fC4K+ZLN9+8sd1QSufQ8LbJn7K3ebTJyLlfScN GNlBHQ4tNOBVyOKuuDLDKVgO7eTjUQFPlTVNGN7Gl3jQQ4PSd+t4pjhyB4Wj/IsQ 4amfl2/0xmn4BXhBwZCU7+m1qQ6qHW1lQ24GZaMSc3DYLYpkMN0W8qwdwioo5RKO QUGOmznHTBu4Aqu+7v32zry2+SF80vGQ6cLsAkDZwT+FCV8AH5Tuwjhuz5qY/W01 dTrRYj7WBXOCXRnWn9T5ds1hnkdHNzyM2EMar7U1bRV/qEVkbIGhHcSn+yyceGiI 18D9rOjyIjkmpQIDAQABoR+kHTAbMRkwFwYDVQQDExBtdHdpbHNvbi1wY2EtYWlr ggYBbvZ5Zn0wDQYJKoZIhvcNAQELBQADggGBAC3PEB8Av0PBJgrJMxzMbuf1FCdD AUrfYmP81Hs0/v70efviMEF2s3GAyLHD9v+1nNFCQrjcNCar18k45BlcodBEmxKA DZoioFykRtlha6ByVvuN6wD93KQbKsXPKhUp8X67fLuOcQgfc3BoDRlw/Ha1Ib6X fliE+rQzLCOgClK7ZdTwl9Ok0VbR7Mbal/xShIqr2WopjBtal9p4RsnIxilTHI+m qzbV8zvZXYfYtEb3MMMT5EnjIV8O498KKOjxohD2vqaxqItd58pOi6z/q5f4pLHc DvdsJecJEoWb2bxWQdBgthMjX6AUV/B5G/LTfaPwVbTLdEc+S6Nrobf/TFYV0pvG OzF3ltYag0fupuYJ991s/JhVwgJhCGq7YourDGkNIWAjt0Z2FWuQKnxWvmResgkS WTeXt+1HCFSo5WcAZWV8R9FYv7tzFxPY8aoLj82sgrOE4IwRqaA8KMbq3anF4RCk +D8k6etqMcNHFS8Fj6GlCd80mb4Q3sxuCiBvZw== -----END CERTIFICATE-----","title":"Importing a PrivacyCA Certificate"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/70%20Workload%20Confidentiality/#launching-an-encrypted-container-image","text":"Containers of the protected images can now be launched as normal using Kubernetes pods and deployments. Encrypted images will only be accessible on hosts with a Platform Integrity Attestation report showing the host is trusted. If the Crio Container is launched on a host that is not trusted, the launch will fail, as the decryption key will not be provided. Pull encrypted image using command line from the each WLA node crictl pull <Registry-IP>:5000/<image-name>:<tag>","title":"Launching an Encrypted Container Image"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/","text":"Flavor Management =================== Flavor Format Definitions A Flavor is a standardized set of expectations that determines what platform measurements will be considered \u201ctrusted.\u201d Flavors are constructed in a specific format, containing a metadata section describing the Flavor, and then various other sections depending on the Flavor type or Flavor part. Meta The first part of a Flavor is the meta section: \"meta\" :{ \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } } This section defines the Flavor part and any versioning information. Note Even when the BIOS or OS version remains the same, the actual measurements in the measured boot process will be different between TPM 1.2 and TPM 2.0, and so the TPM version is captured here as well. The attributes in the Meta section are used by the Flavor matching engine when matching Flavors to Hosts. Note that TPM 1.2 is supported only for VMware ESXi hosts. Hardware The hardware section is unique to PLATFORM flavor parts: \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } } This part of the Flavor defines expected hardware attributes of the host, and contains processor and TPM-related attributes. PCR banks (Algorithms) TPMs can have one or more PCR banks enabled with different hash algorithms. Intel SecL will always attempt to use the most secure algorithm available in the enabled PCR banks. For example, if a given TPM has the following PCR banks enabled: SHA1 SHA256 SHA384 The HVS will prefer the SHA384 PCR bank when creating flavors and performing attestations. The TPM vendor and version, platform OEM, and BIOS version and configuration each impact which PCR banks can potentially be enabled. Some manufacturers will allow users to configure which banks are enabled/disabled in the BIOS. Other manufacturers will enable only one PCR bank, and others will be permanently disabled. Flavors will only utilize a single PCR bank, and when importing from a sample host the HVS will always prefer the strongest algorithm supported by the enabled TPM PCR banks. In the above example, a flavor imported from that host would use the SHA384 bank for all hash values. This means that all hosts that will be attested using this flavor must also have SHA384 banks enabled in their TPMs. Typically, among otherwise-identical servers this will not be an issue. However, in a mixed environment it can be possible to have an OS flavor, for example, that needs to apply for some hosts that have SHA384 banks enabled, and other servers that only have SHA256 enabled and do not support SHA384. In this circumstance, multiple flavors for the same OS version would need to be created - one for SHA384, and another for SHA256. PCRs The last section of a Flavor is the \u201cPCRs\u201d section, which contains the actual expected measurements for any PCRs. This section will contain PCR measurements for each applicable algorithm supported by the TPM (SHA1 only for TPM 1.2, SHA256 and SHA1 sections for TPM 2.0). Some PCRs simply have a value and nothing else. Other PCRs, however, contain different event measurements. This indicates that separate individual platform or OS components are independently measured and extended to the same PCR. PCRs with event measurements will contain an Event array that lists, in the correct order, all of the events in the measurement event log that are extended to this PCR. When the Verification Service attests a host against a given Flavor, each measurement event is compared to the Flavor value, and all of the events are replayed to confirm that a replay of all of the measurement extensions do in fact result in the hash seen in the PCR value. In this way, the Verification Service can ensure that the measurement event log contents are secure, and the individual measurements can be attested so that the cause for an Untrusted attestation can easily be seen. The full PCRs section is not shown here due to length; see the sample Flavor sections for a full sample. \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, ... Sample PLATFORM Flavor The PLATFORM Flavor part encompasses measurements that are unique to a specific platform, including the server OEM, BIOS version, etc. A PLATFORM Flavor can be shared across all hosts of the same model that have the same BIOS version. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \" PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } }, \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } }, \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_0\" : { \"value\" : \"db83f0e8a1773c21164c17986037cdf8afc1bbdc1b815772c6da1befb1a7f8a3\" }, \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } Sample OS Flavor An OS Flavor encompasses all of the measurements unique to a given OS. This includes the OS kernel and other measurements. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"OS\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.3\" , \"vmm_name\" : \"\" , \"vmm_version\" : \"\" , \"tpm_version\" : \"2.0\" } }, \"pcrs\" : { \"SHA1\" : { \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"26e1d98742f79c950dc637f8c067b0b72a1b0e8ff75db4e609c7e17321acf3f4\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"c89ad1d1e9adaa7ecfee2abce763b92472685f7d1b9f3799bf49974b66ed9638\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"81b88e268e697ccf1790d41b9de748a8f395acfb47aa67c9845479d4e8456f77\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }, \"flavorgroup_name\" : \"automatic\" } Sample HOST_UNIQUE Flavor Host-Unique flavors define measurements for a specific host. This can be either a single large flavor that incorporates all of the host measurements into a single flavor document used only to attest a single host, or can be a small subset of measurements that are specific to a single host. For example, some VMWare module measurements will change from one host to the next, while most others will be shared assuming the same ESXi build is used. The full Flavor requirement for such a host would include Host-Unique flavors to cover the measurements that are unique to only this one host, and would still use a generic PLATFORM and OS flavor for the other measurements that would be identical for other similarly configured hosts. Note The HOST_UNIQUE Flavors are unique to a specific host, and should always be imported directly from the specific host. { \"flavors\" : [ { \"meta\" : { \"id\" : \"4d387cbd-f72b-4742-b4e5-c5b0ffed59e0\" , \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"HOST_UNIQUE\" , \"source\" : \"Purley11\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.4\" , \"tpm_version\" : \"2.0\" , \"hardware_uuid\" : \"00448C61-46F2-E711-906E-001560A04062\" } }, \"pcrs\" : { \"SHA256\" : { \"pcr_17\" : { \"value\" : \"f9ef8c53ddfc8096d36eda5506436c52b4bfa2bd451a89aaa102f03181722176\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"09f468dfc1d98a1fee86eb7297a56b0e097d57be66db4eae539061332da2e723\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"c1f7bfdae5f270d9f13aa9620b8977951d6b759f1131fe9f9289317f3a56efa1\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA1\" : { \"pcr_17\" : { \"value\" : \"48695f747a3d494710bd14d20cb0a93c78a485cc\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"b1f8db372e396bb128280821b7e0ac54a5ec2791\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"983ec7db975ed31e2c85ef8e375c038d6d307efb\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] } Sample ASSET_TAG Flavor Asset Tag flavor parts are unique to Asset Tag attestation. These flavors verify that the Asset Tag data in the host\u2019s TPM correctly matches the most recently created, currently valid Asset Tag certificate that has been deployed to that host. { \"meta\" : { \"id\" : \"b3e0c056-5b6c-4b6b-95c4-de5f1473cac0\" , \"description\" : { \"flavor_part\" : \"ASSET_TAG\" , \"hardware_uuid\" : \"<Hardware UUID of the server to be tagged>\" } }, \"external\" : { \"asset_tag\" : { \"tag_certificate\" : { \"encoded\" : \"<Tag certificate in base64 encoded format>\" , \"issuer\" : \"CN=assetTagService\" , \"serial_number\" : 1519153541461 , \"subject\" : \"<Hardware UUID of the server to be tagged>\" , \"not_before\" : \"2018-02-20T11:05:41-0800\" , \"not_after\" : \"2019-02-20T11:05:41-0800\" , \"fingerprint_sha384\" : \"46001d8472e56de423aac7c55f061404d27d50e497dfc21a861ef1965d7ac1e44887aee918fb5805385a3cbdf820899d\" , \"attribute\" : [ { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] } ] } } } } Flavor Templates Added in the Intel SecL-DC 4.0 release, Flavor Templates expose the backend logic that determines which PCRs and event log measurements will be used for specific Flavor parts. Where previously these rules were hardcoded on the backend, this new feature allows new templates to be added, and allows the customization or deletion of existing templates to suit specific business needs. Flavor Templates are conditional rules that apply to a Flavor part cumulatively based on defined conditions. For example a PLATFORM Flavor for a Linux host with Intel TXT enabled would normally include PCR0. If tboot is also enabled, elements from PCR 17 and 18 will be added to the PLATFORM flavor. These are cumulative based on which conditions are true on a given host. By default, Flavor Templates will come pre-populated in the HVS database to meet the same default behavior for previous releases. Flavor Templates can be added, removed, or edited to create customized rules. For example, if there is a specific event log measurement that a user would like to add to an OS flavor, a new Flavor Template can be added for the OS Flavor part that defines a condition for applying the Template, along with the specific event log measurement that should be used when that condition is satisfied. Flavor Templates are cumulative. If a given host matches all of the conditions defined for Flavor Template A and Flavor Template B, both Templates will be applied when importing Flavors from that host. Sample Flavor Template Below is a sample default Flavor Template used for RedHat Enterprise Linux servers with TPM2.0 and tboot enabled: { \"id\" : \"8798fb0c-2dfa-4464-8281-e650a30da7e6\" , \"label\" : \"default-linux-rhel-tpm20-tboot\" , \"condition\" :[ \"//host_info/os_name//*[text()='RedHatEnterprise']\" , \"//host_info/hardware_features/TPM/meta/tpm_version//*[text()='2.0']\" , \"//host_info/tboot_installed//*[text()='true']\" ], \"flavor_parts\" :{ \"OS\" :{ \"meta\" :{ \"tpm_version\" : \"2.0\" , \"tboot_installed\" : true }, \"pcr_rules\" :[ { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_includes\" :[ \"vmlinuz\" ] } ] }, \"PLATFORM\" :{ \"meta\" :{ \"tpm_version\" : \"2.0\" , \"tboot_installed\" : true }, \"pcr_rules\" :[ { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 0 }, \"pcr_matches\" : true }, { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_equals\" :{ \"excluding_tags\" :[ \"LCP_CONTROL_HASH\" , \"initrd\" , \"vmlinuz\" ] } }, { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 18 }, \"eventlog_equals\" :{ \"excluding_tags\" :[ \"LCP_CONTROL_HASH\" , \"initrd\" , \"vmlinuz\" ] } } ] }, \"HOST_UNIQUE\" :{ \"meta\" :{ \"tpm_version\" : \"2.0\" , \"tboot_installed\" : true }, \"pcr_rules\" :[ { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_includes\" :[ \"LCP_CONTROL_HASH\" , \"initrd\" ] }, { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 18 }, \"eventlog_includes\" :[ \"LCP_CONTROL_HASH\" ] } ] } } } Flavor Template Definitions A Flavor Template consists of several sections: The \"id\" and \"label\" keys are unique identifiers. The ID is generated automatically by the HVS when the Template is created; the label is user-specified and must be unique. Conditions The \"condition\" section contains a map of host-info elements to match when deciding to apply the Template. For example: \"condition\" :[ \"//host_info/os_name//*[text()='RedHatEnterprise']\" , \"//host_info/hardware_features/TPM/meta/tpm_version//*[text()='2.0']\" , \"//host_info/tboot_installed//*[text()='true']\" ] This sample contains three conditions, each of which must be true for this Template to apply: os_name: 'RedHatEnterprise' tpm_version: 2.0 tboot_installed: true This will apply for RedHat hosts with TPM2.0 and tboot enabled. If a Flavor is imported from a VMware ESXi host, this template will not apply. The condition paths directly refer to host-info elements collected from the host. The full host-info details for a host can be viewed using the /hvs/v2/host-status API; below is a snippet of the host-info section (note that additional host-info elements may be added as new platform features are incorporated): \"host_info\" : { \"os_name\" : \"RedHatEnterprise\" , \"os_version\" : \"8.4\" , \"os_type\" : \"linux\" , \"bios_version\" : \"SE11111.111.11.11.1111.11111111111\" , \"vmm_name\" : \"\" , \"vmm_version\" : \"\" , \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"host_name\" : \"hostname\" , \"bios_name\" : \"Intel Corporation\" , \"hardware_uuid\" : \"<UUID>\" , \"process_flags\" : \"FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE-36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE\" , \"no_of_sockets\" : \"72\" , \"tboot_installed\" : \"false\" , \"is_docker_env\" : \"false\" , \"hardware_features\" : { \"TXT\" : { \"enabled\" : \"true\" }, \"TPM\" : { \"enabled\" : \"true\" , \"meta\" : { \"tpm_version\" : \"2.0\" } }, \"CBNT\" : { \"enabled\" : \"false\" , \"meta\" : { \"profile\" : \"\" , \"msr\" : \"\" } }, \"UEFI\" : { \"enabled\" : \"false\" , \"meta\" : { \"secure_boot_enabled\" : true } } }, \"installed_components\" : [ \"tagent\" ] } Flavor Parts This section of the template will define behaviors for each Flavor part. Each different Flavor part is optional; if the new Template will only affect the OS Flavor part, only the OS Flavor part needs to be defined here. Each Flavor part specified will have its own \"meta\" section where conditional host attributes will be defined. These must match with host-info attributes; for example, in the sample above the OS part uses the following \"meta\" section elements: { \"tpm_version\" : \"2.0\" , \"tboot_installed\" : true } These directly correspond to host-info elements from the hosts this Template will apply to. PCR Rules Each Flavor part section of a Flavor Template may contain 0 or more PCR rules that define PCRs to include. Again using the OS Flavor part example from above, the default Template defines SHA1, SHA256, or SHA384 PCR banks; this tells the HVS to use the \"best\" available PCR bank algorithm, but that each of these algorithms is acceptable. Alternatively, if the Template listed only the SHA384 PCR bank, the resulting Flavor would require the SHA384 PCR bank and would disregard any SHA256 or SHA1 banks, even if the SHA384 bank is unavailable and the SHA256 bank is enabled on the server. The PCR Rules will also contain at least one PCR index, indicating which PCR the rule applies to. pcr_matches PCRs can require a direct PCR value match (when event logs are unnecessary and the final PCR hash is required to match a specific value), and/or can contain event log include/exclude/equals rules. A direct PCR value match requirement is the easiest definitions, but should only be used when a specific PCR is known to always be the same on all hosts that the resulting Flavor will apply to: { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 0 }, \"pcr_matches\" : true } This requires the value of PCR0 to exactly match, and will not examine specific event log details for this PCR index. eventlog_includes The following example shows how to require a specific event log entry to exist: { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_includes\" :[ \"vmlinuz\" ] } This rule will require the \"vmlinuz\" event log measurement to be present in the PCR17 event log. excluding_tags Specific event logs can also be excluded; in the below example, all events from PCR17 will be part of the resulting Flavor, but will exclude the LCP_CONTROL_HASH, initrd, and vmlinuz measurement events specifically. This is often used when a specific PCR contains measurements that should apply to different Flavor parts; different rules need to be defined to ensure that the correct events are included in the right Flavor part, and events that will apply for different Flavor parts must be excluded. { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_equals\" :{ \"excluding_tags\" :[ \"LCP_CONTROL_HASH\" , \"initrd\" , \"vmlinuz\" ] } } Flavor Matching Flavors are matched to host by objects called Flavor Groups A Flavor Group represents a set of rules to satisfy for a set of flavors to be matched to a host for attestation. For example, a Flavor Group can require that a PLATFORM Flavor and an OS Flavor be used for attestation. Without this level of association, a host that matches measurements for only a PLATFORM flavor, for example, can be attested as Trusted, even though the OS Flavor would attest the host as Untrusted. Flavor matching can be automatic (the default), or can explicitly specify a host to which the Flavor Group must apply. Automatic flavor matching allows for more ease in datacenter lifecycle management with updates and patches that may cause the appropriate flavors to change over time. Automatic flavor matching will trigger a new matching action when a new flavor is added, when an existing flavor is deleted, or when a host is initially attested as Untrusted. The system will automatically attempt to find a new set of flavors that match the Flavor Group rules that will attest the host as Trusted. For example, if a host in your datacenter has recently had a BIOS update, the next attestation will cause the host to appear Untrusted (because the PLATFORM measurements will now differ). Using automatic flavor matching, the Verification Service will automatically search for a new PLATFORM flavor that matches the actual BIOS version and measurement seen on the host. If a new BIOS version is successfully found, the Verification Service will use the new version for attestation, and the host will appear Trusted. If no matching PLATFORM flavor is found, the host will appear Untrusted. When automatic flavor matching is used, think of the various flavors in the Verification Service as a collection of valid configurations, and an attested host matching any combination of those configurations (within the confines of the Flavor Group requirements for which flavor types must be present) will be attested as Trusted. Host-based flavor matching explicitly maps a specific host to a flavor. Host-based attestation requires that a host saves its entire configuration in a composite flavor document in the system, and then later validates against this flavor to detect any changes. In this case, if a host received a BIOS upgrade, the host will attest as Untrusted, and no attempt will be made to re-match a new flavor. An administrator will need to explicitly specify a new flavor to be used for that host. When Does Flavor Matching Happen? Generally speaking, a new Flavor match operation is triggered whenever a host is registered, whenever a host is attested and would be untrusted, and whenever a Flavor is added to or removed from a Flavor group. When a new host is registered, the Verification Service will retrieve the Host Report and derive the platform information needed for Flavor matching (BIOS version, server OEM, OS type and version, TPM version, etc.). The Verification Service then searches through the Flavors in the same Flavor group that the host is in, and finds any Flavors that match the platform information. If a Flavor is deleted, the Verification Service finds any hosts that are currently associated with that Flavor, and attempts to match them to alternative Flavors. If a Flavor is added, the Verification Service looks for any hosts in the same Flavor group that are not currently matched to a Flavor of the appropriate Flavor part, and checks to see whether those hosts should be mapped to the new Flavor. If a new Report is generated for a host and would not result in a Trusted attestation, the Verification Service will first repeat the Flavor matching process to be sure that no matching Flavors exist in the host\u2019s Flavor group that would result in a Trusted attestation. If the Service still finds no matching Flavors, the host will appear as Untrusted. Flavor Matching Performance Flavor matching causes affected hosts to be moved into the QUEUE state while the host and Flavor are evaluated to determine whether the host and Flavor should be linked. Hosts can remain in the QUEUE state for varying amounts of time based on the extent of the Flavor match required. This means that the trust status of a host will not be actually updated to reflect a new Flavor until after the process finishes, which may take a few seconds or minutes depending on the number of registered hosts, Flavors in the same Flavorgroup, etc. If a new host is registered, only that host will be added to the queue, and other hosts will be unaffected. The Verification Service will look for only the HOST\\_UNIQUE flavor part applicable to that specific host, and then will look at all PLATFORM and OS Flavors in the same Flavorgroup has the host, using the Flavor metadata and host info to narrow the results. The Service will match the new host to the most similar Flavors, and then move the host to the CONNECTED state and generate a new trust report. When a new PLATFORM or OS Flavor is created, the Service will instead add all hosts in the same Flavorgroup as the new Flavors to the queue. Each host in the queue will then be re-evaluated against every PLATFORM and OS Flavor in the Flavorgroup to determine the closest match. This means that adding a new Flavor can cause more hosts to each spend more time in the QUEUE state, as compared to adding a new host. For this reason, as a best practice for initial population of Flavors and hosts for a new deployment, it is suggested that Flavors be created before registering hosts. This is not a concern after the initial population of Flavors and hosts. Flavor Groups Flavor Groups represent a collection of one or more Flavors that are possible matches for a collection of one or more hosts. Flavor Groups link to both Flavors and hosts \u2013 a host in Flavor Group \"ABC\" will only be matched to Flavors in Flavor Group \"ABC\" Default Flavor Group By default the Verification Service includes a Flavor Group named automatic and another named unique During host registration, the automatic Flavor Group is used as a default selection if no other Flavor Group is specified. automatic The automatic Flavor Group is used as the default Flavor Group for all hosts and all Flavor parts. If no other Flavor Groups are specified when creating Flavors or Hosts, all Hosts and Flavors will be added to this group. This is useful for datacenters that want to manage a single set of acceptable configurations for all hosts. unique The unique Flavor Group is used to contain HOST\\_UNIQUE Flavors. This Flavorgroup is used by the backend software and should not be managed manually. Flavor Match Policies Flavor Match Policies are used to define how the Flavor Match engine will match Flavors to hosts for attestation for a given Flavor Group. Each Flavor part can have defined Flavor Match Policies within a given Flavor Group. { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"all_of\" , \"required_if_defined\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"IMA\" : { \"all_of\" , \"required_if_defined\" } } The sample Policy above would require that a PLATFORM Flavor part be matched, but any PLATFORM Flavor part in the Flavor Group may be matched. The OS Flavor Part will only be required if there is an OS Flavor part in the Flavor Group; if there are no OS Flavor parts in the Group, the match will not be required. If more than one OS Flavor part exists in the Group, all of those OS parts will be required to match for a host to be Trusted. Default Flavor Match Policy The automatic Flavor Group, and any Flavor Group created without explicitly defining a Flavor Match Policy, will be created using the following Flavor Match Policy. This is the default behavior for Flavor Matching: { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"any_of\" , \"required\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"IMA\" : { \"all_of\" , \"required_if_defined\" } } ANY_OF The ANY_OF Policy allows any Flavor of the specified Flavor part to be matched. If the Flavor Group contains OS Flavor 1 and OS Flavor 2, a host will be Trusted if it matches either OS Flavor 1 or OS Flavor 2. ALL_OF The ALL_OF Policy requires all Flavors of the specified Flavor Part in the Flavor Group to be matched. For example, if Flavor Group X contains PLATFORM Flavor Part 1 and PLATFORM Flavor Part 2, a host in Flavor Group X will need to match both PLATFORM Flavor 1 and PLATFORM Flavor 2 to attest as Trusted. If the host matches only one of the Flavors, or neither of them, the host will be attested as Untrusted. LATEST The LATEST Policy requires that the most recently created Flavor of the specified Flavor part be used when matching to a host. For example: \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored. REQUIRED The REQUIRED Policy requires a Flavor of the specified part to be matched. For example: \"PLATFORM\" : { \"any_of\" , \"required\" } This policy means that a PLATFORM Flavor part must be used; if the Flavor Group contains no PLATFORM Flavor parts, hosts in this Flavor Group will always count as Untrusted. REQUIRED_IF_DEFINED The REQUIRED_IF_DEFINED Policy requires that a Flavor part be used if a Flavor of that part exists. If no Flavor part of this type exists in the Flavor Group, the Flavor part will not be required. \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored. Flavor Match Event Triggers Several events will cause the background queue service to attempt to re-match Flavors and hosts: Host registration This event is the first time a host will be attempted to be matched to appropriate Flavors in the same Flavor Group, and affects only the host that was added (other hosts will not be re-matched to Flavors when you add a new host). Flavor creation When a new Flavor is added to a Flavor Group, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the new Flavor. Flavor deletion When a Flavor is deleted, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the deleted Flavor. Creation of a new Attestation Report When a new Attestation Report is generated, if the host would attest as Untrusted with the currently-matched Flavors, the host being attested will be re-matched as part of the Report generation process. This ensures that Reports are always generated using the best possible Flavor matches available in the database. Sample Flavorgroup API Calls Create a New Flavorgroup POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavorgroups Authorization: Bearer <token> { \"name\": \"firstTest\", \"flavor_match_policy_collection\": { \"flavor_match_policies\": [ { \"flavor_part\": \" PLATFORM\", \"match_policy\": { \"match_type\": \"ANY_OF\", \"required\": \"REQUIRED\" } } ] } } Response: { \"id\" : \"a0950923-596b-41f7-b9ad-09f525929ba1\" , \"name\" : \"firstTest\" , \"flavor_match_policy_collection\" : { \"flavor_match_policies\" : [ { \"flavor_part\" : \" PLATFORM\" , \"match_policy\" : { \"match_type\" : \"ANY_OF\" , \"required\" : \"REQUIRED\" } } ] } } NOTE : By default only automatic flavor groups will be created and availabe as Default flavor group. Custom flavor groups required for user specific needs to be created by user before adding that particular flavor group for Host registration and Flavor creation. IMA Flavor IMA flavor will be generated with the ima measurements present in the host manifest and this flavor can be created multiple times based on the request. IMA flavor will be associated with the host based on ALL_OF match type policy. This will be supported by the existing API call itself. POST : https://{{hvs_ip}}:30443/hvs/v2/flavors Body { \"connection_string\": \"https://<host-ip>:31443;\", \"partial_flavor_types\": [\"PLATFORM\",\"OS\",\"HOST_UNIQUE\",\"IMA\",\"SOFTWARE\"], \"flavorgroup_names\": [] } IMA flavor will be created on default flavor group automatic based on the IMA Flavor template. This flavor will be stored in a flavors DB like other existing flavors. IMA Flavor template { \"label\": \"ima\", \"condition\" :[ \"//host_info/os_name//*[text()='RedHatEnterprise'] or //host_info/os_name//*[text()='Centos'] or //host_info/os_name//*[text()='Ubuntu']\" ], \"flavor_parts\": { \"IMA\": { \"pcr_rules\": [{ \"pcr\": { \"index\": 10, \"bank\": [\"SHA384\", \"SHA256\", \"SHA1\"] }, \"pcr_matches\": true }] } } } Sample for IMA Flavor ``` { \"flavor\":{ \"meta\":{ \"id\":\"2c3bcb9d-b140-4732-8a12-0af281246fe8\", \"description\":{ \"digest_algorithm\":\"SHA256\", \"flavor_part\":\"IMA\", \"label\":\"ima\" }, \"vendor\":\"INTEL\" }, \"pcrs\": [{ \"pcr\": { \"index\": 10, \"bank\":\"SHA256\" }, \"measurement\": \"3f95ecbb0bb8e66e54d3f9e4dbae8fe57fed96f0\", \"pcr_matches\":true }], \"ima_measurements\":[{ \"file\":\"/root/test\", \"measurement\":\"12aacb9f9da0518937f3da6c0526b381787faa60a65b319208391f303b5fe7b7a\" }, { \"file\":\"/usr/share/vim/vim80/ftplugin/yamlfile.vim\", \"measurement\":\"a0ca2d70982bf2db5a71a59ca7afd90aed7041ae703e2e711847c98aff0ac800\" }] } } ``` As with other Flavor parts, hosts will be matched to Flavors in the same Flavorgroup that the host is added to, and will not be matched to Flavors in different Flavorgroups. Flavor matching will happen on the same events as for other Flavor parts. Ima-Integrity rule Current IMA logs will be taken from the hostmanifest file and the replay will be performed for all the IMA logs against the pcr10 cumulative hash recieved from the host. ImaEventLogEquals rule IMA flavor will be compared against the host manifest data of ima-log. If it matches, then it will store ima-trust status as true. Attestation report generation If the ima eventlog equals rule is true for all the measurements, we will provide only one entry in the report like below, \"IMA\": { \"trust\": true, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaEventLogEquals\", \"markers\": [ \"IMA\" ] }, \"flavor_id\": \"253e5fc3-11b0-4a38-a2a0-4a264aa40139\", \"trusted\": true }] } If ima eventlog equals rule fails for any of the ima measurements, we will log those entries under faults in the reports as below. \"IMA\": { \"trust\": false, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaEventLogEquals\", \"markers\": [ \"IMA\" ] }, \"flavor_id\": \"253e5fc3-11b0-4a38-a2a0-4a264aa40139\", \"faults\": [{ \"fault_name\": \"fault.PcrValueMismatch\", \"description\": \"Host IMA log /usr/lib/systemd/libsystemd-shared-239.so with value 122e981e1d16de3269667f4e84bf8532462214f4f8a183e1c441bbfd3caecd10 does not match expected value 762e981e1d16de3269667f4e84bf84a0a0c84f4f8a183e13ac5ba1c441bbfd3c\", \"pcr_index\": \"10\", \"pcr_bank\": \"SHA256\", }], \"trusted\": false }] } If Hostmanifest contains unexpected/additional IMA log entries when compare to flavor measurements, PcrEventLogContainsUnexpectedEntries fault will be raised. \"IMA\": { \"trust\": false, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaEventLogEquals\", \"markers\": [ \"IMA\" ] }, \"flavor_id\": \"253e5fc3-11b0-4a38-a2a0-4a264aa40139\", \"faults\": [{ \"fault_name\": \"fault.PcrEventLogContainsUnexpectedEntries\", \"description\": \"Module manifest for PCR 10 of SHA256 value contains 1 unexpected entries\", \"unexpected_ima_entries\": { \"pcr\": { \"index\": 10, \"bank\": \"SHA256\" }, \"ima_measurements\": [ { \"file\": \"/root/ima-cont-test/check1.txt\", \"measurement\": \"73b5b283c458f698b3eafc6afbb01149dec48c541896bce2a74d79a0881d7864\" } ], \"ima_template\": \"ima-ng\" } }], \"trusted\": false }] } If hostmanifest does not contain all the measurements from flavor, PcrEventLogMissingExpectedEntries fault will be raised in the report. \"IMA\": { \"trust\": false, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaEventLogEquals\", \"markers\": [ \"IMA\" ] }, \"flavor_id\": \"253e5fc3-11b0-4a38-a2a0-4a264aa40139\", \"faults\": [{ \"fault_name\": \"fault.PcrEventLogMissingExpectedEntries\", \"description\": \"Module manifest for PCR 10 of SHA256 value missing 2 expected entries\", \"unexpected_ima_entries\": { \"pcr\": { \"index\": 10, \"bank\": \"SHA256\" }, \"ima_measurements\": [ { \"file\": \"/root/itest.txt\", \"measurement\": \"73b5b283c458f698b3eafc6afbb01149dec48c541896bce2a74d79a0881d7864\" }, { \"file\": \"/root/icheck.txt\", \"measurement\": \"fbf99c21c97b5134c22430e6bdd5f35a44e6d3a14855f13a8fdcce84eb52994a\" } ], \"ima_template\": \"ima-ng\" } }], \"trusted\": false }] } Sample for IMA measurement log integrity rule in report, ``` \"IMA\": { \"trust\": true, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaMeasurementLogIntegrity\", \"markers\": [ \"IMA\" ], \"expected_pcr\": { \"pcr\": { \"index\": 10, \"bank\": \"SHA256\" }, \"measurement\": \"b6e1251e1d16de3269667f4e84bf84a0a0c84f4f8a183e13ac5ba1c441bbfd3c\", \"pcr_matches\": true }, \"expected_imavalues\": { \"ima_measurements\": [ { \"file\": \"boot_aggregate\", \"measurement\": \"cacb533ca55a87d4e0c5954608102091ab42b99ae8fbbdbba7c93efad5e6a174\" }, { \"file\": \"/root/ima-cont-test/check1.txt\", \"measurement\": \"b351e6014c0713eda511289d7af11a3c49f7162b471fb93adca869f37d6d4d15\" }, { \"file\": \"/root/ima-cont-test/check2.txt\", \"measurement\": \"fc1ebc0a83cdea7e2e63063c81f935319207194b4425d3a88fd1f9c8de1184b7\" } ] } }, \"flavor_id\": \"12835fc3-11b0-4a38-a2a0-4a264aa40139\", \"trusted\": true }] } ``` As part of tpm quote response, TA will send ima_log. To include the ima logs in the tpm quote response, the following cofiguration parameters will be added by hvs in the tpm-quote request body. ``` `ima_measure_enabled` - it can be true or false under TA `config.yaml` located in `/etc/trustagent/v5.0.0/`. Only if it is true, IMA logs will be sent by TA. ``` NOTE : IMA logs will be sent only when the ima enable option is set in the tpm quote request body and the same configuration is enabled in the TA as well. HVS Pagination API Consumption API consumers will be required to paginate through HVS data (ex. reports) if the amount of data in the database exceeds the limit or default limit (otherwise all records will be returned in a single query). When starting pagination, API consumers will not provide a cursor value to their request (i.e. so that the first page is returned). On subsequent page requests, API consumers will get the next page by providing the cursor returned in the previous call. API consumers will terminate the collection of pages arbitrarily or when the cursor is less than zero (i.e. -1 will be returned by the controller to signal EOF). Database changes Each of HVS' object tables will be update to include the \u201crow_id\u201d column (autoincrementing number id) which will be used as the pagination key. The following requirements/recommendations apply to all impacted database tables/queries. * All impacted database tables must be updated to have auto-increment id field with unique and not null constraint applied. * All impacted database queries must be updated to include limit construct. They should also be able to filter records based on provided \"afterId\" value. API Changes All the impacted end-points will support two additional query parameters, \"limit\" for specifying number of records to return, and \"afterId\" for specifying auto-increment id from which to return records. If no \"limit\" parameter is passed, default limit will be used. And if no \"afterId\" parameter is passed, records from beginning will be returned. All the impacted response models will support two additional json attributes, \"next\" link for fetching next page, and \"prev\" link for fetching previous page. First page won't have \"prev\" link. And last page won't have \"next\" link. NOTE : The default limit value is 1000 and default afterId value is 0 Impacted APIs The following \"GET\" (search) APIs are updated to handle pagination API Description GET /hosts Get all the hosts registered on HVS GET /reports Get the latest report for all the hosts registered on HVS GET /host-status Get the latest host-status for all the hosts registered on HVS GET /flavors Get all the flavors created on HVS GET /flavorgroups Get all the flavorgroups created on HVS GET /exsi-cluster Get all the exsi-clusters along with hostnames registered on HVS GET /tpm-endorsements Get all the active tpm-endorsement certificates uploaded to HVS","title":"Flavor Management"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-management","text":"===================","title":"Flavor Management"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-format-definitions","text":"A Flavor is a standardized set of expectations that determines what platform measurements will be considered \u201ctrusted.\u201d Flavors are constructed in a specific format, containing a metadata section describing the Flavor, and then various other sections depending on the Flavor type or Flavor part.","title":"Flavor Format Definitions"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#meta","text":"The first part of a Flavor is the meta section: \"meta\" :{ \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } } This section defines the Flavor part and any versioning information. Note Even when the BIOS or OS version remains the same, the actual measurements in the measured boot process will be different between TPM 1.2 and TPM 2.0, and so the TPM version is captured here as well. The attributes in the Meta section are used by the Flavor matching engine when matching Flavors to Hosts. Note that TPM 1.2 is supported only for VMware ESXi hosts.","title":"Meta"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#hardware","text":"The hardware section is unique to PLATFORM flavor parts: \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } } This part of the Flavor defines expected hardware attributes of the host, and contains processor and TPM-related attributes.","title":"Hardware"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#pcr-banks-algorithms","text":"TPMs can have one or more PCR banks enabled with different hash algorithms. Intel SecL will always attempt to use the most secure algorithm available in the enabled PCR banks. For example, if a given TPM has the following PCR banks enabled: SHA1 SHA256 SHA384 The HVS will prefer the SHA384 PCR bank when creating flavors and performing attestations. The TPM vendor and version, platform OEM, and BIOS version and configuration each impact which PCR banks can potentially be enabled. Some manufacturers will allow users to configure which banks are enabled/disabled in the BIOS. Other manufacturers will enable only one PCR bank, and others will be permanently disabled. Flavors will only utilize a single PCR bank, and when importing from a sample host the HVS will always prefer the strongest algorithm supported by the enabled TPM PCR banks. In the above example, a flavor imported from that host would use the SHA384 bank for all hash values. This means that all hosts that will be attested using this flavor must also have SHA384 banks enabled in their TPMs. Typically, among otherwise-identical servers this will not be an issue. However, in a mixed environment it can be possible to have an OS flavor, for example, that needs to apply for some hosts that have SHA384 banks enabled, and other servers that only have SHA256 enabled and do not support SHA384. In this circumstance, multiple flavors for the same OS version would need to be created - one for SHA384, and another for SHA256.","title":"PCR banks (Algorithms)"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#pcrs","text":"The last section of a Flavor is the \u201cPCRs\u201d section, which contains the actual expected measurements for any PCRs. This section will contain PCR measurements for each applicable algorithm supported by the TPM (SHA1 only for TPM 1.2, SHA256 and SHA1 sections for TPM 2.0). Some PCRs simply have a value and nothing else. Other PCRs, however, contain different event measurements. This indicates that separate individual platform or OS components are independently measured and extended to the same PCR. PCRs with event measurements will contain an Event array that lists, in the correct order, all of the events in the measurement event log that are extended to this PCR. When the Verification Service attests a host against a given Flavor, each measurement event is compared to the Flavor value, and all of the events are replayed to confirm that a replay of all of the measurement extensions do in fact result in the hash seen in the PCR value. In this way, the Verification Service can ensure that the measurement event log contents are secure, and the individual measurements can be attested so that the cause for an Untrusted attestation can easily be seen. The full PCRs section is not shown here due to length; see the sample Flavor sections for a full sample. \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, ...","title":"PCRs"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#sample-platform-flavor","text":"The PLATFORM Flavor part encompasses measurements that are unique to a specific platform, including the server OEM, BIOS version, etc. A PLATFORM Flavor can be shared across all hosts of the same model that have the same BIOS version. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \" PLATFORM\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"tpm_version\" : \"2.0\" } }, \"hardware\" : { \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"processor_flags\" : \"fpu vme de \u2026\" , \"feature\" : { \"tpm\" : { \"enabled\" : true , \"pcr_banks\" : [ \"SHA1\" , \"SHA256\" ] }, \"txt\" : { \"enabled\" : true } } }, \"pcrs\" : { \"SHA1\" : { \"pcr_0\" : { \"value\" : \"d2ed125942726641a7260c4f92beb67d531a0def\" }, \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_0\" : { \"value\" : \"db83f0e8a1773c21164c17986037cdf8afc1bbdc1b815772c6da1befb1a7f8a3\" }, \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } }","title":"Sample PLATFORM Flavor"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#sample-os-flavor","text":"An OS Flavor encompasses all of the measurements unique to a given OS. This includes the OS kernel and other measurements. { \"flavor_collection\" : { \"flavors\" : [ { \"meta\" : { \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"OS\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.3\" , \"vmm_name\" : \"\" , \"vmm_version\" : \"\" , \"tpm_version\" : \"2.0\" } }, \"pcrs\" : { \"SHA1\" : { \"pcr_17\" : { \"value\" : \"1ec12004b371e3afd43d04155abde7476a3794fa\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"2fb7d57dcc5455af9ac08d82bdf315dbcc59a044\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ffb1806465d2de1b7531fd5a2a6effaad7c5a047\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"5ba93c9db0cff93f52b521d7420e43f6eda2784f\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3c585604e87f855973731fea83e21fab9392d2fc\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"3d42560dcf165a5557b3156a21583f2c6dbef10e\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"274f929dbab8b98a7031bbcd9ea5613c2a28e5e6\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"ca96de412b4e8c062e570d3013d2fccb4b20250a\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"d123e2f2b30f1effa8d9522f667af0dac4f48cfb\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"f3742133e1a0deb48177a74ed225418e5cf73fd1\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA256\" : { \"pcr_17\" : { \"value\" : \"50bd58407a1893056eacff493245cfe785f045b2c0e1cc3e6e9eb5812d8d91bd\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"9301981c093654d5aa3430ba05c880a52eb22b9e18248f5f93e1fe1dab1cb947\" , \"label\" : \"HASH_START\" , \"info\" : { \"ComponentName\" : \"HASH_START\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"2785d1ed65f6b5d4b555dc24ce5e068a44ce8740fe77e01e15a10b1ff66cca90\" , \"label\" : \"BIOSAC_REG_DATA\" , \"info\" : { \"ComponentName\" : \"BIOSAC_REG_DATA\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"CPU_SCRTM_STAT\" , \"info\" : { \"ComponentName\" : \"CPU_SCRTM_STAT\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"LCP_DETAILS_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_DETAILS_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\" , \"label\" : \"STM_HASH\" , \"info\" : { \"ComponentName\" : \"STM_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"67abdd721024f0ff4e0b3f4c2fc13bc5bad42d0b7851d456d88d203d15aaa450\" , \"label\" : \"OSSINITDATA_CAP_HASH\" , \"info\" : { \"ComponentName\" : \"OSSINITDATA_CAP_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"26e1d98742f79c950dc637f8c067b0b72a1b0e8ff75db4e609c7e17321acf3f4\" , \"label\" : \"MLE_HASH\" , \"info\" : { \"ComponentName\" : \"MLE_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"0f6e0c7a5944963d7081ea494ddff1e9afa689e148e39f684db06578869ea38b\" , \"label\" : \"NV_INFO_HASH\" , \"info\" : { \"ComponentName\" : \"NV_INFO_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"27808f64e6383982cd3bcc10cfcb3457c0b65f465f779d89b668839eaf263a67\" , \"label\" : \"tb_policy\" , \"info\" : { \"ComponentName\" : \"tb_policy\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"c89ad1d1e9adaa7ecfee2abce763b92472685f7d1b9f3799bf49974b66ed9638\" , \"label\" : \"vmlinuz\" , \"info\" : { \"ComponentName\" : \"vmlinuz\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"81b88e268e697ccf1790d41b9de748a8f395acfb47aa67c9845479d4e8456f77\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }, \"flavorgroup_name\" : \"automatic\" }","title":"Sample OS Flavor"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#sample-host_unique-flavor","text":"Host-Unique flavors define measurements for a specific host. This can be either a single large flavor that incorporates all of the host measurements into a single flavor document used only to attest a single host, or can be a small subset of measurements that are specific to a single host. For example, some VMWare module measurements will change from one host to the next, while most others will be shared assuming the same ESXi build is used. The full Flavor requirement for such a host would include Host-Unique flavors to cover the measurements that are unique to only this one host, and would still use a generic PLATFORM and OS flavor for the other measurements that would be identical for other similarly configured hosts. Note The HOST_UNIQUE Flavors are unique to a specific host, and should always be imported directly from the specific host. { \"flavors\" : [ { \"meta\" : { \"id\" : \"4d387cbd-f72b-4742-b4e5-c5b0ffed59e0\" , \"vendor\" : \"INTEL\" , \"description\" : { \"flavor_part\" : \"HOST_UNIQUE\" , \"source\" : \"Purley11\" , \"bios_name\" : \"Intel Corporation\" , \"bios_version\" : \"SE5C620.86B.00.01.0004.071220170215\" , \"os_name\" : \"RedHatEnterpriseServer\" , \"os_version\" : \"7.4\" , \"tpm_version\" : \"2.0\" , \"hardware_uuid\" : \"00448C61-46F2-E711-906E-001560A04062\" } }, \"pcrs\" : { \"SHA256\" : { \"pcr_17\" : { \"value\" : \"f9ef8c53ddfc8096d36eda5506436c52b4bfa2bd451a89aaa102f03181722176\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"09f468dfc1d98a1fee86eb7297a56b0e097d57be66db4eae539061332da2e723\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"c1f7bfdae5f270d9f13aa9620b8977951d6b759f1131fe9f9289317f3a56efa1\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha256\" , \"value\" : \"df3f619804a92fdb4057192dc43dd748ea778adc52bc498ce80524c014b81119\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } }, \"SHA1\" : { \"pcr_17\" : { \"value\" : \"48695f747a3d494710bd14d20cb0a93c78a485cc\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } }, { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"b1f8db372e396bb128280821b7e0ac54a5ec2791\" , \"label\" : \"initrd\" , \"info\" : { \"ComponentName\" : \"initrd\" , \"EventName\" : \"OpenSource.EventName\" } } ] }, \"pcr_18\" : { \"value\" : \"983ec7db975ed31e2c85ef8e375c038d6d307efb\" , \"event\" : [ { \"digest_type\" : \"com.intel.mtwilson.lib.common.model.MeasurementSha1\" , \"value\" : \"9069ca78e7450a285173431b3e52c5c25299e473\" , \"label\" : \"LCP_CONTROL_HASH\" , \"info\" : { \"ComponentName\" : \"LCP_CONTROL_HASH\" , \"EventName\" : \"OpenSource.EventName\" } } ] } } } } ] }","title":"Sample HOST_UNIQUE Flavor"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#sample-asset_tag-flavor","text":"Asset Tag flavor parts are unique to Asset Tag attestation. These flavors verify that the Asset Tag data in the host\u2019s TPM correctly matches the most recently created, currently valid Asset Tag certificate that has been deployed to that host. { \"meta\" : { \"id\" : \"b3e0c056-5b6c-4b6b-95c4-de5f1473cac0\" , \"description\" : { \"flavor_part\" : \"ASSET_TAG\" , \"hardware_uuid\" : \"<Hardware UUID of the server to be tagged>\" } }, \"external\" : { \"asset_tag\" : { \"tag_certificate\" : { \"encoded\" : \"<Tag certificate in base64 encoded format>\" , \"issuer\" : \"CN=assetTagService\" , \"serial_number\" : 1519153541461 , \"subject\" : \"<Hardware UUID of the server to be tagged>\" , \"not_before\" : \"2018-02-20T11:05:41-0800\" , \"not_after\" : \"2019-02-20T11:05:41-0800\" , \"fingerprint_sha384\" : \"46001d8472e56de423aac7c55f061404d27d50e497dfc21a861ef1965d7ac1e44887aee918fb5805385a3cbdf820899d\" , \"attribute\" : [ { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] }, { \"attr_type\" : { \"id\" : \"2.5.4.789.2\" }, \"attribute_values\" : [ { \"objects\" : {} } ] } ] } } } }","title":"Sample ASSET_TAG Flavor"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-templates","text":"Added in the Intel SecL-DC 4.0 release, Flavor Templates expose the backend logic that determines which PCRs and event log measurements will be used for specific Flavor parts. Where previously these rules were hardcoded on the backend, this new feature allows new templates to be added, and allows the customization or deletion of existing templates to suit specific business needs. Flavor Templates are conditional rules that apply to a Flavor part cumulatively based on defined conditions. For example a PLATFORM Flavor for a Linux host with Intel TXT enabled would normally include PCR0. If tboot is also enabled, elements from PCR 17 and 18 will be added to the PLATFORM flavor. These are cumulative based on which conditions are true on a given host. By default, Flavor Templates will come pre-populated in the HVS database to meet the same default behavior for previous releases. Flavor Templates can be added, removed, or edited to create customized rules. For example, if there is a specific event log measurement that a user would like to add to an OS flavor, a new Flavor Template can be added for the OS Flavor part that defines a condition for applying the Template, along with the specific event log measurement that should be used when that condition is satisfied. Flavor Templates are cumulative. If a given host matches all of the conditions defined for Flavor Template A and Flavor Template B, both Templates will be applied when importing Flavors from that host.","title":"Flavor Templates"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#sample-flavor-template","text":"Below is a sample default Flavor Template used for RedHat Enterprise Linux servers with TPM2.0 and tboot enabled: { \"id\" : \"8798fb0c-2dfa-4464-8281-e650a30da7e6\" , \"label\" : \"default-linux-rhel-tpm20-tboot\" , \"condition\" :[ \"//host_info/os_name//*[text()='RedHatEnterprise']\" , \"//host_info/hardware_features/TPM/meta/tpm_version//*[text()='2.0']\" , \"//host_info/tboot_installed//*[text()='true']\" ], \"flavor_parts\" :{ \"OS\" :{ \"meta\" :{ \"tpm_version\" : \"2.0\" , \"tboot_installed\" : true }, \"pcr_rules\" :[ { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_includes\" :[ \"vmlinuz\" ] } ] }, \"PLATFORM\" :{ \"meta\" :{ \"tpm_version\" : \"2.0\" , \"tboot_installed\" : true }, \"pcr_rules\" :[ { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 0 }, \"pcr_matches\" : true }, { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_equals\" :{ \"excluding_tags\" :[ \"LCP_CONTROL_HASH\" , \"initrd\" , \"vmlinuz\" ] } }, { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 18 }, \"eventlog_equals\" :{ \"excluding_tags\" :[ \"LCP_CONTROL_HASH\" , \"initrd\" , \"vmlinuz\" ] } } ] }, \"HOST_UNIQUE\" :{ \"meta\" :{ \"tpm_version\" : \"2.0\" , \"tboot_installed\" : true }, \"pcr_rules\" :[ { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_includes\" :[ \"LCP_CONTROL_HASH\" , \"initrd\" ] }, { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 18 }, \"eventlog_includes\" :[ \"LCP_CONTROL_HASH\" ] } ] } } }","title":"Sample Flavor Template"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-template-definitions","text":"A Flavor Template consists of several sections: The \"id\" and \"label\" keys are unique identifiers. The ID is generated automatically by the HVS when the Template is created; the label is user-specified and must be unique.","title":"Flavor Template Definitions"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#conditions","text":"The \"condition\" section contains a map of host-info elements to match when deciding to apply the Template. For example: \"condition\" :[ \"//host_info/os_name//*[text()='RedHatEnterprise']\" , \"//host_info/hardware_features/TPM/meta/tpm_version//*[text()='2.0']\" , \"//host_info/tboot_installed//*[text()='true']\" ] This sample contains three conditions, each of which must be true for this Template to apply: os_name: 'RedHatEnterprise' tpm_version: 2.0 tboot_installed: true This will apply for RedHat hosts with TPM2.0 and tboot enabled. If a Flavor is imported from a VMware ESXi host, this template will not apply. The condition paths directly refer to host-info elements collected from the host. The full host-info details for a host can be viewed using the /hvs/v2/host-status API; below is a snippet of the host-info section (note that additional host-info elements may be added as new platform features are incorporated): \"host_info\" : { \"os_name\" : \"RedHatEnterprise\" , \"os_version\" : \"8.4\" , \"os_type\" : \"linux\" , \"bios_version\" : \"SE11111.111.11.11.1111.11111111111\" , \"vmm_name\" : \"\" , \"vmm_version\" : \"\" , \"processor_info\" : \"54 06 05 00 FF FB EB BF\" , \"host_name\" : \"hostname\" , \"bios_name\" : \"Intel Corporation\" , \"hardware_uuid\" : \"<UUID>\" , \"process_flags\" : \"FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE-36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE\" , \"no_of_sockets\" : \"72\" , \"tboot_installed\" : \"false\" , \"is_docker_env\" : \"false\" , \"hardware_features\" : { \"TXT\" : { \"enabled\" : \"true\" }, \"TPM\" : { \"enabled\" : \"true\" , \"meta\" : { \"tpm_version\" : \"2.0\" } }, \"CBNT\" : { \"enabled\" : \"false\" , \"meta\" : { \"profile\" : \"\" , \"msr\" : \"\" } }, \"UEFI\" : { \"enabled\" : \"false\" , \"meta\" : { \"secure_boot_enabled\" : true } } }, \"installed_components\" : [ \"tagent\" ] }","title":"Conditions"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-parts","text":"This section of the template will define behaviors for each Flavor part. Each different Flavor part is optional; if the new Template will only affect the OS Flavor part, only the OS Flavor part needs to be defined here. Each Flavor part specified will have its own \"meta\" section where conditional host attributes will be defined. These must match with host-info attributes; for example, in the sample above the OS part uses the following \"meta\" section elements: { \"tpm_version\" : \"2.0\" , \"tboot_installed\" : true } These directly correspond to host-info elements from the hosts this Template will apply to.","title":"Flavor Parts"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#pcr-rules","text":"Each Flavor part section of a Flavor Template may contain 0 or more PCR rules that define PCRs to include. Again using the OS Flavor part example from above, the default Template defines SHA1, SHA256, or SHA384 PCR banks; this tells the HVS to use the \"best\" available PCR bank algorithm, but that each of these algorithms is acceptable. Alternatively, if the Template listed only the SHA384 PCR bank, the resulting Flavor would require the SHA384 PCR bank and would disregard any SHA256 or SHA1 banks, even if the SHA384 bank is unavailable and the SHA256 bank is enabled on the server. The PCR Rules will also contain at least one PCR index, indicating which PCR the rule applies to.","title":"PCR Rules"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#pcr_matches","text":"PCRs can require a direct PCR value match (when event logs are unnecessary and the final PCR hash is required to match a specific value), and/or can contain event log include/exclude/equals rules. A direct PCR value match requirement is the easiest definitions, but should only be used when a specific PCR is known to always be the same on all hosts that the resulting Flavor will apply to: { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 0 }, \"pcr_matches\" : true } This requires the value of PCR0 to exactly match, and will not examine specific event log details for this PCR index.","title":"pcr_matches"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#eventlog_includes","text":"The following example shows how to require a specific event log entry to exist: { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_includes\" :[ \"vmlinuz\" ] } This rule will require the \"vmlinuz\" event log measurement to be present in the PCR17 event log.","title":"eventlog_includes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#excluding_tags","text":"Specific event logs can also be excluded; in the below example, all events from PCR17 will be part of the resulting Flavor, but will exclude the LCP_CONTROL_HASH, initrd, and vmlinuz measurement events specifically. This is often used when a specific PCR contains measurements that should apply to different Flavor parts; different rules need to be defined to ensure that the correct events are included in the right Flavor part, and events that will apply for different Flavor parts must be excluded. { \"pcr\" :{ \"bank\" :[ \"SHA384\" , \"SHA256\" , \"SHA1\" ], \"index\" : 17 }, \"eventlog_equals\" :{ \"excluding_tags\" :[ \"LCP_CONTROL_HASH\" , \"initrd\" , \"vmlinuz\" ] } }","title":"excluding_tags"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-matching","text":"Flavors are matched to host by objects called Flavor Groups A Flavor Group represents a set of rules to satisfy for a set of flavors to be matched to a host for attestation. For example, a Flavor Group can require that a PLATFORM Flavor and an OS Flavor be used for attestation. Without this level of association, a host that matches measurements for only a PLATFORM flavor, for example, can be attested as Trusted, even though the OS Flavor would attest the host as Untrusted. Flavor matching can be automatic (the default), or can explicitly specify a host to which the Flavor Group must apply. Automatic flavor matching allows for more ease in datacenter lifecycle management with updates and patches that may cause the appropriate flavors to change over time. Automatic flavor matching will trigger a new matching action when a new flavor is added, when an existing flavor is deleted, or when a host is initially attested as Untrusted. The system will automatically attempt to find a new set of flavors that match the Flavor Group rules that will attest the host as Trusted. For example, if a host in your datacenter has recently had a BIOS update, the next attestation will cause the host to appear Untrusted (because the PLATFORM measurements will now differ). Using automatic flavor matching, the Verification Service will automatically search for a new PLATFORM flavor that matches the actual BIOS version and measurement seen on the host. If a new BIOS version is successfully found, the Verification Service will use the new version for attestation, and the host will appear Trusted. If no matching PLATFORM flavor is found, the host will appear Untrusted. When automatic flavor matching is used, think of the various flavors in the Verification Service as a collection of valid configurations, and an attested host matching any combination of those configurations (within the confines of the Flavor Group requirements for which flavor types must be present) will be attested as Trusted. Host-based flavor matching explicitly maps a specific host to a flavor. Host-based attestation requires that a host saves its entire configuration in a composite flavor document in the system, and then later validates against this flavor to detect any changes. In this case, if a host received a BIOS upgrade, the host will attest as Untrusted, and no attempt will be made to re-match a new flavor. An administrator will need to explicitly specify a new flavor to be used for that host.","title":"Flavor Matching"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#when-does-flavor-matching-happen","text":"Generally speaking, a new Flavor match operation is triggered whenever a host is registered, whenever a host is attested and would be untrusted, and whenever a Flavor is added to or removed from a Flavor group. When a new host is registered, the Verification Service will retrieve the Host Report and derive the platform information needed for Flavor matching (BIOS version, server OEM, OS type and version, TPM version, etc.). The Verification Service then searches through the Flavors in the same Flavor group that the host is in, and finds any Flavors that match the platform information. If a Flavor is deleted, the Verification Service finds any hosts that are currently associated with that Flavor, and attempts to match them to alternative Flavors. If a Flavor is added, the Verification Service looks for any hosts in the same Flavor group that are not currently matched to a Flavor of the appropriate Flavor part, and checks to see whether those hosts should be mapped to the new Flavor. If a new Report is generated for a host and would not result in a Trusted attestation, the Verification Service will first repeat the Flavor matching process to be sure that no matching Flavors exist in the host\u2019s Flavor group that would result in a Trusted attestation. If the Service still finds no matching Flavors, the host will appear as Untrusted.","title":"When Does Flavor Matching Happen?"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-matching-performance","text":"Flavor matching causes affected hosts to be moved into the QUEUE state while the host and Flavor are evaluated to determine whether the host and Flavor should be linked. Hosts can remain in the QUEUE state for varying amounts of time based on the extent of the Flavor match required. This means that the trust status of a host will not be actually updated to reflect a new Flavor until after the process finishes, which may take a few seconds or minutes depending on the number of registered hosts, Flavors in the same Flavorgroup, etc. If a new host is registered, only that host will be added to the queue, and other hosts will be unaffected. The Verification Service will look for only the HOST\\_UNIQUE flavor part applicable to that specific host, and then will look at all PLATFORM and OS Flavors in the same Flavorgroup has the host, using the Flavor metadata and host info to narrow the results. The Service will match the new host to the most similar Flavors, and then move the host to the CONNECTED state and generate a new trust report. When a new PLATFORM or OS Flavor is created, the Service will instead add all hosts in the same Flavorgroup as the new Flavors to the queue. Each host in the queue will then be re-evaluated against every PLATFORM and OS Flavor in the Flavorgroup to determine the closest match. This means that adding a new Flavor can cause more hosts to each spend more time in the QUEUE state, as compared to adding a new host. For this reason, as a best practice for initial population of Flavors and hosts for a new deployment, it is suggested that Flavors be created before registering hosts. This is not a concern after the initial population of Flavors and hosts.","title":"Flavor Matching Performance"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-groups","text":"Flavor Groups represent a collection of one or more Flavors that are possible matches for a collection of one or more hosts. Flavor Groups link to both Flavors and hosts \u2013 a host in Flavor Group \"ABC\" will only be matched to Flavors in Flavor Group \"ABC\"","title":"Flavor Groups"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#default-flavor-group","text":"By default the Verification Service includes a Flavor Group named automatic and another named unique During host registration, the automatic Flavor Group is used as a default selection if no other Flavor Group is specified.","title":"Default Flavor Group"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#automatic","text":"The automatic Flavor Group is used as the default Flavor Group for all hosts and all Flavor parts. If no other Flavor Groups are specified when creating Flavors or Hosts, all Hosts and Flavors will be added to this group. This is useful for datacenters that want to manage a single set of acceptable configurations for all hosts.","title":"automatic"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#unique","text":"The unique Flavor Group is used to contain HOST\\_UNIQUE Flavors. This Flavorgroup is used by the backend software and should not be managed manually.","title":"unique"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-match-policies","text":"Flavor Match Policies are used to define how the Flavor Match engine will match Flavors to hosts for attestation for a given Flavor Group. Each Flavor part can have defined Flavor Match Policies within a given Flavor Group. { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"all_of\" , \"required_if_defined\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"IMA\" : { \"all_of\" , \"required_if_defined\" } } The sample Policy above would require that a PLATFORM Flavor part be matched, but any PLATFORM Flavor part in the Flavor Group may be matched. The OS Flavor Part will only be required if there is an OS Flavor part in the Flavor Group; if there are no OS Flavor parts in the Group, the match will not be required. If more than one OS Flavor part exists in the Group, all of those OS parts will be required to match for a host to be Trusted.","title":"Flavor Match Policies"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#default-flavor-match-policy","text":"The automatic Flavor Group, and any Flavor Group created without explicitly defining a Flavor Match Policy, will be created using the following Flavor Match Policy. This is the default behavior for Flavor Matching: { \"PLATFORM\" : { \"any_of\" , \"required\" }, \"OS\" : { \"any_of\" , \"required\" }, \"HOST_UNIQUE\" : { \"latest\" , \"required_if_defined\" }, \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" }, \"IMA\" : { \"all_of\" , \"required_if_defined\" } }","title":"Default Flavor Match Policy"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#any_of","text":"The ANY_OF Policy allows any Flavor of the specified Flavor part to be matched. If the Flavor Group contains OS Flavor 1 and OS Flavor 2, a host will be Trusted if it matches either OS Flavor 1 or OS Flavor 2.","title":"ANY_OF"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#all_of","text":"The ALL_OF Policy requires all Flavors of the specified Flavor Part in the Flavor Group to be matched. For example, if Flavor Group X contains PLATFORM Flavor Part 1 and PLATFORM Flavor Part 2, a host in Flavor Group X will need to match both PLATFORM Flavor 1 and PLATFORM Flavor 2 to attest as Trusted. If the host matches only one of the Flavors, or neither of them, the host will be attested as Untrusted.","title":"ALL_OF"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#latest","text":"The LATEST Policy requires that the most recently created Flavor of the specified Flavor part be used when matching to a host. For example: \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored.","title":"LATEST"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#required","text":"The REQUIRED Policy requires a Flavor of the specified part to be matched. For example: \"PLATFORM\" : { \"any_of\" , \"required\" } This policy means that a PLATFORM Flavor part must be used; if the Flavor Group contains no PLATFORM Flavor parts, hosts in this Flavor Group will always count as Untrusted.","title":"REQUIRED"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#required_if_defined","text":"The REQUIRED_IF_DEFINED Policy requires that a Flavor part be used if a Flavor of that part exists. If no Flavor part of this type exists in the Flavor Group, the Flavor part will not be required. \"ASSET_TAG\" : { \"latest\" , \"required_if_defined\" } ASSET_TAG Flavor parts by default use the above Policy. This means that if Asset Tag Flavors are in the Flavor Group, the most recently created Asset Tag Flavor will be used. If no Asset Tag Flavors are present in the Flavor Group, then this Flavor part will be ignored.","title":"REQUIRED_IF_DEFINED"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#flavor-match-event-triggers","text":"Several events will cause the background queue service to attempt to re-match Flavors and hosts: Host registration This event is the first time a host will be attempted to be matched to appropriate Flavors in the same Flavor Group, and affects only the host that was added (other hosts will not be re-matched to Flavors when you add a new host). Flavor creation When a new Flavor is added to a Flavor Group, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the new Flavor. Flavor deletion When a Flavor is deleted, the queue system will repeat the Flavor match operation for all hosts in the same Flavor Group as the deleted Flavor. Creation of a new Attestation Report When a new Attestation Report is generated, if the host would attest as Untrusted with the currently-matched Flavors, the host being attested will be re-matched as part of the Report generation process. This ensures that Reports are always generated using the best possible Flavor matches available in the database.","title":"Flavor Match Event Triggers"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#sample-flavorgroup-api-calls","text":"","title":"Sample Flavorgroup API Calls"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#create-a-new-flavorgroup","text":"POST https://<Verification Service IP or Hostname>:8443/hvs/v2/flavorgroups Authorization: Bearer <token> { \"name\": \"firstTest\", \"flavor_match_policy_collection\": { \"flavor_match_policies\": [ { \"flavor_part\": \" PLATFORM\", \"match_policy\": { \"match_type\": \"ANY_OF\", \"required\": \"REQUIRED\" } } ] } } Response: { \"id\" : \"a0950923-596b-41f7-b9ad-09f525929ba1\" , \"name\" : \"firstTest\" , \"flavor_match_policy_collection\" : { \"flavor_match_policies\" : [ { \"flavor_part\" : \" PLATFORM\" , \"match_policy\" : { \"match_type\" : \"ANY_OF\" , \"required\" : \"REQUIRED\" } } ] } } NOTE : By default only automatic flavor groups will be created and availabe as Default flavor group. Custom flavor groups required for user specific needs to be created by user before adding that particular flavor group for Host registration and Flavor creation.","title":"Create a New Flavorgroup"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#ima-flavor","text":"IMA flavor will be generated with the ima measurements present in the host manifest and this flavor can be created multiple times based on the request. IMA flavor will be associated with the host based on ALL_OF match type policy. This will be supported by the existing API call itself. POST : https://{{hvs_ip}}:30443/hvs/v2/flavors Body { \"connection_string\": \"https://<host-ip>:31443;\", \"partial_flavor_types\": [\"PLATFORM\",\"OS\",\"HOST_UNIQUE\",\"IMA\",\"SOFTWARE\"], \"flavorgroup_names\": [] } IMA flavor will be created on default flavor group automatic based on the IMA Flavor template. This flavor will be stored in a flavors DB like other existing flavors.","title":"IMA Flavor"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#ima-flavor-template","text":"{ \"label\": \"ima\", \"condition\" :[ \"//host_info/os_name//*[text()='RedHatEnterprise'] or //host_info/os_name//*[text()='Centos'] or //host_info/os_name//*[text()='Ubuntu']\" ], \"flavor_parts\": { \"IMA\": { \"pcr_rules\": [{ \"pcr\": { \"index\": 10, \"bank\": [\"SHA384\", \"SHA256\", \"SHA1\"] }, \"pcr_matches\": true }] } } }","title":"IMA Flavor template"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#sample-for-ima-flavor","text":"``` { \"flavor\":{ \"meta\":{ \"id\":\"2c3bcb9d-b140-4732-8a12-0af281246fe8\", \"description\":{ \"digest_algorithm\":\"SHA256\", \"flavor_part\":\"IMA\", \"label\":\"ima\" }, \"vendor\":\"INTEL\" }, \"pcrs\": [{ \"pcr\": { \"index\": 10, \"bank\":\"SHA256\" }, \"measurement\": \"3f95ecbb0bb8e66e54d3f9e4dbae8fe57fed96f0\", \"pcr_matches\":true }], \"ima_measurements\":[{ \"file\":\"/root/test\", \"measurement\":\"12aacb9f9da0518937f3da6c0526b381787faa60a65b319208391f303b5fe7b7a\" }, { \"file\":\"/usr/share/vim/vim80/ftplugin/yamlfile.vim\", \"measurement\":\"a0ca2d70982bf2db5a71a59ca7afd90aed7041ae703e2e711847c98aff0ac800\" }] } } ``` As with other Flavor parts, hosts will be matched to Flavors in the same Flavorgroup that the host is added to, and will not be matched to Flavors in different Flavorgroups. Flavor matching will happen on the same events as for other Flavor parts.","title":"Sample for IMA Flavor"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#ima-integrity-rule","text":"Current IMA logs will be taken from the hostmanifest file and the replay will be performed for all the IMA logs against the pcr10 cumulative hash recieved from the host.","title":"Ima-Integrity rule"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#imaeventlogequals-rule","text":"IMA flavor will be compared against the host manifest data of ima-log. If it matches, then it will store ima-trust status as true.","title":"ImaEventLogEquals rule"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#attestation-report-generation","text":"If the ima eventlog equals rule is true for all the measurements, we will provide only one entry in the report like below, \"IMA\": { \"trust\": true, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaEventLogEquals\", \"markers\": [ \"IMA\" ] }, \"flavor_id\": \"253e5fc3-11b0-4a38-a2a0-4a264aa40139\", \"trusted\": true }] } If ima eventlog equals rule fails for any of the ima measurements, we will log those entries under faults in the reports as below. \"IMA\": { \"trust\": false, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaEventLogEquals\", \"markers\": [ \"IMA\" ] }, \"flavor_id\": \"253e5fc3-11b0-4a38-a2a0-4a264aa40139\", \"faults\": [{ \"fault_name\": \"fault.PcrValueMismatch\", \"description\": \"Host IMA log /usr/lib/systemd/libsystemd-shared-239.so with value 122e981e1d16de3269667f4e84bf8532462214f4f8a183e1c441bbfd3caecd10 does not match expected value 762e981e1d16de3269667f4e84bf84a0a0c84f4f8a183e13ac5ba1c441bbfd3c\", \"pcr_index\": \"10\", \"pcr_bank\": \"SHA256\", }], \"trusted\": false }] } If Hostmanifest contains unexpected/additional IMA log entries when compare to flavor measurements, PcrEventLogContainsUnexpectedEntries fault will be raised. \"IMA\": { \"trust\": false, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaEventLogEquals\", \"markers\": [ \"IMA\" ] }, \"flavor_id\": \"253e5fc3-11b0-4a38-a2a0-4a264aa40139\", \"faults\": [{ \"fault_name\": \"fault.PcrEventLogContainsUnexpectedEntries\", \"description\": \"Module manifest for PCR 10 of SHA256 value contains 1 unexpected entries\", \"unexpected_ima_entries\": { \"pcr\": { \"index\": 10, \"bank\": \"SHA256\" }, \"ima_measurements\": [ { \"file\": \"/root/ima-cont-test/check1.txt\", \"measurement\": \"73b5b283c458f698b3eafc6afbb01149dec48c541896bce2a74d79a0881d7864\" } ], \"ima_template\": \"ima-ng\" } }], \"trusted\": false }] } If hostmanifest does not contain all the measurements from flavor, PcrEventLogMissingExpectedEntries fault will be raised in the report. \"IMA\": { \"trust\": false, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaEventLogEquals\", \"markers\": [ \"IMA\" ] }, \"flavor_id\": \"253e5fc3-11b0-4a38-a2a0-4a264aa40139\", \"faults\": [{ \"fault_name\": \"fault.PcrEventLogMissingExpectedEntries\", \"description\": \"Module manifest for PCR 10 of SHA256 value missing 2 expected entries\", \"unexpected_ima_entries\": { \"pcr\": { \"index\": 10, \"bank\": \"SHA256\" }, \"ima_measurements\": [ { \"file\": \"/root/itest.txt\", \"measurement\": \"73b5b283c458f698b3eafc6afbb01149dec48c541896bce2a74d79a0881d7864\" }, { \"file\": \"/root/icheck.txt\", \"measurement\": \"fbf99c21c97b5134c22430e6bdd5f35a44e6d3a14855f13a8fdcce84eb52994a\" } ], \"ima_template\": \"ima-ng\" } }], \"trusted\": false }] }","title":"Attestation report generation"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#sample-for-ima-measurement-log-integrity-rule-in-report","text":"``` \"IMA\": { \"trust\": true, \"rules\": [{ \"rule\": { \"rule_name\": \"rule.ImaMeasurementLogIntegrity\", \"markers\": [ \"IMA\" ], \"expected_pcr\": { \"pcr\": { \"index\": 10, \"bank\": \"SHA256\" }, \"measurement\": \"b6e1251e1d16de3269667f4e84bf84a0a0c84f4f8a183e13ac5ba1c441bbfd3c\", \"pcr_matches\": true }, \"expected_imavalues\": { \"ima_measurements\": [ { \"file\": \"boot_aggregate\", \"measurement\": \"cacb533ca55a87d4e0c5954608102091ab42b99ae8fbbdbba7c93efad5e6a174\" }, { \"file\": \"/root/ima-cont-test/check1.txt\", \"measurement\": \"b351e6014c0713eda511289d7af11a3c49f7162b471fb93adca869f37d6d4d15\" }, { \"file\": \"/root/ima-cont-test/check2.txt\", \"measurement\": \"fc1ebc0a83cdea7e2e63063c81f935319207194b4425d3a88fd1f9c8de1184b7\" } ] } }, \"flavor_id\": \"12835fc3-11b0-4a38-a2a0-4a264aa40139\", \"trusted\": true }] } ``` As part of tpm quote response, TA will send ima_log. To include the ima logs in the tpm quote response, the following cofiguration parameters will be added by hvs in the tpm-quote request body. ``` `ima_measure_enabled` - it can be true or false under TA `config.yaml` located in `/etc/trustagent/v5.0.0/`. Only if it is true, IMA logs will be sent by TA. ``` NOTE : IMA logs will be sent only when the ima enable option is set in the tpm quote request body and the same configuration is enabled in the TA as well.","title":"Sample for IMA measurement log integrity rule in report,"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#hvs-pagination","text":"","title":"HVS Pagination"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#api-consumption","text":"API consumers will be required to paginate through HVS data (ex. reports) if the amount of data in the database exceeds the limit or default limit (otherwise all records will be returned in a single query). When starting pagination, API consumers will not provide a cursor value to their request (i.e. so that the first page is returned). On subsequent page requests, API consumers will get the next page by providing the cursor returned in the previous call. API consumers will terminate the collection of pages arbitrarily or when the cursor is less than zero (i.e. -1 will be returned by the controller to signal EOF).","title":"API Consumption"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#database-changes","text":"Each of HVS' object tables will be update to include the \u201crow_id\u201d column (autoincrementing number id) which will be used as the pagination key. The following requirements/recommendations apply to all impacted database tables/queries. * All impacted database tables must be updated to have auto-increment id field with unique and not null constraint applied. * All impacted database queries must be updated to include limit construct. They should also be able to filter records based on provided \"afterId\" value.","title":"Database changes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#api-changes","text":"All the impacted end-points will support two additional query parameters, \"limit\" for specifying number of records to return, and \"afterId\" for specifying auto-increment id from which to return records. If no \"limit\" parameter is passed, default limit will be used. And if no \"afterId\" parameter is passed, records from beginning will be returned. All the impacted response models will support two additional json attributes, \"next\" link for fetching next page, and \"prev\" link for fetching previous page. First page won't have \"prev\" link. And last page won't have \"next\" link. NOTE : The default limit value is 1000 and default afterId value is 0","title":"API Changes"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/90%20Flavor%20Management/#impacted-apis","text":"The following \"GET\" (search) APIs are updated to handle pagination API Description GET /hosts Get all the hosts registered on HVS GET /reports Get the latest report for all the hosts registered on HVS GET /host-status Get the latest host-status for all the hosts registered on HVS GET /flavors Get all the flavors created on HVS GET /flavorgroups Get all the flavorgroups created on HVS GET /exsi-cluster Get all the exsi-clusters along with hostnames registered on HVS GET /tpm-endorsements Get all the active tpm-endorsement certificates uploaded to HVS","title":"Impacted APIs"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/","text":"Appendix PCR Definitions Red Had Enterprise Linux TPM 2.0 PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image Initial Boot Block (Intel\u00ae BootGuard only) This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. (Intel\u00ae BootGuard only): Extends measurements based on the Intel\u00ae BootGuard profile configuration and production vs non-production ACM flags; ACM signature; BootGuard key manifest hash; Boot Policy Manifest Signature All PCR 7 Intel\u00ae BootGuard configuration and profiles Describes the success of the IBB measurement event. All (Intel\u00ae BootGuard only) PCR 17 ACM BIOS AC registration information Digest of Processor S-CRTM Digest of Policycontrol Digest of all matching elements used by the policy Digest of STM Digest of Capability field of OsSinitData Digest of MLE For TA hosts, this PCR includes measurements of the OS, InitRD, and UUID. This changes with every install due to InitRD and UUID change. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] Digest of public key modulus used to verify SINIT signature Digest of Processor S-CRTM Digest of Capability field of OSSinitData table Digest of PolicyControl field of used policy Digest of LCP VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Linux hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux VMWare ESXi TPM 1.2 PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Citrix Xen hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts and is blank for all other host types. VMware ESXi PCR 22 Asset Tag This PCR contains the measurement of the SHA1 of the Asset Tag Certificate provisioned to the TPM, if any. VMware ESXi TPM 2.0 VMWare supports TPM 2.0 with Intel TXT starting in vSphere 6.7 Update 1. Earlier versions will support TPM 1.2 only. PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as part of the PLATFORM flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi this PCR contains individual measurements of all of the non-Kernel modules \u2013 this includes all of the VIBs installed on the ESXi host. This is part of the OS flavor. Note that two ESXi hosts with the same version of ESXi installed may require different OS flavors if different VIBs are installed. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts for some host-specific measurements, and is part of the host-unique flavor. VMware ESXi PCR 22 Asset Tag Asset Tag is not currently supported for TPM 2.0 with ESXi. VMware ESXi Attestation Rules Platform TPM Flavor Type Rules to be verified Comments RHEL 2.0 HARDWARE PcrMatchesConstant rule for PCR 0 PcrEventLogIncludes rule for PCR 17 (LCP_DETAILS_HASH, BIOSAC_REG_DATA, OSSINITDATA_CAP_HASH, STM_HASH, MLE_HASH, NV_INFO_HASH, tb_policy, CPU_SCRTM_STAT, HASH_START, LCP_CONTROL_HASH) PcrEventLogIntegrity rule for PCR 17 Evaluation of PcrEventLogIncludes would not include initrd and vmlinuz modules. They would be handled in host_specific flavor. Evaluation of PcrEventLogIntegrity rule would also include OS modules (initrd & vmlinuz) OS PcrEventLogIntegrity rule for PCR 17 ASSET_TAG AssetTagMatches rule HOST_SPECIFIC PcrEventLogIncludes rule for PCR 17 (initrd & vmlinuz) VMware ESXi 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 PcrMatchesConstant rule for PCR 17 OS PcrMatchesConstant rule for PCR 18 PcrMatchesConstant rule for PCR 20 PcrEventLogEqualsExcluding rule for PCR 19 (excludes dynamic modules based on component name) PcrEventLogIntegrity rule for PCR 19 ASSET_TAG PcrMatchesConstant rule for PCR 22 VMware ESXi 2.0 NOT SUPPORTED Windows 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule Windows 2.0 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule AssetTagMatches rule needs to be updated to verify the key-value pairs after verifying the tag certificate.","title":"Appendix"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/#appendix","text":"","title":"Appendix"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/#pcr-definitions","text":"","title":"PCR Definitions"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/#red-had-enterprise-linux","text":"","title":"Red Had Enterprise Linux"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/#tpm-20","text":"PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image Initial Boot Block (Intel\u00ae BootGuard only) This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. (Intel\u00ae BootGuard only): Extends measurements based on the Intel\u00ae BootGuard profile configuration and production vs non-production ACM flags; ACM signature; BootGuard key manifest hash; Boot Policy Manifest Signature All PCR 7 Intel\u00ae BootGuard configuration and profiles Describes the success of the IBB measurement event. All (Intel\u00ae BootGuard only) PCR 17 ACM BIOS AC registration information Digest of Processor S-CRTM Digest of Policycontrol Digest of all matching elements used by the policy Digest of STM Digest of Capability field of OsSinitData Digest of MLE For TA hosts, this PCR includes measurements of the OS, InitRD, and UUID. This changes with every install due to InitRD and UUID change. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] Digest of public key modulus used to verify SINIT signature Digest of Processor S-CRTM Digest of Capability field of OSSinitData table Digest of PolicyControl field of used policy Digest of LCP VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Linux hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux","title":"TPM 2.0"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/#vmware-esxi","text":"","title":"VMWare ESXi"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/#tpm-12","text":"PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as the PLATFORM Flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi and Trust Agent hosts, this PCR contains individual measurements of all of the non-Kernel modules. For Citrix Xen hosts, this PCR is a measurement of the OS, InitRD, and UUID. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts and is blank for all other host types. VMware ESXi PCR 22 Asset Tag This PCR contains the measurement of the SHA1 of the Asset Tag Certificate provisioned to the TPM, if any. VMware ESXi","title":"TPM 1.2"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/#tpm-20_1","text":"VMWare supports TPM 2.0 with Intel TXT starting in vSphere 6.7 Update 1. Earlier versions will support TPM 1.2 only. PCR Measurement Parameters Description Operating System PCR 0 BIOS ROM and Flash Image This PCR is based solely on the BIOS version, and remains identical across all hosts using the same BIOS. This PCR is used as part of the PLATFORM flavor. All PCR 17 ACM This PCR measures the SINIT ACM, and is hardware platform-specific. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 18 MLE [Tboot +VMM] This PCR measures the tboot and hypervisor version. In ESXi hosts, only the tboot version is measured. This PCR is part of the PLATFORM Flavor. VMware ESXi Red Hat Enterprise Linux PCR 19 OS Specific. ESX and Trust Agent \u2014 non Kernel modules Citrix Xen \u2014 OS + Init RD + UUID For ESXi this PCR contains individual measurements of all of the non-Kernel modules \u2013 this includes all of the VIBs installed on the ESXi host. This is part of the OS flavor. Note that two ESXi hosts with the same version of ESXi installed may require different OS flavors if different VIBs are installed. VMware ESXi Red Hat Enterprise Linux PCR 20 For ESXi only. VM Kernel and VMK Boot This PCR is used only by ESXi hosts for some host-specific measurements, and is part of the host-unique flavor. VMware ESXi PCR 22 Asset Tag Asset Tag is not currently supported for TPM 2.0 with ESXi. VMware ESXi","title":"TPM 2.0"},{"location":"product-guides/Foundational%20%26%20Workload%20Security/999%20Appendix/#attestation-rules","text":"Platform TPM Flavor Type Rules to be verified Comments RHEL 2.0 HARDWARE PcrMatchesConstant rule for PCR 0 PcrEventLogIncludes rule for PCR 17 (LCP_DETAILS_HASH, BIOSAC_REG_DATA, OSSINITDATA_CAP_HASH, STM_HASH, MLE_HASH, NV_INFO_HASH, tb_policy, CPU_SCRTM_STAT, HASH_START, LCP_CONTROL_HASH) PcrEventLogIntegrity rule for PCR 17 Evaluation of PcrEventLogIncludes would not include initrd and vmlinuz modules. They would be handled in host_specific flavor. Evaluation of PcrEventLogIntegrity rule would also include OS modules (initrd & vmlinuz) OS PcrEventLogIntegrity rule for PCR 17 ASSET_TAG AssetTagMatches rule HOST_SPECIFIC PcrEventLogIncludes rule for PCR 17 (initrd & vmlinuz) VMware ESXi 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 PcrMatchesConstant rule for PCR 17 OS PcrMatchesConstant rule for PCR 18 PcrMatchesConstant rule for PCR 20 PcrEventLogEqualsExcluding rule for PCR 19 (excludes dynamic modules based on component name) PcrEventLogIntegrity rule for PCR 19 ASSET_TAG PcrMatchesConstant rule for PCR 22 VMware ESXi 2.0 NOT SUPPORTED Windows 1.2 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule Windows 2.0 PLATFORM PcrMatchesConstant rule for PCR 0 OS PcrMatchesConstant rule for PCR 13 PcrMatchesConstant rule for PCR 14 ASSET_TAG AssetTagMatches rule AssetTagMatches rule needs to be updated to verify the key-value pairs after verifying the tag certificate.","title":"Attestation Rules"}]}